RvP()	-- init Lua extension

_G.kScreen = (1024/768) / (device().width/device().height)
_G.isWideScreen = _G.kScreen <= 0.85

game_options.load_game_options()

-- X-ray extensions callbacks
-- CActor
callback.on_key_press                 = 123
callback.on_key_release               = 124
callback.on_key_hold                  = 125
callback.on_mouse_wheel               = 126
callback.on_mouse_move                = 127
callback.on_anomaly_hit               = 128
callback.on_drop_inv_item             = 129
callback.on_belt                      = 130
callback.on_ruck                      = 131
callback.on_slot                      = 132
callback.on_select_item               = 133
callback.on_create_cell_item          = 136
callback.on_attach_vehicle            = 137
callback.on_vehicle_exit              = 138
callback.on_detach_vehicle            = 139
callback.after_save                   = 140
callback.on_focus_item                = 141
callback.on_focus_lost_item           = 142
callback.on_grouping_item             = 143
callback.on_mob_hit_to_actor          = 144
callback.on_change_goodwill           = 145
callback.on_before_use_item           = 156
callback.on_animation_end             = 157
callback.pda_contact                  = 180
-- CTorch
callback.on_switch_torch              = 134
-- CAIStalker
callback.on_set_dest_vertex           = 135
-- CInventoryBox
callback.on_inv_box_put_item          = 151
-- CEntityAlive
callback.entity_alive_before_hit      = 152
-- CWeapon
callback.update_addons_visibility     = 154
callback.update_hud_addons_visibility = 155

-- Некоторые недостающие key_bindings
key_bindings.kENGINE		= 15
key_bindings.kACTIVE_JOBS	= 53
key_bindings.kMAP			= 54
key_bindings.kCONTACTS		= 55
key_bindings.kUSE_BANDAGE	= 73
key_bindings.kUSE_MEDKIT	= 74
key_bindings.kQUICK_SAVE	= 75
key_bindings.kQUICK_LOAD	= 76
-- Некоторые недостающие DIK_keys
DIK_keys.DIK_LMOUSE			= 337
DIK_keys.DIK_RMOUSE			= 338
DIK_keys.DIK_WMOUSE			= 339

-- extension of namespaces Lua 
--// string
-- обрезаем пробелы по краям строки
if string.trim==nil then
	_G.trim = function (s)
		return (string.gsub(s, "^%s*(.-)%s*$", "%1"))
	end
else
	_G.trim = string.trim
end
-- В основном функция используется для разбивки строки по одному символу,
-- поэтому для ускорения работы сделаем так.
-- Для других случаев можно и отдельную функцию написать.
string.explode = function ( str, div, clear )
	local ret = {}
	for s in string.gmatch(str, "([^"..div.."]+)") do
		ret[#ret+1] = (clear and trim(s) or s)
	end
	return ret
end
-- 'string.lower/upper' с поддержкой кириллицы.
string.lower1 = function (str)
	return string.lower(str:gsub("([А-Я])",
		function(s) return string.char(s:byte()+32) end):gsub("Ё", "ё"))
end
string.upper1 = function (str)
	return string.upper(str:gsub("([а-я])",
		function(s) return string.char(s:byte()-32) end):gsub("ё", "Ё"))
end
-- очистка строки от "лишних" символов (полезно при работе с FS)
string.clear = function (str)
	return str:gsub( "%p", function(s) return s:match("[%.%-_]*") end )
end
--// math
-- выравнивание значения n в пределы от min до max
math.clamp = function( n, min, max )
	if min>max then min,max=max,min end
	return (n>max and max) or (n<min and min) or n
end
-- округление числа
--math.round = function ( n )
--	local r = n%1
--	return (r>=0.5 and n-r+1) or n-r
--end
--// table
-- получаем реальный размер таблицы
if table.size == nil then
	table.size = function ( t )
		local n = 0
		for _ in pairs(t) do n = n + 1 end
		return n
	end
end
-- получаем копию таблицы
table.copy = function ( tbl, src )
	for k,v in pairs(src) do
		if type(v) == 'table' then
			tbl[k] = table.copy( {}, v )
		else
			tbl[k] = v
		end
	end
	return tbl
end
-- поиск значения в таблице
table.find = function( tbl, val )
	local tp = type(val)
	for k,v in pairs(tbl) do
		if type(v)==tp and v==val then return true end
	end
	return false
end
table.add = function( tbl, key )
	local n = tbl[key]
	tbl[key] = (n or 0) + 1
end
table.sub = function( tbl, key )
	local n = tbl[key]
	if n==nil or n==1 then
		tbl[key] = nil
	else
		tbl[key] = n - 1
	end
end
table.random = function ( tbl )
	if not next(tbl) then return nil end
	return tbl[ math.random(#tbl) ]
end
-- расширенная распечатка таблицы в лог
table.print = function( tbl, subs )
	subs = subs or ""
	local s
	for k,v in pairs(tbl) do
		s = (type(k)=="userdata" and "userdata") or tostring(k)
		if type(v) == "table" then
			log1(subs..s..":table")
			table.print(v, subs.."    ")
		elseif type(v) == "function" then
			log1(subs..s..":function")
		elseif type(v) == "userdata" then
			if v.x and v.y and v.z then
				log1(subs..s..":vector")
				print_vector(v, subs.."    ")
			elseif v.k and v.j and v.i and v.c then
				log1(subs..s..":matrix")
				print_matrix(v, subs.."    ")
			elseif v.id and v.name then
				if type(v.id) == "function" then
					log1(subs..s..":game_object")
					log1(subs.."    "..v:name())
				elseif type(v.id) == "number" then
					log1(subs..s..":server_object")
					log1(subs.."    "..v:name())
				else
					log1(subs..s..":userdata")
				end
			else
				log1(subs..s..":userdata")
			end
		else
			log1(subs..s..":"..tostring(v))
		end
	end
end

function print_vector(v, subs)
	log1((subs or "")..v.x..":"..v.y..":"..v.z)
end
function print_matrix(m, subs)
	print_vector(m.i, subs)
	print_vector(m.j, subs)
	print_vector(m.k, subs)
	print_vector(m.c, subs)
end

-- class 'ini_file'
ini_file.r_string_ex = function (ini, section, line, def)
	if ini:section_exist(section) and ini:line_exist(section, line) then
		return ini:r_string(section, line)
	end
	return def
end
ini_file.r_u32_ex = function (ini, section, line, def)
	if ini:section_exist(section) and ini:line_exist(section, line) then
		return ini:r_u32(section, line)
	end
	return def
end
ini_file.r_float_ex = function (ini, section, line, def)
	if ini:section_exist(section) and ini:line_exist(section, line) then
		return ini:r_float(section, line)
	end
	return def
end
ini_file.r_clsid_ex = function (ini, section, line, def)
	if ini:section_exist(section) and ini:line_exist(section, line) then
		return ini:r_clsid(section, line)
	end
	return def
end
ini_file.r_bool_ex = function (ini, section, line, def)
	if ini:section_exist(section) and ini:line_exist(section, line) then
		return ini:r_bool(section, line)
	end
	return def
end

-- class 'game_object'
game_object.is_alive = function(obj)
	local cls = (obj and obj.clsid) and obj:clsid() or -1
	return (IAmAStalker[cls] or IAmAMonster[cls]) and obj:alive()
end
game_object.is_wounded = function (obj)
	return obj:is_stalker() and obj:alive() and obj:wounded()
end

-- class 'net_packet'
-- read
local CTime_0 = game.CTime()
net_packet.r_vec_q8 = function( pk )
	return { x = pk:r_u8(), y = pk:r_u8(), z = pk:r_u8() }
end
net_packet.r_qt_q8 = function( pk )
	return { x = pk:r_u8(), y = pk:r_u8(), z = pk:r_u8(), w = pk:r_u8() }
end
net_packet.r_u64 = function( pk )
	return { pk:r_u8(), pk:r_u8(), pk:r_u8(), pk:r_u8(),
			 pk:r_u8(), pk:r_u8(), pk:r_u8(), pk:r_u8() }
end
net_packet.r_vu8u8 = function( pk )
	local t = {}
	for i = 1, pk:r_u8() do t[i] = pk:r_u8() end
	return t
end
net_packet.r_vu32u8 = function( pk )
	local t = {}
	for i = 1, pk:r_s32() do t[i] = pk:r_u8() end
	return t
end
net_packet.r_vu32u16 = function( pk )
	local t = {}
	for i = 1, pk:r_s32() do t[i] = pk:r_u16() end
	return t
end
net_packet.r_tail = function( pk )
	local t = {}
	while not pk:r_eof() do t[#t+1] = pk:r_u8() end
	return t
end
net_packet.r_CTime = function( pk )
	local Y = pk:r_u8()
	if Y ~= 0 then
		local t = game.CTime()
		local M, D, h, m, s, ms = pk:r_u8(), pk:r_u8(), pk:r_u8(), pk:r_u8(), pk:r_u8(), pk:r_u16()
		t:set( Y + 2000,  M, D, h, m, s, ms )
		return t
	else
		return CTime_0
	end
end
-- write
net_packet.w_vec_q8 = function( pk, v )
	pk:w_u8( v.x ); pk:w_u8( v.y ); pk:w_u8( v.z )
end
net_packet.w_qt_q8 = function( pk, v )
	pk:w_u8( v.x ); pk:w_u8( v.y ); pk:w_u8( v.z ); pk:w_u8( v.w )
end
net_packet.w_u64 = function( pk, v )
	for i = 1, 8 do pk:w_u8( v[i] ) end
end
net_packet.w_vu8u8 = function( pk, v )
	local n = #v
	pk:w_u8( n )
	for i = 1, n do pk:w_u8( v[i] ) end
end
net_packet.w_vu32u8 = function( pk, v )
	local n = #v
	pk:w_s32( n )
	for i = 1, n do pk:w_u8( v[i] ) end
end
net_packet.w_vu32u16 = function( pk, v )
	local n = #v
	pk:w_s32( n )
	for i = 1, n do pk:w_u16( v[i] ) end
end
net_packet.w_tail = function( pk, v )
	for i, n in ipairs( v ) do
		pk:w_u8( n )
	end
end
net_packet.w_CTime = function( pk, v )
	if v and v ~= CTime_0 then
		local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
		Y, M, D, h, m, s, ms = v:get( Y, M, D, h, m, s, ms )
		pk:w_u8 ( Y - 2000 ); pk:w_u8 ( M ); pk:w_u8 ( D )
		pk:w_u8 ( h ); pk:w_u8 ( m ); pk:w_u8 ( s ); pk:w_u16( ms )
	else
		pk:w_u8 ( 0 )
	end
end

-- namespace 'level'
level.change_game_time = function (m, h, d)	-- minutes, hours, days
	level.advance_game_time((m or 0) * 60000 + (h or 0) * 3600000 + (d or 0) * 86400000)
end
level.main_time_factor = sys_ini:r_float("alife","time_factor")

-- namespace 'relation_registry'
relation_registry.get_goodwill = function (who_id, to_whom_id)
	return GetGoodwill(who_id, to_whom_id)
end
relation_registry.set_goodwill = function (who_id, to_whom_id, goodwill)
	return db.actor:set_goodwill_ex(who_id, to_whom_id, goodwill)
end
relation_registry.change_goodwill = function (who_id, to_whom_id, goodwill_change)
	return db.actor:change_goodwill_ex(who_id, to_whom_id, goodwill_change)
end

-- other global functions
_G['get_inv_name'] = function (section)
	return sys_ini:r_string_ex(section, "inv_name", section)
end
_G['GetIconParams'] = function (section)
	if section~=nil and section~=""
		and sys_ini:section_exist(section)
		and sys_ini:line_exist(section, "inv_grid_x")
	then
		return {x = sys_ini:r_u32(section, "inv_grid_x") *50,
				y = sys_ini:r_u32(section, "inv_grid_y") *50,
				w = sys_ini:r_u32(section, "inv_grid_width") *50,
				h = sys_ini:r_u32(section, "inv_grid_height") *50}
	end
	return {x=0, y=0, w=1, h=1}
end

_G['old_user_name'] = user_name
_G['user_name'] = game_options.GetUserName
_G['radio_scope_vibor'] = game_options.Getradio_scope

_G['actor_name'] = function()
	return ( has_alife_info("esc_find_doctor_done") and "Стрелок" ) or "Меченый"
end

local en = [[qwertyuiop[]asdfghjkl;'zxcvbnm,./QWERTYUIOP{}|ASDFGHJKL:"ZXCVBNM<>?@#$^&]]
local ru = [[йцукенгшщзхъфывапролджэячсмитьбю.ЙЦУКЕНГШЩЗХЪ/ФЫВАПРОЛДЖЭЯЧСМИТЬБЮ,"№;:?]]
local tt = {}
for i=1,#en do tt[en:sub(i,i)] = ru:sub(i,i) end
_G['translit']  = function (l) return tt[l] or l end

-- небольшой несохраняемый таймер в реальном времени
local tmr_id = 0	-- id таймера, для избежаниЯ коллизий
_G['start_small_timer'] = function( time, func, ... )
	local tName = "smltmr_"..tmr_id
	if tmr_id > 500 then tmr_id = 0
	else tmr_id = tmr_id + 1 end
	
	_G[tName] = function(t)
		if t.time<time_global() then
			xr_s.unregister_callback("update", _G[tName])
			t.action(unpack(t.params))
			_G[tName] = nil
		end
	end
	xr_s.register_callback("update", _G[tName],
		{time = time+time_global(),
		action = func,
		params = {...}} )
	return tName
end
_G['remove_small_timer'] = function (timer_name)
	if timer_name==nil then return end
	if _G[timer_name] then
		xr_s.unregister_callback("update", _G[timer_name])
		_G[timer_name] = nil
	end
end

_G['shiftCheckDropItem'] = function()
	_G['biznes_remove_special_item']= true
	start_small_timer(300,
		function() _G['biznes_remove_special_item'] = nil end
	)
end

_G['del_ai_flag'] = function( obj )
	if obj == nil then return end
	local data = naxac_netpk.get( obj )
	data.object_flags = bit_and( data.object_flags, bit_not(128) )
	naxac_netpk.set( obj, data )
end

--log1("loading done")