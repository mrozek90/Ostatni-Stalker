-----------------------------------------------------------------------------------
-- Monster binding
-----------------------------------------------------------------------------------

local table_enemy_cont = {}
local rand = math.random(1,15)
local BurerNum
local BurerTimer = 0
local oDirActor = false
local oNextAttack = 0
local oRestoreActor = 0

function bind(obj)
	printf("_bp: monster.bind: name='%s', id='%d'", obj:name(), obj:id())

	-- Для спауна
	--xr_spawner.spawn_client(obj)

	local new_binder = generic_object_binder(obj)
	obj:bind_object(new_binder)
end

------------------------------------------------------------------------------------
class "generic_object_binder" (object_binder)

function generic_object_binder:__init(obj) super(obj)
	self.loaded = false
	self.start_anim_hit_cont = false
	self.start_anim_hit_blood = false
	self.start_hit = false
end 

function generic_object_binder:reload(section)
	object_binder.reload(self, section)
end

function generic_object_binder:reinit()
	object_binder.reinit(self)

	-- У торговца нет поддержки перемещения
	if self.object:clsid() ~= clsid.script_trader then
		self.object:set_patrol_extrapolate_callback(generic_object_binder.extrapolate_callback, self)
	end

	db.storage[self.object:id()] = { }

	self.st = db.storage[self.object:id()]
	self.timer = 0
	self.object:set_callback(callback.patrol_path_in_point, self.waypoint_callback, self)
	self.object:set_callback(callback.hit,					self.hit_callback,		self)
	self.object:set_callback(callback.death,				self.death_callback,	self)
end

function generic_object_binder:update(delta)
	object_binder.update(self, delta)

--	printf("_bp: generic_object_binder: UPDATE [name='%s' time=%d]",
--		self.object:name(), time_global())

	-- Апдейт торговли
	if self.object:clsid() == clsid.script_trader then
		trade_manager.update(self.object)
	end
	self.time = time_global()
	if self.object:alive() then
		if self.object:is_talk_enabled() then
			self.object:set_tip_text("character_use")
		else
			self.object:set_tip_text("")
		end
		
		-- Удар контролёра руками из Зова Припяти (Автор: demover123)
		if self.object:clsid() == clsid.controller_s then
			local target = self.object:get_enemy()
			if target and self.object:see(target) and (IsStalker(target) or IsMonster(target)) then
				if not self.get_hit then
					self.get_hit = time_global() + 100
					self.start_anim_hit_cont = true
				elseif self.get_hit <= time_global() then
					local dist = self.object:position():distance_to(target:position())
					if dist <= 1.7 then
						if self.start_anim_hit_cont then
							if self.object:animation_count() > 0 then
								self.object:clear_animations()
							end
							self.object:add_animation("stand_walk_fwd_"..math.random(0,1), true)
							self.object:play_cycle("stand_attack_1", true)							
							
							local song_start = xr_sound.get_safe_sound_object("monsters\\controller\\controller_hit_2")
							song_start:play_at_pos(self.object, self.object:position(), sound_object.s3d)
							self.start_anim_hit_cont = false
						end
						if not self.hit_to_enemy then
							self.hit_to_enemy = time_global() + 300
						elseif self.hit_to_enemy <= time_global() then
							level.add_cam_effector("camera_effects\\hit_back_left.anm", 777, false, "")
							
							local h = hit()
							h.draftsman = self.object
							h.direction = vector():set(0,0,0)  
							h:bone("bip01_spine")   
							h.power     = 0.40     
							h.impulse   = 1
							h.type      = hit.wound
							target:hit(h)
							
							self.hit_to_enemy = nil
							self.get_hit = nil
						end
					end
				end
			end
			if self.object:animation_count() < 1 then
				local i = math.random(0,5)
				self.object:add_animation("stand_walk_fwd_"..i, true)
			end
		end
		
-- Поцелуй кровососа (Авторы: джЭдай, Artos, АнархОпанК; Тотальная переработка: Charsi, Shadows)
        if self.object:clsid()==clsid.bloodsucker_s then
            local oTarget = self.object:get_enemy()
            if oTarget and IsStalker(oTarget) and self.object:see(oTarget) then
                local iDist = self.object:position():distance_to(oTarget:position())
                if iDist <= 3 then
                    local iTime = time_global()
		if (self.timer_anim or 0) < iTime then
                        self.timer_anim = iTime + 2000
                        if oTarget:id()~=0 and self.object:position():distance_to(db.actor:position()) < 5 then
                            sound_object("monsters\\bloodsucker\\vampire_sucking"):play_at_pos(db.actor,vector():set(0,0,1),0,sound_object.s2d)
                        end
                        if oTarget:id()==0 then
                            if oNextAttack < iTime and self.object.health < 0.5 then
                                oNextAttack = iTime + 18000
                                oRestoreActor = iTime + 4500
                                oDirActor = true
                                db.actor:hide_weapon()
                                level.disable_input()
                                level.hide_indicators()
                                level.add_call(bloodsucker_vampire_timer,bloodsucker_actor_release)
                                level.add_pp_effector("escape.ppe",1975,true)
                                level.add_cam_effector("camera_effects\\drunk.anm",1978,false,"")
                                local oSnd = sound_object("monsters\\bloodsucker\\vampire_sucking")
                                if not (oSnd and oSnd:playing()) then oSnd:play_no_feedback(oTarget,sound_object.s2d,0,vector(),5.0) end
                            end
                            if oDirActor then
                                local pos = self.object:position()
                                local vDir = pos:sub(oTarget:position())
                                db.actor:set_actor_direction(-vDir:getH())
                                vDir:normalize()
                                local pos = self.object:position():sub(vDir)
                                db.actor:set_actor_position(pos)
                            end
                        end
                    end
                    if self.timer_anim and self.timer_anim >= iTime and oDirActor then
                        db.actor.health = -0.002
                        self.object.health = 0.008
                    end
                end
            end
        end
-- ==================================================================
		
		-- Атака бюрера из Зова Припяти (Авторы: Shadows and Charsi and demover123)
		if self.object:clsid()==clsid.burer_s and BurerTimer < time_global() then
			local target = self.object:get_enemy()
			local v1 = self.object:direction()
			local v2 = db.actor:direction()
			if target and (target:id()==0) and (v1.x*v2.x)+(v1.z*v2.z)<-0.6 and self.object:see(db.actor) and self.object:position():distance_to(db.actor:position())<6 then
				BurerNum = 1
				db.actor.power = -1.0
				local active_slot = db.actor:active_slot()
				if active_slot==1 or active_slot==2 then
					db.actor:drop_item(db.actor:active_item())
					self.object:play_cycle("stand_attack_0", false)
				end
				BurerTimer = time_global() + 6000*(1+math.random(-0.2,0.2))
				self.object:add_animation("stand_idle_"..math.random(0,2), true)
			elseif BurerNum and BurerTimer < time_global() + 6000 then
				self.object:add_animation("stand_idle_"..math.random(0,2), true)
				BurerNum = nil
			end
		end
		
		-- Химера ищет жертву стоя на задних лапах идея была взята из одного квеста в Зове Припяти (Автор: demover123)
		if self.object:clsid()==clsid.chimera_s then
			local target = self.object:get_enemy()
			if target and not self.object:see(target) and IsStalker(target) then
				local dist = self.object:position():distance_to(target:position())
				if dist < 10 then
					if not self.find then
						self.object:play_cycle("look_around_0", false)
						if not self.time_to_next_find then
							self.time_to_next_find = time_global() + 4000
						end
						self.find = true
					else
						if self.time_to_next_find <= time_global() then
							self.find = false
							self.time_to_next_find = nil
						end
					end
				end
			end
		end
	else
		self.object:set_tip_text_default()
	end

	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
	end
end

-- ==================================================================
function bloodsucker_vampire_timer()
    return time_global() > oRestoreActor
end

function bloodsucker_actor_release()
    oDirActor = false
    db.actor:restore_weapon()
    level.enable_input()
    level.show_indicators()
    level.remove_pp_effector(1975)
    level.remove_cam_effector(1978)
  play_sound([[monsters\bloodsucker\vampire_hit]])
end

-- функция для воспроизведения звука
function play_sound(sound,obj)
	if obj == nil then obj = db.actor end
	snd = xr_sound.get_safe_sound_object(sound)
	snd:play_no_feedback(obj,sound_object.s2d,0,vector(),1.0)
end
-- ==================================================================

function generic_object_binder:extrapolate_callback()
	local cur_pt = self.object:get_current_point_index()

    if self.object:get_script ()	== false then 
       return false
    end    
    
	if patrol(self.object:patrol()):flags(cur_pt):get() == 0 then
		--printf("_bp: generic_object_binder: extrapolate_callback: cur_pt = %d: true", cur_pt)
		return true
	end
	--printf("_bp: generic_object_binder: extrapolate_callback: cur_pt = %d: false", cur_pt)
	return false
end

function generic_object_binder:waypoint_callback(obj, action_type, index)
	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "waypoint_callback", obj, action_type, index)
	end
end

function generic_object_binder:death_callback(victim, who)
	if who:id() == db.actor:id() then
		xr_statistic.addKillCount(self.object)
	end

	if self.st.mob_death then
		xr_logic.issue_event(self.object, self.st.mob_death, "death_callback", victim, who)
	end

	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who)
	end

	smart_terrain.on_death( self.object:id() )

	--' Наносим небольшой импульс вперед.
	local h = hit()
	h.draftsman = self.object
	h.type = hit.fire_wound
	h.direction = db.actor:position():sub(self.object:position())
	h:bone("pelvis")
	h.power = 1
	h.impulse = 10
	self.object:hit(h)

end

function generic_object_binder:hit_callback(obj, amount, local_direction, who, bone_index)
--	printf("HIT_CALLBACK: [%s] amount[%s]", obj:name(), amount)
	if self.st.hit then
		xr_logic.issue_event(self.object, self.st.hit, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	
	-- Щит бюрера из Зова Припяти (Автор: demover123)
	if self.object:clsid()==clsid.burer_s then
		if not self.time_hit then
			self.time_hit = time_global() + 4000
		end
		
		self.object:play_cycle("stand_tele_1", false)
		local particle_start = particles_object("anomaly2\\burer_shield_01")
		particle_start:play_at_pos(self.object:bone_position("bip01_head"))
		self.object.health = self.object.health + 0.1
		
		if self.time_hit <= time_global() then
			if self.object:animation_count() > 0 then
				self.object:clear_animations()
				particle_start:stop()
			end
		end
	end
end

function generic_object_binder:net_spawn(sobject)
	if not object_binder.net_spawn(self, sobject) then
		return false
	end

	db.add_obj(self.object)

	xr_gulag.setup_gulag_and_logic_on_spawn( self.object, self.st, sobject, modules.stype_mobile, self.loaded )

	return true
end

function generic_object_binder:net_destroy()
	self.object:set_callback(callback.death,				nil)
	self.object:set_callback(callback.patrol_path_in_point, nil)
	self.object:set_callback(callback.hit,					nil)

	local st = db.storage[self.object:id()]
	if st and st.active_scheme then
		xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy")
	end
	
	db.del_obj(self.object)
	db.storage[self.object:id()] = nil

	object_binder.net_destroy(self)
end 

function generic_object_binder:reload(section)
	object_binder.reload(self, section)
	--printf("generic_object_binder:reload(): self.object:name()='%s'", self.object:name())
end

function generic_object_binder:net_save_relevant()
	--printf("generic_object_binder:net_save_relevant(): self.object:name()='%s'", self.object:name())
	return true
end

function generic_object_binder:save(packet)
	printf("generic_object_binder:save(): self.object:name()='%s'", self.object:name())
	set_save_marker(packet, "save", false, "generic_object_binder")
	object_binder.save(self, packet)

	xr_logic.save_obj(self.object, packet)
	if self.object:clsid() == clsid.script_trader then
		trade_manager.save(self.object, packet)
	end
	set_save_marker(packet, "save", true, "generic_object_binder")
end

function generic_object_binder:load(reader)
	self.loaded = true
	set_save_marker(reader, "load", false, "generic_object_binder")
	printf("generic_object_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load(self, reader)

	if reader:r_eof() then
		abort("SAVE FILE IS CORRUPT")
	end

	xr_logic.load_obj(self.object, reader)
	if self.object:clsid() == clsid.script_trader then
		trade_manager.load(self.object, reader)
	end
	set_save_marker(reader, "load", true, "generic_object_binder")
end

function generic_object_binder:effector(timeout, dist, func)
	if self.timer < self.time then
		self.timer = self.time+timeout*math.random(80,120)/100
		if self.see_actor and
			self.distance_to_actor < dist and
			self.object:get_enemy() and self.object:get_enemy():id() == 0 
		then
			func()
		end
	end
end

-- Хит по актору
function generic_object_binder:hit(type, power, impulse, direction)
	local h = hit()
	h.type = type
	h.power = power
	h.impulse = impulse
	h:bone("bip01_spine") -- чтобы учитывалась броня
	h.draftsman = self.object 
	h.direction = direction or self.object:direction()
	db.actor:hit(h) 
end
