--[[ -----------------------------------------------------------------------------------------------
 File           : use_key.script
 Description    : Горячие клавиши
 Author         : Charsi
 Last edit      : 27.08.2013 by marafonec 
--]] -----------------------------------------------------------------------------------------------

local con = nil 
local con_command = "mm_net_player_name" 
local def_value = "_"
local actor
belt_artefacts		= {}

function update()
	if not con then 
		con = get_console() 
		con:execute( con_command .." ".. def_value ) 
		for k,v in pairs(_G[script_name()]) do 
			if type(v)=='function' and DIK_keys[string.upper(k)] then
				local key = "k"..string.gsub(k,"dik_","") 
				con:execute("bind_console "..con_command.." "..k.." "..key)
			end
		end
	else

		local str = con:get_string(con_command) 
		if str~=def_value and this[str] then
			this[str]()
			con:execute(con_command.." "..def_value)
		end
	end

end

-------------------------------------
-- Быстрое использование предметов --
-------------------------------------
-- 'F1' - Слот быстрого использования №1
function dik_f1()
actor = db.actor
  local section = dmx_fast_use_slots.GetItemInFastSlot1()
	if section then
		local it = db.actor:object(section)
		if it and it ~= nil then
		this.hud_msg("cant_walk", "использовано: "..game.translate_string(system_ini():r_string(it:section(), "inv_name")))
		actor:eat(it)
		end
	end
end




-- 'F2' - Слот быстрого использования №2 
function dik_f2()
actor = db.actor
  local section = dmx_fast_use_slots.GetItemInFastSlot2()
	if section then
		local it = db.actor:object(section)
		if it and it ~= nil then
		this.hud_msg("cant_walk", "использовано: "..game.translate_string(system_ini():r_string(it:section(), "inv_name")))
		actor:eat(it)
		end
	end
end

-- 'F3' - Слот быстрого использования №3
function dik_f3()
actor = db.actor
  local section = dmx_fast_use_slots.GetItemInFastSlot3()
	if section then
		local it = db.actor:object(section)
		if it and it ~= nil then
		this.hud_msg("cant_walk", "использовано: "..game.translate_string(system_ini():r_string(it:section(), "inv_name")))
		actor:eat(it)
		end
	end
end

-- 'F4' - Слот быстрого использования №4
function dik_f4()
actor = db.actor
  local section = dmx_fast_use_slots.GetItemInFastSlot4()
	if section then
		local it = db.actor:object(section)
		if it and it ~= nil then
		this.hud_msg("cant_walk", "использовано: "..game.translate_string(system_ini():r_string(it:section(), "inv_name")))
		actor:eat(it)
		end
	end
end

function hud_msg(xml, txt)
	local hud = get_hud()
	hud:AddCustomStatic(xml, true)
	local wnd = hud:GetCustomStatic(xml):wnd()
	wnd:SetText(txt)
	wnd:SetTextY(70)
end


--[[ -----------------------------------------------------------------------------------------------
 Description    : Cмена метательных ножей
 Last edit      : 10.01.2016 marafonec. 
---------------------------------------------------------------------------------------------------]]

local knifes = {"wpn_knife_d", "wpn_knife_bak", "wpn_knife_map", "wpn_knife_tanto", "wpn_knife"}

function drop_knifes(obj)
local a = db.actor

-- ================== Выбросили нож ========================
	-- определяем, что выбросили именно метательный нож
	if obj and string.sub(obj:section(),1,6) == "wpn_kn" and obj:section() ~= "wpn_knife" then
	local obj_a = ""
	local obj_k,pos,lv,gv
		-- сопоставили ножи их зарядам
		if obj:section()     == "wpn_knife_map" then obj_a = "ammo_knife_map"
		elseif obj:section() == "wpn_knife_tanto" then obj_a = "ammo_knife_tanto"
		elseif obj:section() == "wpn_knife_bak" then obj_a = "ammo_knife_bak"
		elseif obj:section() == "wpn_knife_d" then obj_a = "ammo_knife"
		elseif obj:section() == "wpn_knife" then obj_a = ""
		end

	for a=1,65535,1 do
		obj_k=alife():object(a)
		-- если нож находится не у актора - на земле, и никому не принадлежит, ... то 
		if obj_k and obj_k:section_name() ~= "wpn_knife" and obj_k:section_name() == obj:section() and obj_k.parent_id == 65535 then

		-- ... определяем его позицию на локации и...
			pos = obj_k.position
			lv = obj_k.m_level_vertex_id
			gv = obj_k.m_game_vertex_id
		-- ... удаляем сам нож, а на его место спавним его патроны
			alife():release(obj_k,true)
			alife():create(obj_a,pos,lv,gv)
		end
	end
	
	-- пробегаемся по инвентарю актора, подсчитываем доступные заряды
	local cnt = db.actor:object_count()
	local cnt_ammo = 0
    			for i=0, cnt-1 do
        			local item = db.actor:object(i)
				-- считаем заряды к ножу 
        			if item:section() == obj_a then
					cnt_ammo=cnt_ammo+1
				end
    			end 

			-- если находим больше одного заряда, то пробегаемся по инвентарю актора
			if cnt_ammo > 1 then 
			    for i=0, cnt-1 do
        			local item = db.actor:object(i)
				-- если находим заряды к ножу - удаляем 1 заряд и снова спавним нож
        			if item:section() == obj_a then
					local sobj = alife():object(item:id())
					local sobj_1 = obj:section()
            				if sobj then 
                			     alife():release(sobj,true)
					     alife():create(sobj_1, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
                			     break 
					end 
        			end
    			    end
			-- если находим только один заряд, то пробегаемся по инвентарю актора
			else 
				for i=0, cnt-1 do
        				local item = db.actor:object(i)	
					local item_1 = db.actor:object(i)	
					-- если находим заряд к ножу - удаляем и заряд и, если находим - и сам нож
					if item:section() == obj_a then
						local inf_k = obj:section()
						local inf = string.gsub (inf_k, "wpn_", "has_")
						db.actor:disable_info_portion(inf)	
						local sobj = alife():object(item:id())	
						local sobj = alife():object(item:id())	
						local sobj = alife():object(item:id())	
						local sobj = alife():object(item:id())	
						local sobj = alife():object(item:id())	
						local sobj = alife():object(item:id())	
						local sobj = alife():object(item:id())	
						if sobj then 
                			     		alife():release(sobj,true)
                			     	end 
        				end
					if item_1:section() == obj:section() then
						local sobj = alife():object(item_1:id())	
						if sobj then 
                			     		alife():release(sobj,true)
                			     	end 
        				end
				end 
			end

	this.knifes_rotation()
	end

-- ================== Выбросили заряды к ножам ========================
-- определяем, что выбросили именно заряд

	if obj and obj:section() == "ammo_knife" then
	local weapon = db.actor:object("wpn_knife_d")
	local ammo = db.actor:object("ammo_knife")
	if weapon and ammo == nil then
		local cnt = db.actor:object_count()
    		for i=0, cnt-1 do
        		local item = db.actor:object(i)
        			if item:section() == "wpn_knife_d" then
            				local sobj = alife():object(item:id())
            				if sobj then 
                				alife():release(sobj,true)
                			 end 
        			end
    		end
		db.actor:disable_info_portion("has_knife_d")
	end

	elseif obj and obj:section() == "ammo_knife_bak" then
	local weapon = db.actor:object("wpn_knife_bak")
	local ammo = db.actor:object("ammo_knife_bak")
	if weapon and ammo == nil then
		local cnt = db.actor:object_count()
    		for i=0, cnt-1 do
        		local item = db.actor:object(i)
        			if item:section() == "wpn_knife_bak" then
            				local sobj = alife():object(item:id())
            				if sobj then 
                				alife():release(sobj,true)
                			 end 
        			end
    		end
		db.actor:disable_info_portion("has_knife_bak")
	end

	elseif obj and obj:section() == "ammo_knife_tanto" then
	local weapon = db.actor:object("wpn_knife_tanto")
	local ammo = db.actor:object("ammo_knife_tanto")
	if weapon and ammo == nil then
		local cnt = db.actor:object_count()
    		for i=0, cnt-1 do
        		local item = db.actor:object(i)
        			if item:section() == "wpn_knife_tanto" then
            				local sobj = alife():object(item:id())
            				if sobj then 
                				alife():release(sobj,true)
                			 end 
        			end
    		end
		db.actor:disable_info_portion("has_knife_tanto")
	end
	
	elseif obj and obj:section() == "ammo_knife_map" then

	local weapon = db.actor:object("wpn_knife_map")
	local ammo = db.actor:object("ammo_knife_map")
	if weapon and ammo == nil then
		local cnt = db.actor:object_count()
    		for i=0, cnt-1 do
        		local item = db.actor:object(i)
        			if item:section() == "wpn_knife_map" then
            				local sobj = alife():object(item:id())
            				if sobj then 
                				alife():release(sobj,true)
                			 end 
        			end
    		end
		db.actor:disable_info_portion("has_knife_map")
	end
	end

	if a:active_slot() == 0 then
	local itm = a:item_in_slot(0)
		if itm ~= nil then
			return
		else
		this.knifes_rotation()
		end
	end
end

function knifes_rotation()
  	local a = db.actor
--log1(a:active_slot())
if a:active_item() == nil then
		local itm = a:item_in_slot(0)
		local gr
		if itm ~= nil then return end
		if itm == nil then
			for k,v in pairs(knifes) do
				gr = a:object(v)
				if gr then a:move_to_slot_and_activate(gr) break end
			end
			return
		end
		
		local sect = itm:section()
		local n = #knifes
		local pos = 0
		
		for i=1,n do
			if knifes[i]==sect then
				pos = i
				break
			end
		end
		
		for i=1,n do
			pos = pos + 1
			if pos>n then pos = 1 end
			gr = a:object(knifes[pos])
			if gr and knifes[pos]~=sect then
				a:move_to_ruck(itm)
				a:move_to_slot_and_activate(gr)
				break
			end
		end
	end
end


--[[ -----------------------------------------------------------------------------------------------
 Description    : Новые возможности - слоты, рюкзак, пояс
 Last edit      : 
---------------------------------------------------------------------------------------------------]]

function item_to_belt(obj)
	if obj == nil or alife():object(obj:id()) == nil then 
		return 
	end

	local def_max_weight, def_max_walk_weight, old_max_weight, old_max_walk_weight, new_max_weight, new_max_walk_weight 
	
	if obj:is_artefact() then
		belt_artefacts[obj:name()] = obj:section()
		def_max_weight = system_ini():r_float("inventory", "max_weight")
		def_max_walk_weight = system_ini():r_float("actor_condition", "max_walk_weight")
		old_max_weight = db.actor:get_actor_max_weight()
		old_max_walk_weight = db.actor:get_actor_max_walk_weight()
		koef_weight = system_ini():r_float(obj:section(),"additional_weight")
		new_max_weight = math.max (def_max_weight, old_max_weight + koef_weight)
		new_max_walk_weight = math.max (def_max_walk_weight, old_max_walk_weight + koef_weight)
		db.actor:set_actor_max_weight(new_max_weight)
 		db.actor:set_actor_max_walk_weight(new_max_walk_weight)
	end
end

function item_to_ruck(obj)
	if obj == nil or alife():object(obj:id()) == nil then 
		return 
	end

	if string.find(obj:section(), "tank_outfit") then
		get_console():execute("g_god ".."off")
	end

	local def_max_weight, def_max_walk_weight, old_max_weight, old_max_walk_weight, new_max_weight, new_max_walk_weight 
	
	if string.find(obj:section(), "af_") then
		for k,v in pairs(belt_artefacts) do
			if k == obj:name() then
				belt_artefacts[k] = nil
				def_max_weight = system_ini():r_float("inventory", "max_weight")
				def_max_walk_weight = system_ini():r_float("actor_condition", "max_walk_weight")
				old_max_weight = db.actor:get_actor_max_weight()
				old_max_walk_weight = db.actor:get_actor_max_walk_weight()
				koef_weight = system_ini():r_float(obj:section(),"additional_weight")
				new_max_weight = math.max (def_max_weight, old_max_weight - koef_weight)
				new_max_walk_weight = math.max (def_max_walk_weight, old_max_walk_weight - koef_weight)
				db.actor:set_actor_max_weight(new_max_weight)
 				db.actor:set_actor_max_walk_weight(new_max_walk_weight)
			end
		end
	end

--log1("~ В рюкзак")

end

function item_to_slot(obj)
if obj == nil or alife():object(obj:id()) == nil then 
		return 
	end

	if string.find(obj:section(), "tank_outfit") then
		get_console():execute("g_god ".."on")
	end

end

function item_drop (obj)
	if obj == nil or alife():object(obj:id()) == nil then 
		return 
	end
	if string.find(obj:section(), "tank_outfit") then
		get_console():execute("g_god ".."off")
	end

	local def_max_weight, def_max_walk_weight, old_max_weight, old_max_walk_weight, new_max_weight, new_max_walk_weight 

	if string.find(obj:section(), "af_") then
		for k,v in pairs(belt_artefacts) do
			if obj:name() == k then
				belt_artefacts[k] = nil
				def_max_weight = system_ini():r_float("inventory", "max_weight")
				def_max_walk_weight = system_ini():r_float("actor_condition", "max_walk_weight")
				old_max_weight = db.actor:get_actor_max_weight()
				old_max_walk_weight = db.actor:get_actor_max_walk_weight()
				koef_weight = system_ini():r_float(obj:section(),"additional_weight")
				new_max_weight = math.max (def_max_weight, old_max_weight - koef_weight)
				new_max_walk_weight = math.max (def_max_walk_weight, old_max_walk_weight - koef_weight)
				db.actor:set_actor_max_weight(new_max_weight)
 				db.actor:set_actor_max_walk_weight(new_max_walk_weight)
			end
		end
	end

--log1("! выбросил")
end
