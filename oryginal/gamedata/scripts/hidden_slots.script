---------------------[[Скриптовая эмуляция невидимых слотов]]--------------------------------
-- Автор: Charsi
-- Дата: 15/11/2010 - 30/03/2011
-- Спасибо: Malandrinus, Erlik
-- Last update: Shadows - корректировка и доработка скрипта для билдовского назначения
---------------------------------------------------------------------------------------------
local rec_wnd      = nil
local initial      = false
local TBtn         = {}
local slots        = {{90,44},{885,42},{739,40}}
local sleep_static = 0

class "BkgrWnd" (CUIScriptWnd)
function BkgrWnd:__init(owner) super()
    self.sleep_time = 0
    self.owner = owner
    self:Init(0,0,1024,768)
--    self.ClickBtn = {}
	self.ClickBtnSleep = function() 
	    if self.sleep_time ~= 0 then
			local open_menu = true
            for k,v in pairs(db.storage) do
                local stalker = level.object_by_id(k)
                if stalker and (get_clsid(stalker)==clsid.script_stalker) and stalker:alive() and stalker:relation(db.actor)==game_object.enemy then
				    if stalker:position():distance_to(db.actor:position()) < 45 then
                        open_menu = false break
					end
                end
            end
            if open_menu then
                level.start_stop_menu(sleep_dialog(self.sleep_time),true)
            else
			    inventory_close()
				get_hud():AddCustomStatic("cant_sleep_near_enemies")
				sleep_static = time_global() + 5000
            end
		end 
	end

    self:InitControls()
	
end

function BkgrWnd:__finalize() end
function BkgrWnd:InitControls()
    clear_table(TBtn)
    self.bkgr_static=CUIStatic()
    self.bkgr_static:Init("ui\\ui_disk_io",10,0,1024,100)
    self.bkgr_static:SetStretchTexture(true)
    self.bkgr_static:SetOriginalRect(0,0,1024,100)
    self.owner:AttachChild(self.bkgr_static)
    self.stat = CUIStatic()
    self.stat:Init(0, 0, 1024, 768)
    self.owner:AttachChild(self.stat) 
	local ctrl = false
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_shadows_addon.xml")
	-- кнопка сброса
	ctrl = xml:Init3tButton("btn_drop_item",self.stat)
	self:Register(ctrl,"btn_drop_item")
	self:AddCallback("btn_drop_item",ui_events.BUTTON_CLICKED,self.DropItem,self)
	-- кнопки быстрых слотов -- fast use slots
	self.fast_use_slots_wnd = dmx_fast_use_slots.FastUseSlotsWnd(self)
	self.stat:AttachChild(self.fast_use_slots_wnd)
	-- кнопка сна
	ctrl = xml:Init3tButton("btn_sleep",self.stat)
	if device().width/device().height==5/4 then ctrl:SetTextX(-2)
	elseif device().width/device().height==16/10 or device().width/device().height==16/9 then ctrl:SetTextX(15) end
	self:Register(ctrl,"btn_sleep")
	self:AddCallback("btn_sleep",ui_events.BUTTON_CLICKED,self.ClickBtnSleep,self)
    -- минус
    self.btn_p = CUIButton()
    self.btn_p:SetAutoDelete(false)
    self.btn_p:SetWindowName("btn_p")
    self.btn_p:SetText("+")
    self.btn_p:Init(465,679,30,30)
    self.btn_p:SetTextColor(255,238,155,23)
    self.btn_p:SetFont(GetFontGraffiti32Russian())
    self.btn_p:SetTextAlign(CGameFont.alCenter)
    self:Register(self.btn_p)
    self.stat:AttachChild(self.btn_p)  
    self:AddCallback("btn_p",ui_events.BUTTON_CLICKED,self.ClickBtnPlus,self)
    -- плюс
    self.btn_m = CUIButton()
    self.btn_m:SetAutoDelete(false)
    self.btn_m:SetWindowName("btn_m")
    self.btn_m:SetText("-")
    self.btn_m:Init(372,679,30,30)
    self.btn_m:SetTextColor(255,238,155,23)
    self.btn_m:SetFont(GetFontGraffiti32Russian())
    self.btn_m:SetTextAlign(CGameFont.alCenter)
    self:Register(self.btn_m)
    self.stat:AttachChild(self.btn_m)  
    self:AddCallback("btn_m",ui_events.BUTTON_CLICKED,self.ClickBtnMinus,self)
    -- таймер
    self.btn_timer = CUIStatic()
    self.btn_timer:SetText("00:00")
    self.btn_timer:Init(429,686,20,20)
    self.btn_timer:SetTextColor(255,240,217,182)
    self.btn_timer:SetFont(GetFontLetterica18Russian())
    self.btn_timer:SetTextAlign(CGameFont.alCenter)
    self.stat:AttachChild(self.btn_timer)
    initial = true
end

function BkgrWnd:DropItem()
	local snd_obj_1 = xr_sound.get_safe_sound_object( [[script_replics\radio\message\radio_noise_1]] )
	local snd_obj_2 = xr_sound.get_safe_sound_object( [[script_replics\radio\message\radio_noise_2]] )
	local snd_obj_3 = xr_sound.get_safe_sound_object( [[script_replics\radio\message\radio_voice_1]] )
	local snd_obj_4 = xr_sound.get_safe_sound_object( [[script_replics\radio\message\radio_voice_2]] )
	local snd_obj_5 = xr_sound.get_safe_sound_object( [[script_replics\radio\message\radio_voice_3]] )
	local snd_obj_6 = xr_sound.get_safe_sound_object( [[script_replics\radio\message\radio_turn_on_1]] )
	
	if 
	xr_conditions.has_scaner() then
	
		if	has_alife_info("signal_for_shamray_start") and
			not has_alife_info("signal_for_shamray_done") then
			db.actor:give_info_portion("signal_for_shamray_1")
			db.actor:give_info_portion("signal_for_shamray_done")
			snd_obj_6:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		end
		
		if	(level.name() == "marsh") and
			not has_alife_info("marsh_has_good_radio") then
			als_messages.from_system_4()
			db.actor:give_info_portion("marsh_know_about_broken_scaner")
			snd_obj_6:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		end
		
		if	has_alife_info("fight_on_bogs1_start") and
			has_alife_info("marsh_has_good_radio") and
			not has_alife_info("fight_on_bogs1_1") then
			db.actor:give_info_portion("fight_on_bogs1_1")
			snd_obj_6:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		end
		
		if	has_alife_info("fight_on_bogs2_start") and
			has_alife_info("marsh_has_good_radio") and
			not has_alife_info("fight_on_bogs2_1") then
			db.actor:give_info_portion("fight_on_bogs2_1")
			snd_obj_6:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		end
		
		if	has_alife_info("fight_on_bogs1_1") and
			has_alife_info("fight_on_bogs1_2") and
			has_alife_info("fight_on_bogs1_3") and
			has_alife_info("fight_on_bogs1_4") and
			has_alife_info("marsh_has_good_radio") and
			not has_alife_info("zaglushka_59") then
			xr_effects.marsh_grek_radio()
			db.actor:give_info_portion("zaglushka_59")
			snd_obj_6:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		end
		
		if	has_alife_info("fight_on_bogs2_1") and
			has_alife_info("fight_on_bogs2_2") and
			has_alife_info("marsh_has_good_radio") and
			not has_alife_info("zaglushka_61") then
			xr_effects.marsh_grek_radio()
			db.actor:give_info_portion("zaglushka_61")
			snd_obj_6:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		end
		
		if	has_alife_info("fight_on_bogs3_1") and
			has_alife_info("fight_on_bogs3_2") and
			has_alife_info("marsh_has_good_radio") and
			not has_alife_info("zaglushka_60") then
			xr_effects.marsh_grek_radio()
			db.actor:give_info_portion("zaglushka_60")
			snd_obj_6:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		end
		
		if	has_alife_info("container_number_two_2") and
			not has_alife_info("zaglushka_190") then
			xr_effects.gar_radio_1()
			db.actor:give_info_portion("zaglushka_190")
			snd_obj_6:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		end
		
		if	has_alife_info("foolish_plan_3") and
			not has_alife_info("zaglushka_198") then
			xr_effects.gar_radio_3()
			db.actor:give_info_portion("zaglushka_198")
			snd_obj_6:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		end
		
		if	has_alife_info("gate_in_the_zone_1") and
			not has_alife_info("player_complete_gate_in_the_zone") then
			db.actor:give_info_portion("gate_in_the_zone_2")
			db.actor:give_info_portion("esc_dolg_regrouping_gate")
			db.actor:give_info_portion("player_complete_gate_in_the_zone")
			snd_obj_6:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		end
		
		if
		-- inventory.check_radioscaner() and
		(level.name() == "garbage_first") then
		snd_obj_4:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		end
		
	end	
end

function BkgrWnd:ClickBtnPlus()
    self.sleep_time = self.sleep_time + 0.5
    if self.sleep_time > 9 then self.sleep_time = 9 end
    self:SetTimerText()
end

function BkgrWnd:ClickBtnMinus()
    self.sleep_time = self.sleep_time - 0.5
    if self.sleep_time < 0 then self.sleep_time = 0 end
    self:SetTimerText()
end

function BkgrWnd:SetTimerText()
    local h = math.floor(self.sleep_time)
    self.btn_timer:SetText((h < 10 and "0" or "")..h..(h == self.sleep_time and ":00" or ":30"))
end

-- инициализация с учетом размеров иконки статика
function init_btn(num,sec)
    local function sections(num)
        -- if num==1 then
	        -- local item = db.actor:item_in_slot(0)
	        -- if item then return "wpn_knife" else return end
        -- elseif 
		-- num==2 then
	        -- local item = db.actor:item_in_slot(4)
	        -- if item then return "wpn_binoc" else return end
        -- elseif num==3 then
	        -- local item = db.actor:item_in_slot(9)
	        -- if item then return "device_torch" else return end
        -- end
    end
    local btn=TBtn["check_button_"..num]
    local sect = sec or sections(num)
    if sect then
	    local ini=system_ini()
	    local x=ini:r_u32(sect, "inv_grid_x")*50
 	    local y=ini:r_u32(sect, "inv_grid_y")*50
	    local width=ini:r_u32(sect, "inv_grid_width")*50
 	    local height=ini:r_u32(sect, "inv_grid_height")*50
	    btn:InitTexture("ui\\ui_icon_equipment")
	    btn:SetOriginalRect(x,y,width,height)
	    btn:Init(slots[num][1]-width/2,slots[num][2]-height/2,width,height)
	    btn:Show(true)
    else
	    btn:Init(slots[num][1],slots[num][2],0,0)
    end
end

function BkgrWnd:ShowWnd()
    if initial and rec_wnd.stat~= nil then rec_wnd.stat:Show(true) end
end 

function BkgrWnd:HideWnd()
    if initial and rec_wnd.stat~= nil then rec_wnd.stat:Show(false) end
end 

function BkgrWnd:DetachWnd()
	self.owner:DetachChild(self.stat) initial = false
end

function spawn_item_in_inv(sect)
	alife():create(sect,db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),0)
end

function remove_item(id)
	if id then
		local sobj = alife():object(id)
		if sobj then alife():release(sobj,true) end
	end
end

local inv_window
function on_info(info_id)
	if info_id=="ui_inventory" then
	    inv_window = level.main_input_receiver()
        if not initial then	
            rec_wnd = BkgrWnd(level.main_input_receiver())
		end  
    	if not rec_wnd.stat:IsShown() then
			rec_wnd:ShowWnd()
		end 
	elseif info_id=="ui_inventory_hide" then
		if rec_wnd then
       	    rec_wnd:DetachWnd()
		end
 	end
end

function inventory_close()
    if inv_window and inv_window:IsShown() then
        level.start_stop_menu(inv_window,true)
    end
end

local id,sect
function on_item_drop(obj)
	sect = obj:section()
	if string.sub(sect,1,5)=="fake_" then id = obj:id() end
end

function update()
--[[	if id and not level.object_by_id(id) then
		on_eat(sect)
		id = nil
		sect = nil
	end]]
	
	if get_hud():GetCustomStatic("cant_sleep_near_enemies") ~= nil then 
	    if sleep_static < time_global() then get_hud():RemoveCustomStatic("cant_sleep_near_enemies") end
	end
	
end

class "sleep_dialog" (CUIScriptWnd)
function sleep_dialog:__init(time) super()
    self:Init(0,0,1024,768)
	self.sleep_time = time
	self.ClickBtnYes = function() sleep_manager.sleep_unlim(self.sleep_time) self:on_exit() inventory_close() end
	self.ClickBtnNo = function() self:on_exit() end
	local ctrl = false
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_shadows_addon.xml")
	-- фон
	self.back = xml:InitStatic("sleep_dialog_main",self)
	-- иконка
    xml:InitStatic("dialogs_yellow_icon",self.back)
	-- текст
    xml:InitStatic("sleep_dialog_text",self.back)
	-- кнопка Да
	ctrl = xml:Init3tButton("btn_ok",self.back)	
	self:Register(ctrl,"btn_ok")
	self:AddCallback("btn_ok",ui_events.BUTTON_CLICKED,self.ClickBtnYes,self)
	-- кнопка Нет
	ctrl = xml:Init3tButton("btn_no",self.back)	
	self:Register(ctrl,"btn_no")
	self:AddCallback("btn_no",ui_events.BUTTON_CLICKED,self.ClickBtnNo,self)
end

function sleep_dialog:on_exit() level.start_stop_menu(self,true) end
function sleep_dialog:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then 
	    if dik == DIK_keys.DIK_ESCAPE then self:on_exit() 
		elseif dik == DIK_keys.DIK_RETURN then sleep_manager.sleep_unlim(self.sleep_time) self:on_exit() inventory_close()
		end 
	end
	return true
end
