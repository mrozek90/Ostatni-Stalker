-----------------------------------------------------------------------
--- ogse_repair.script
--- Ремонт торговцами/механиками вещей
--- KamikaZze, OGS Evolution Team 2010, на основе ремкита Dusty79
--- version 1.0
-----------------------------------------------------------------------
--- Настройки ремонта
-----------------------------------------------------------------------
local profit_margin = 1.5		-- прибыль с ремонта, считается от себестоимости вещи
local price_multiplier = 0.85		-- множитель, на который умножается общая цена ремонта (для удобной регулировки цены)
local min_condition = 0.0		-- минимальное состояния для приема в ремонт
local max_condition = 0.99		-- максимальное состояния для приема в ремонт
local partial_repair = 0.33		-- размер прибавки состояния при частичном ремонте


-----------------------------------------------------------------------

local repaired_item = 0
local item_table = {}
local item_table_index = 0

function open_repair_dialog()

	local spwn = repair_dialog(get_hud())
	level.start_stop_menu(spwn,true)	

end


class "select_repair_items" (CUIListItemEx)


function select_repair_items:__init() super()
-- -- amk.logf("Начинаем инициализацию поля списка предметов")
	self.item_name		= "itemname"
	self:SetWndRect		(0,0,320,22)
	
	local ca = 255
	local cr = 216
	local cg = 186
	local cb = 140
	
	self.itmnum				= CUIStatic	()
	self.itmnum:SetAutoDelete	(true)
	self:AttachChild		(self.itmnum)
	self.itmnum:SetWndRect	(0,0,20,22)
	self.itmnum:SetText		("itemnum")
	self.itmnum:SetFont		(GetFontLetterica16Russian())
	self.itmnum:SetTextColor	(ca,cr,cg,cb)

	self.itmn					= CUIStatic	()
	self.itmn:SetAutoDelete	(true)
	self:AttachChild		(self.itmn)
	self.itmn:SetWndRect		(25,0,205,22)
	self.itmn:SetText			("itemname")
	self.itmn:SetFont			(GetFontLetterica18Russian())
	self.itmn:SetTextColor	(ca,cr,cg,cb)

	self.itmage				= CUIStatic	()
	self.itmage:SetAutoDelete	(true)
	self:AttachChild		(self.itmage)
	self.itmage:SetWndRect	(250,0,40,22)
	self.itmage:SetText		("itemage")
	self.itmage:SetFont		(GetFontLetterica16Russian())
	self.itmage:SetTextColor	(ca,cr,cg,cb)
-- -- amk.logf("Поле списка предметов инициализировано")
end


class "repair_dialog" (CUIScriptWnd)


function repair_dialog:__init() super()
	self:InitControls()
	self:InitCallBacks()
	self:FillList()
end

function repair_dialog:__finalize() end


function repair_dialog:InitControls()
-- -- amk.logf("Инициализируем управление формой")
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(50,50,550,450)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	local ctrl = false
	
	xml:ParseFile("ui_repair.xml")
	-- видео на заднем плане
	xml:InitStatic("back_video", self)
	-- рамка
	xml:InitStatic("background", self)

	-- рамка предмета
	xml:InitStatic("item_frame2", self)
	-- колба предмета
	xml:InitStatic("bar_frame2", self)
	-- список предметов
	xml:InitFrame("list_frame", self)

	ctrl = xml:InitList("list", self)
	ctrl:ShowSelectedItem(true)
	self:Register(ctrl, "list_window")

	-- кнопки
	self:Register(xml:Init3tButton("window_name", self),"window_name")
	
	
	self:Register(xml:Init3tButton("caption1", self),"caption1")
	self:Register(xml:Init3tButton("caption2", self),"caption2")
	self:Register(xml:Init3tButton("caption4", self),"caption4")
	
	self:Register(xml:Init3tButton("caption5", self),"caption4")
	self:Register(xml:Init3tButton("caption6", self),"caption4")
	self:Register(xml:Init3tButton("caption7", self),"caption4")		

	
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)	
	
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)	
	-- кнопка выхода
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box,"message_box")
-- -- amk.logf("Управление формой инициализировано")

	local money = db.actor:money()
	self:DrawMoney(money, 260, 63)
end


function repair_dialog:InitCallBacks()
-- -- amk.logf("Инициализируем коллбэки")
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED, self.rep_btn, self)
	
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED, self.rep_btn_full, self)
	
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
	
	self:AddCallback("list_window", ui_events.LIST_ITEM_CLICKED, 			  self.OnListItemClicked,		self)
	self:AddCallback("list_window", ui_events.WINDOW_LBUTTON_DB_CLICK,		  self.OnListItemDbClicked,		self)

	self:AddCallback("message_box",		ui_events.MESSAGE_BOX_OK_CLICKED,	  self.OnMsgYes,				self)
-- -- amk.logf("Коллбэки инициализированы")
end


function repair_dialog:FillList()
-- -- amk.logf("Наполняем список предметами:")
-- -- amk.logf("Начинаем перебирать инвентарь")
	item_table = 0
	item_table = {}
	item_table_index = 0
	db.actor:iterate_inventory(item_for_repair, db.actor)
-- -- amk.logf("Закончили перебирать инвентарь")

	local item_in_slot_1 = db.actor:item_in_slot(1)
	local item_in_slot_2 = db.actor:item_in_slot(2)
	local item_in_slot_6 = db.actor:item_in_slot(6)
	
	if item_in_slot_1 then
		item_in_slot_1 = item_in_slot_1:id()
	else	
		item_in_slot_1 = 0 
	end
	
	if item_in_slot_2 then
		item_in_slot_2 = item_in_slot_2:id()
	else	
		item_in_slot_2 = 0 
	end

	if item_in_slot_6 then
		item_in_slot_6 = item_in_slot_6:id()
	else	
		item_in_slot_6 = 0 
	end	
	
	local i = 1
	while (item_table[i]) do
-- -- amk.logf("Извлекаем предмет из таблицы")
		local s_item = item_table[i]
		local s_item_section = s_item:section()
		local _item_num = "" .. i .. ""
		local _item_name = game.translate_string(get_inv_name_short(s_item_section))
		
		if s_item:id() == item_in_slot_1 
		or s_item:id() == item_in_slot_2 then
			_item_name = _item_name.." (w rкkach)"
		elseif s_item:id() == item_in_slot_6 then
			_item_name = _item_name.." (zaіoїone)"
		end
		
		local _item_cond = s_item:condition()*100
		if _item_cond ~= 100 then _item_cond = string.format("%.1f", _item_cond) end
		_item_cond = "[" .. _item_cond .. "%]"
-- -- amk.logf("Передаём строку с предметом в список")
		self:AddItemToList(_item_num, _item_name, _item_cond)
		i = i+1
	end

-- -- amk.logf("Закончили наполнять список")
end

function item_for_repair(npc, item)
	if item:condition() < max_condition and item:condition() >= min_condition and (isWeapon(item) or get_clsid(item) == clsid.wpn_binocular_s or isOutfit(item)) then
		item_table_index = item_table_index + 1
		item_table[item_table_index] = item
	end
end


function repair_dialog:OnListItemClicked()

	local list_box = self:GetListWnd("list_window")
	
	if list_box:GetSize() == 0 then return end
	
	local itm_index = list_box:GetSelectedItem()
	
	local item = list_box:GetItem(itm_index)

	if item == nil then return end
	
	self.btn_4:Enable(true)
	self.btn_5:Enable(true)

	local destr_item_name = item.itmn:GetText()
	local destr_item_index = tonumber(item.itmnum:GetText())
	local destr_item_st = item_table[destr_item_index]
	self:DrawConditionRemBar(destr_item_st, 300, 130)
	self:DrawCurRemItemName(destr_item_name, 300, 45)
	self:DrawCurRemItem(destr_item_st, 300, 90)
	
	local destr_item = item_table[destr_item_index]
	local to_repair = 1.0 - destr_item:condition()
	local money = db.actor:money()
	local item_repair_cost = math.floor(destr_item:cost() * to_repair * profit_margin * price_multiplier)
	local repair_step_cost = 0
	
	if destr_item:condition() < 1-partial_repair then
		repair_step_cost = math.floor((destr_item:cost() * profit_margin) * partial_repair * price_multiplier)
	else
		repair_step_cost = item_repair_cost
	end
	
	self:DrawMoney(money, 260, 63)
	self:DrawStepCost(repair_step_cost, 260, 83)
	self:DrawCost(item_repair_cost, 260, 103)
	
	self.cur_rem_textur:Show(true)
	self.item_name_rem:Show(true)
	self.stepcost:Show(true)
	self.cost:Show(true)
	self.cond_rem_bar:Show(true)

end


function repair_dialog:OnListItemDbClicked()
	self:rep_btn()
end


function repair_dialog:rep_btn()

-- -- amk.logf("Будем ремонтировать")
	local console = get_console()
	local list = self:GetListWnd("list_window")	
	if list:GetSize()==0 then
		return
	end
-- -- amk.logf("И есть, чем")
	local index = list:GetSelectedItem()
	if index == -1 then
--		amk.send_tip("Выберите предмет для ремонта.")
		self.msgbox_id = 1
		self.message_box:Init("message_box_select_item")
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end

	local item = list:GetItem(index)
	
	if not item then
--		amk.send_tip("Выберите предмет для ремонта.")
		self.msgbox_id = 1
		self.message_box:Init("message_box_select_item")
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end		
	
	local destr_item_index = tonumber(item.itmnum:GetText())
	local destr_item = item_table[destr_item_index]

	local to_repair = 1.0 - destr_item:condition()
	local money = db.actor:money()
	local item_repair_cost = math.floor(destr_item:cost() * to_repair * profit_margin * price_multiplier)
	local repair_step_cost = 0
	
	if destr_item:condition() < 1-partial_repair then
		repair_step_cost = math.floor((destr_item:cost() * profit_margin) * partial_repair * price_multiplier)
	else
		repair_step_cost = item_repair_cost
	end
	
	if money >= repair_step_cost then
		local cond 		= destr_item:condition()
		local out_cond 	= cond + partial_repair
		if out_cond > 1 then
			destr_item:set_condition(1)
		else
			destr_item:set_condition(out_cond)
		end
		db.actor:give_money(0-repair_step_cost)
		local list_box = self:GetListWnd("list_window")

		self.cur_rem_textur:Show(false)
		self.item_name_rem:Show(false)
		self.stepcost:Show(false)
		self.cost:Show(false)
		self.cond_rem_bar:Show(false)
		
		remkit_main.play_repair_sound()
		
		list_box:RemoveAll()
		self:FillList()

		local money = db.actor:money()
		self:DrawMoney(money, 260, 63)		
		
	else
		self.msgbox_id = 1
		self.message_box:Init("message_box_repair_nomoney")
		self:GetHolder():start_stop_menu(self.message_box, true)	
	end

end

function repair_dialog:rep_btn_full()

-- -- amk.logf("Будем ремонтировать")
	local console = get_console()
	local list = self:GetListWnd("list_window")	
	if list:GetSize()==0 then
		return
	end
-- -- amk.logf("И есть, чем")
	local index = list:GetSelectedItem()
	if index == -1 then
--		amk.send_tip("Выберите предмет для ремонта.")
		self.msgbox_id = 1
		self.message_box:Init("message_box_select_item")
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end

	local item = list:GetItem(index)
	
	if not item then
--		amk.send_tip("Выберите предмет для ремонта.")
		self.msgbox_id = 1
		self.message_box:Init("message_box_select_item")
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end	
	
	local destr_item_index = tonumber(item.itmnum:GetText())
	local destr_item = item_table[destr_item_index]

	local to_repair = 1.0 - destr_item:condition()
	local money = db.actor:money()
	local item_repair_cost = math.floor(destr_item:cost() * to_repair * profit_margin * price_multiplier)
	
	if money >= item_repair_cost then
		destr_item:set_condition(1)
		db.actor:give_money(0-item_repair_cost)	
		local list_box = self:GetListWnd("list_window")
		
		self.cur_rem_textur:Show(false)
		self.item_name_rem:Show(false)
		self.stepcost:Show(false)
		self.cost:Show(false)	
		self.cond_rem_bar:Show(false)
		
		remkit_main.play_repair_sound()
		
		list_box:RemoveAll()
		self:FillList()		
		
		local money = db.actor:money()
		self:DrawMoney(money, 260, 63)		
	else
		self.msgbox_id = 1
		self.message_box:Init("message_box_repair_nomoney")
		self:GetHolder():start_stop_menu(self.message_box, true)	
	end

end	

function repair_dialog:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
-- на выход повесим Esc
		if dik == DIK_keys.DIK_ESCAPE or
		dik == DIK_keys.DIK_F then
			self:on_quit()
		end
		if dik == DIK_keys.DIK_NUMPAD4 then
			self:rep_btn()
		end
		
	end
	return true
end


function repair_dialog:on_quit()
	self:GetHolder():start_stop_menu (self,true)
end


function repair_dialog:AddItemToList(item_num, item_name, item_cond)
-- -- amk.logf("Пытаемся добавить строку списка:")
	local _itm = select_repair_items()
	
-- -- amk.logf("Передача индекса..." .. item_num)
	_itm.itmnum:SetText (item_num)
-- -- amk.logf("Передача имени..." .. item_name)
	_itm.itmn:SetText (item_name)
-- -- amk.logf("Передача кондиции..." .. item_cond)
	_itm.itmage:SetText (item_cond)
	
-- -- amk.logf("Получаем доступ к полю списка...")
	local list_box = self:GetListWnd("list_window")
-- -- amk.logf("Добавление строки...")
	list_box:AddItem (_itm)
-- -- amk.logf("Строка списка добавлена")
end


function get_inv_name_short(section)
	return system_ini():r_string(section,"inv_name_short")
end


--Рисуем ремонтируемый предмет
function repair_dialog:DrawCurRemItem(de_item, x, y)

if x == nil then x = 0 end
if y == nil then y = 0 end

	local di_section = de_item:section()

  local scope = 0
  local launcher = 0
  local silence = 0

  local cur_destr_state, sect_addon
  local xa,ya,wa,ha
  local x_g,y_g,x_sco,y_sco,x_sil,y_sil
  local isGrenade=false
  local isScope=false
  local isSilencer=false
  
  local a = self.cur_rem_textur
  local sys = system_ini()
  if not a then
	self.cur_rem_textur = CUIStatic()
    a = self.cur_rem_textur
    a:SetWindowName("cur_rem_textur")
    a:SetAutoDelete(true)  
	a:InitTexture("ui\\ui_icon_equipment")   
    a:SetStretchTexture(true)
    self:AttachChild(a)
  end
	
	if de_item then
	tx = remkit_main.get_x(de_item)
    ty = remkit_main.get_y(de_item)
	tw = remkit_main.get_w(de_item)
    th = remkit_main.get_h(de_item)
	tx=tx*50
	ty=ty*50
	tw=tw*50
	th=th*50

	x = x-(tw/4)
	y = y-(th/4)

    a:SetOriginalRect(tx,ty,tw,th)
	a:Init(x,y,tw/2,th/2)
	
		if system_ini():line_exist(di_section, "scope_status") then
			scope = system_ini():r_u32(di_section, "scope_status")
		end
		if system_ini():line_exist(di_section, "grenade_launcher_status") then
			launcher = system_ini():r_u32(di_section, "grenade_launcher_status")
		end
		if system_ini():line_exist(di_section, "silencer_status") then
			silence = system_ini():r_u32(di_section, "silencer_status")
		end
	cur_destr_state = remkit_main.get_weapon_data(alife():object(de_item:id()))

	if cur_destr_state == nil then return end

--Рисуем подствольник
if launcher == 2 and bit_and(cur_destr_state.addon_flags, 2) == 2 then
	isGrenade=true
	sect_addon=sys:r_string(di_section,"grenade_launcher_name")
	x_g=x+(sys:r_u32(di_section, "grenade_launcher_x")/2)
	y_g=y+(sys:r_u32(di_section, "grenade_launcher_y")/2)
	xa=sys:r_u32(sect_addon, "inv_grid_x")*50
	ya=sys:r_u32(sect_addon, "inv_grid_y")*50
	wa=sys:r_u32(sect_addon, "inv_grid_width")*50
	ha=sys:r_u32(sect_addon, "inv_grid_height")*50
  
  local b = self.grenade_rem_textur   
  
 if not b then
	self.grenade_rem_textur=CUIStatic()
	b = self.grenade_rem_textur
	b:SetWindowName("grenade_rem_textur")
	b:SetAutoDelete(true)  
	b:InitTexture("ui\\ui_icon_equipment")   
	b:SetStretchTexture(true)
	self:AttachChild(b)
 end
	b:SetOriginalRect(xa,ya,wa,ha)
	b:Init(x_g,y_g,wa/2,ha/2)
 end

 --Рисуем оптический прицел
if scope == 2 and bit_and(cur_destr_state.addon_flags, 1) == 1 then
	isScope=true
	sect_addon=sys:r_string(di_section,"scope_name")
	x_sco=x+(sys:r_u32(di_section, "scope_x")/2)
	y_sco=y+(sys:r_u32(di_section, "scope_y")/2)
	xa=sys:r_u32(sect_addon, "inv_grid_x")*50
	ya=sys:r_u32(sect_addon, "inv_grid_y")*50
	wa=sys:r_u32(sect_addon, "inv_grid_width")*50
	ha=sys:r_u32(sect_addon, "inv_grid_height")*50
  
  local b = self.scope_rem_textur   
  
 if not b then
	self.scope_rem_textur =CUIStatic()
	b = self.scope_rem_textur 
	b:SetWindowName("scope_rem_textur ")
	b:SetAutoDelete(true)  
	b:InitTexture("ui\\ui_icon_equipment")   
	b:SetStretchTexture(true)
	self:AttachChild(b)
 end
	b:SetOriginalRect(xa,ya,wa,ha)
	b:Init(x_sco,y_sco,wa/2,ha/2)
	
end

--Рисуем глушитель
if silence == 2 and bit_and(cur_destr_state.addon_flags, 4) == 4 then 	
	isSilencer=true
	sect_addon=sys:r_string(di_section,"silencer_name")
	x_sil=x+(sys:r_u32(di_section, "silencer_x")/2)
	y_sil=y+(sys:r_u32(di_section, "silencer_y")/2)
	xa=sys:r_u32(sect_addon, "inv_grid_x")*50
	ya=sys:r_u32(sect_addon, "inv_grid_y")*50
	wa=sys:r_u32(sect_addon, "inv_grid_width")*50
	ha=sys:r_u32(sect_addon, "inv_grid_height")*50
  
 local b = self.silencer_rem_textur   
  
 if not b then
	self.silencer_rem_textur=CUIStatic()
	b = self.silencer_rem_textur
	b:SetWindowName("silencer_rem_textur")
	b:SetAutoDelete(true)  
	b:InitTexture("ui\\ui_icon_equipment")   
	b:SetStretchTexture(true)
	self:AttachChild(b)
 end
	b:SetOriginalRect(xa,ya,wa,ha)
	b:Init(x_sil,y_sil,wa/2,ha/2)
end

else
a:Init(0,0,0,0)
end	
	local d1 = self.grenade_rem_textur
	local d2 = self.scope_rem_textur
	local d3 = self.silencer_rem_textur
	
	if d1 and not isGrenade  then
	d1:Init(0,0,0,0)
	end

	if d2 and not isScope  then
	d2:Init(0,0,0,0)
	end
	
	if d3 and not isSilencer  then
	d3:Init(0,0,0,0)
	end

end

--Полоска состояния оружия, которое разбираем
function repair_dialog:DrawConditionRemBar(de_item, x, y)

if x == nil then x = 0 end
if y == nil then y = 0 end
local cond_rem_bar_width = 0
	if de_item then
	cond_rem_bar_width = (math.floor(de_item:condition()*100)*1.1)
	x = x - 55 --(cond_rem_bar_width/2)
	local c=self.cond_rem_bar
	if not c then
	self.cond_rem_bar = CUIStatic()
    c = self.cond_rem_bar
    c:SetWindowName("cond_rem_bar")
    c:SetAutoDelete(true)
	c:InitTexture("ui\\ui_hud")
    c:SetOriginalRect(347,207,110,10)   
    c:SetStretchTexture(true)
    self:AttachChild(c) 
	end
	if cond_rem_bar_width > 109 then cond_rem_bar_width = 109
	elseif cond_rem_bar_width <= 0 then cond_rem_bar_width = 1 end
	c:SetOriginalRect(346+cond_rem_bar_width,207,1,10)   
	c:Init(x,y,cond_rem_bar_width,10)
	else
	c:Init(0,0,0,0)
	end
end

--Название предмета, который разбираем
function repair_dialog:DrawCurRemItemName(de_item, x, y)

if x == nil then x = 0 end
if y == nil then y = 0 end
	local w = self.item_name_rem
	if not w then
	self.item_name_rem = CUI3tButton()
    w = self.item_name_rem
    w:SetWindowName("item_name_rem")
    w:SetAutoDelete(true)
    self:AttachChild(w) 
	end
	if de_item then
	w:SetFont(GetFontLetterica16Russian())
	w:SetTextColor (95,255,255,255)
	w:SetText(de_item)
	w:Init(x-100,y,200,10)
	else
	w:SetText("")
	w:Init(0,0,0,0)
	end
end

function repair_dialog:DrawMoney(insert_text, x, y)

if x == nil then x = 0 end
if y == nil then y = 0 end
	local w = self.money
	if not w then
	self.money = CUI3tButton()
    w = self.money
    w:SetWindowName("money")
    w:SetAutoDelete(true)
    self:AttachChild(w) 
	end
	if insert_text then
	w:SetFont(GetFontLetterica16Russian())
	w:SetTextColor (255,255,255,255)
	w:SetText(insert_text)
	w:Init(x-100,y,200,10)
	w:SetTextAlign(CGameFont.alLeft)
	else
	w:SetText("")
	w:Init(0,0,0,0)
	end
end

function repair_dialog:DrawStepCost(insert_text, x, y)

if x == nil then x = 0 end
if y == nil then y = 0 end
	local w = self.stepcost
	if not w then
	self.stepcost = CUI3tButton()
    w = self.stepcost
    w:SetWindowName("stepcost")
    w:SetAutoDelete(true)
    self:AttachChild(w) 
	end
	if insert_text then
	w:SetFont(GetFontLetterica16Russian())
	w:SetTextColor (255,255,255,255)
	w:SetText(insert_text)
	w:Init(x-100,y,200,10)
	w:SetTextAlign(CGameFont.alLeft)
	else
	w:SetText("")
	w:Init(0,0,0,0)
	end
end

function repair_dialog:DrawCost(insert_text, x, y)

if x == nil then x = 0 end
if y == nil then y = 0 end
	local w = self.cost
	if not w then
	self.cost = CUI3tButton()
    w = self.cost
    w:SetWindowName("cost")
    w:SetAutoDelete(true)
    self:AttachChild(w) 
	end
	if insert_text then
	w:SetFont(GetFontLetterica16Russian())
	w:SetTextColor (255,255,255,255)
	w:SetText(insert_text)
	w:Init(x-100,y,200,10)
	w:SetTextAlign(CGameFont.alLeft)
	else
	w:SetText("")
	w:Init(0,0,0,0)
	end
end


function repair_dialog:OnMsgYes()

	if self.msgbox_id == 1 then return
	end
	
	self.msgbox_id = 0
end
-----------------------------------------------------------------------
--- ogse_repair.script
--- Ремонт торговцами/механиками вещей
--- KamikaZze, OGS Evolution Team 2010, на основе ремкита Dusty79
--- version 1.0
-----------------------------------------------------------------------