-- ----------------------------------------------------------------------------------------------------
-- Funkcje ogólne
-- ----------------------------------------------------------------------------------------------------
-- collectgarbage()
function disable_ui_elements(actor, npc, p)
    local i, v = 0, 0
    for i, v in pairs(p) do
        if v == "all" then
            db.actor:hide_weapon()
            level.disable_input()
            level.hide_indicators()
            break
        elseif v == "weapon" then
            db.actor:hide_weapon()
        elseif v == "input" then
            level.disable_input()
        elseif v == "hud" then
            level.hide_indicators()
        end
    end
    --printf("xr_effects <disable_ui_elements>")
end

function enable_ui_elements(actor, npc, p)
    local i, v = 0, 0
    for i, v in pairs(p) do
        if v == "all" then
            level.show_indicators()
            level.enable_input()
            db.actor:restore_weapon()
            break
        elseif v == "hud" then
            level.show_indicators()
        elseif v == "input" then
            level.enable_input()
        elseif v == "weapon" then
            db.actor:restore_weapon()
        end
    end
end

function disable_ui(actor, npc)
    db.actor:hide_weapon()
    level.disable_input()
    level.hide_indicators()
    -- printf("xr_effects <disable_ui>")
	if dinamic_hud then
	dinamic_hud.ui_disabled = true
	end
end

function disable_ui_end(actor, npc)
	--if db.actor:is_talking() then
		--db.actor:stop_talk()
	--end
    --db.actor:hide_weapon()
    --level.disable_input()
	--if dinamic_hud then
	--dinamic_hud.ui_disabled = true
	--end
end

function enable_ui(actor, npc)
    level.show_indicators()
    level.enable_input()
    db.actor:restore_weapon()
    --printf("xr_effects <enable_ui>")
	if dinamic_hud then
	dinamic_hud.ui_disabled = false
	end
end

function run_cam_effector(actor, npc, p)
    if p[1] then
        local loop, num = false, (1000 + math.random(100))

        if p[2] and type(p[2]) == "number" and p[2] > 0 then
            num = p[2]
        end

        if p[3] and p[3] == "true" then
            loop = true
        end

        --level.add_pp_effector(p[1] .. ".ppe", num, loop)
	    level.add_cam_effector("camera_effects\\" .. p[1] .. ".anm", num, loop, "")
    end
end

function stop_cam_effector(actor, npc, p)
    if p[1] and type(p[1]) == "number" and p[1] > 0 then
        level.remove_cam_effector(p[1])
    end
end

function run_postprocess(actor, npc, p)
    if p[1] then
        local loop, num = false, (2000 + math.random(100))

        if p[2] and type(p[2]) == "number" and p[2] > 0 then
            num = p[2]
        end

        if p[3] and p[3] == "true" then
            loop = true
        end

        level.add_pp_effector(p[1] .. ".ppe", num, loop)
    end
end

function stop_postprocess(actor, npc, p)
    if p[1] and type(p[1]) == "number" and p[1] > 0 then
        level.remove_pp_effector(p[1])
    end
end

function run_tutorial(actor, npc, p)
	game.start_tutorial(p[1])
end
function run_tutorial_if_newbie(actor, npc, p)
	if has_alife_info("esc_trader_newbie") then
		game.start_tutorial(p[1])
	end
end

function teleport_actor(actor, npc, p)
	local point = patrol(p[1])
	local look = patrol(p[2])

	db.actor:set_actor_position(point:point(0))
	local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

-----------------------------------------------------------------------------
local drop_point, drop_object = 0, 0
local function drop_object_item(item)
    drop_object:drop_item_and_teleport(item, drop_point)
end

function drop_actor_inventory(actor, npc, p)
    if p[1] then
        drop_point  = patrol(p[1]):point(0)
        drop_object = actor
        actor:inventory_for_each(drop_object_item)
    end
end

-- FIXME: drop_npc_inventory doesn't work
function drop_npc_inventory(actor, npc, p)
    if p[1] then
        drop_point  = patrol(p[1]):point(0)
        drop_object = npc
        npc:inventory_for_each(drop_object_item)
    end
end

function drop_npc_item(actor, npc, p)
    if p[1] then
        local item = npc:object(p[1])
        if item then
		    npc:drop_item(item)
		end
    end
end

function drop_npc_items(actor, npc, p)
    local item = 0
	for i, v in pairs(p) do
        item = npc:object(v)
        if item then
		    npc:drop_item(item)
        end
    end
end

function give_item(actor, npc, p)
    if p[1] then
        alife():create(p[1], npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id())
    end
end

function give_items(actor, npc, p)
    local pos, lv_id, gv_id, npc_id = npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id()
	for i, v in pairs(p) do
        alife():create(v, pos, lv_id, gv_id, npc_id)
    end
end

function respawner_spawn(actor, npc, p)
    if p[1] then
		se_respawn.spawn(p[1])
    end
end

function play_particle_on_path(actor, npc, p)
    local name = p[1]
    local path = p[2]
    local point_prob = p[3]
    if name == nil or path == nil then
        return
    end

    if point_prob == nil then
        point_prob = 100
    end

    local path = patrol(path)
    local count = path:count()
    for a = 0,count-1,1 do
        local particle = particles_object(name)
        if math.random(100) <= point_prob then
            particle:play_at_pos(path:point(a))
        end
    end
end


-----------------------------------------------------------------------------
function monster_berserk(actor, npc)
    npc:berserk()
end

function activate_bolt(actor, npc)
	db.actor:activate_slot(5)
end

--[[
send_tip(news_id:sender:sender_id)
    1. news_id
    2. sender*
    3. sender_id*
    * - not necessary
--]]
function send_tip(actor, npc, p)
    news_manager.send_tip(actor, p[1], nil, p[2], nil, p[3])
end



--[[
Daj przeœladowcy kopniaka. Na przyk³ad, aby zrzuciæ go ze wzgórza.
parametry: aktor, npc, p[kierunek,koœæ,moc,impuls,reverse=false]
     1. kierunek - jeœli ci¹g, to uwa¿a siê, ¿e jest to nazwa œcie¿ki i na bok
         pierwszy punkt jest produkowany push. Jeœli jest to liczba, to
         traktowany jako story_id postaci, od której ma pochodziæ trafienie.
     2. koœæ - sznurek. Nazwa uderzanej koœci.
     3. moc - si³a uderzenia
     4. impuls - impuls
     5. reverse (true/false) – zmiana kierunku uderzenia. domyœlnie fa³szywe
--]]
function hit_npc(actor, npc, p)
	local h = hit()
	local rev = p[5] and p[5] == 'true'
	h.draftsman = npc
	h.type = hit.wound
	if type(p[1]) == 'number' then
		local hitter = level_object_by_sid(p[1])
		if not hitter then return end
	    if rev then
	        h.draftsman = hitter
		    h.direction = hitter:position():sub(npc:position())
	    else
		    h.direction = npc:position():sub(hitter:position())
	    end
	else
	    if rev then
	        h.draftsman = nil
		    h.direction = npc:position():sub(patrol(p[1]):point(0))
	    else
		    h.direction = patrol(p[1]):point(0):sub(npc:position())
	    end
	end
	h:bone(p[2])
	h.power = p[3]
	h.impulse = p[4]
	--printf("HIT EFFECT: (%s, %s,%d,%d) health(%s)", npc:name(), p[2], h.power, h.impulse, npc.health)
	npc:hit(h)
end

--[[
Daj danemu obiektowi story_id trafienie.
parametry: aktor, npc, p[sid,koœæ,moc,impuls,hit_src=npc:pozycja()]
     1. sid - story_id obiektu, na którym zastosowano trafienie.
     2. koœæ - sznurek. Nazwa uderzanej koœci.
     3. moc - si³a uderzenia
     4. impuls - impuls
     5. hit_src - jeœli liczba, to jest traktowana jako story_id obiektu, z boku
         który zadaje trafienie (jest on równie¿ inicjatorem trafienia), w przeciwnym razie
         punkt, z którego obiekt zosta³ uderzony.
         Jeœli nie jest ustawiony, to pobierana jest pozycja obiektu, z którego zosta³a wywo³ana.
         tê funkcjê.
--]]
function hit_obj(actor, npc, p)
	local h = hit()
	local obj = level_object_by_sid(p[1])
	local sid = nil

	if not obj then
--		abort("HIT_OBJ [%s]. Target object does not exist", npc:name())
		return
	end

	h:bone(p[2])
	h.power = p[3]
	h.impulse = p[4]

	if p[5] then
	    sid = tonumber(p[5])
	    if sid then
	        sid = level_object_by_sid(sid)
	        if sid then
	            h.direction = vector():sub(sid:position(), obj:position())
	        end
	    end
	    if not sid then
	        h.direction = vector():sub(patrol(p[5]):point(0), obj:position())
	    end
	else
	    h.direction = vector():sub(npc:position(), obj:position())
	end

	h.draftsman = sid or npc
	h.type = hit.wound
	obj:hit(h)
end

--[[
Po œmierci kopnij przeœladowcê. Podobnie jak w poprzednim, teraz jest tylko kierunek uderzenia
obliczone przez zabójcê. Dlatego nie ma parametru kierunku.
parametry: aktor, npc, p[koœæ, moc, impuls]
FIXME: killer:position() nie dzia³a
--]]
function hit_by_killer(actor, npc, p)
	if not npc then return end
	local t = db.storage[npc:id()].death
	if t == nil or t.killer == -1 then return end
	local killer = db.storage[t.killer]
	if killer == nil then return end
	local p1, p2
	p1 = npc:position()
	p2 = killer:position()
	local h = hit()
	h.draftsman = npc
	h.type = hit.wound
	h.direction = utils.vector_copy_by_val(p1):sub(p2)
	h.bone = p[1]
	h.power = p[2]
	h.impulse = p[3]
	npc:hit(h)
end

function set_friends(actor, npc, p)
    local npc1
	for i, v in pairs(p) do
		npc1 = level_object_by_sid(v)
		if npc1 and npc1:alive() then
			--printf("_bp: %d:set_friends(%d)", npc:id(), npc1:id())
			npc:set_relation(game_object.friend, npc1)
			npc1:set_relation(game_object.friend, npc)
		end
	end
end

function set_enemies(actor, npc, p)
    local npc1
	for i, v in pairs(p) do
		--printf("_bp: set_enemies(%d)", v)
		npc1 = level_object_by_sid(v)
		if npc1 and npc1:alive() then
			npc:set_relation(game_object.enemy, npc1)
			npc1:set_relation(game_object.enemy, npc)
		end
	end
end

-- 
