-- ----------------------------------------------------------------------------------------------------
-- Общие функции
-- ----------------------------------------------------------------------------------------------------
-- collectgarbage()
function disable_ui_elements(actor, npc, p)
    local i, v = 0, 0
    for i, v in pairs(p) do
        if v == "all" then
            db.actor:hide_weapon()
            level.disable_input()
            level.hide_indicators()
            break
        elseif v == "weapon" then
            db.actor:hide_weapon()
        elseif v == "input" then
            level.disable_input()
        elseif v == "hud" then
            level.hide_indicators()
        end
    end
    --printf("xr_effects <disable_ui_elements>")
end

function enable_ui_elements(actor, npc, p)
    local i, v = 0, 0
    for i, v in pairs(p) do
        if v == "all" then
            level.show_indicators()
            level.enable_input()
            db.actor:restore_weapon()
            break
        elseif v == "hud" then
            level.show_indicators()
        elseif v == "input" then
            level.enable_input()
        elseif v == "weapon" then
            db.actor:restore_weapon()
        end
    end
end

function disable_ui(actor, npc)
    db.actor:hide_weapon()
    level.disable_input()
    level.hide_indicators()
    -- printf("xr_effects <disable_ui>")
	if dinamic_hud then
	dinamic_hud.ui_disabled = true
	end
end

function disable_ui_end(actor, npc)
	--if db.actor:is_talking() then
		--db.actor:stop_talk()
	--end
    --db.actor:hide_weapon()
    --level.disable_input()
	--if dinamic_hud then
	--dinamic_hud.ui_disabled = true
	--end
end

function enable_ui(actor, npc)
    level.show_indicators()
    level.enable_input()
    db.actor:restore_weapon()
    --printf("xr_effects <enable_ui>")
	if dinamic_hud then
	dinamic_hud.ui_disabled = false
	end
end

function run_cam_effector(actor, npc, p)
    if p[1] then
        local loop, num = false, (1000 + math.random(100))

        if p[2] and type(p[2]) == "number" and p[2] > 0 then
            num = p[2]
        end

        if p[3] and p[3] == "true" then
            loop = true
        end

        --level.add_pp_effector(p[1] .. ".ppe", num, loop)
	    level.add_cam_effector("camera_effects\\" .. p[1] .. ".anm", num, loop, "")
    end
end

function stop_cam_effector(actor, npc, p)
    if p[1] and type(p[1]) == "number" and p[1] > 0 then
        level.remove_cam_effector(p[1])
    end
end

function run_postprocess(actor, npc, p)
    if p[1] then
        local loop, num = false, (2000 + math.random(100))

        if p[2] and type(p[2]) == "number" and p[2] > 0 then
            num = p[2]
        end

        if p[3] and p[3] == "true" then
            loop = true
        end

        level.add_pp_effector(p[1] .. ".ppe", num, loop)
    end
end

function stop_postprocess(actor, npc, p)
    if p[1] and type(p[1]) == "number" and p[1] > 0 then
        level.remove_pp_effector(p[1])
    end
end

function run_tutorial(actor, npc, p)
	game.start_tutorial(p[1])
end
function run_tutorial_if_newbie(actor, npc, p)
	if has_alife_info("esc_trader_newbie") then
		game.start_tutorial(p[1])
	end
end

function teleport_actor(actor, npc, p)
	local point = patrol(p[1])
	local look = patrol(p[2])

	db.actor:set_actor_position(point:point(0))
	local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

-----------------------------------------------------------------------------
local drop_point, drop_object = 0, 0
local function drop_object_item(item)
    drop_object:drop_item_and_teleport(item, drop_point)
end

function drop_actor_inventory(actor, npc, p)
    if p[1] then
        drop_point  = patrol(p[1]):point(0)
        drop_object = actor
        actor:inventory_for_each(drop_object_item)
    end
end

-- FIXME: drop_npc_inventory doesn't work
function drop_npc_inventory(actor, npc, p)
    if p[1] then
        drop_point  = patrol(p[1]):point(0)
        drop_object = npc
        npc:inventory_for_each(drop_object_item)
    end
end

function drop_npc_item(actor, npc, p)
    if p[1] then
        local item = npc:object(p[1])
        if item then
		    npc:drop_item(item)
		end
    end
end

function drop_npc_items(actor, npc, p)
    local item = 0
	for i, v in pairs(p) do
        item = npc:object(v)
        if item then
		    npc:drop_item(item)
        end
    end
end

function give_item(actor, npc, p)
    if p[1] then
        alife():create(p[1], npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id())
    end
end

function give_items(actor, npc, p)
    local pos, lv_id, gv_id, npc_id = npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id()
	for i, v in pairs(p) do
        alife():create(v, pos, lv_id, gv_id, npc_id)
    end
end

function respawner_spawn(actor, npc, p)
    if p[1] then
		se_respawn.spawn(p[1])
    end
end

function play_particle_on_path(actor, npc, p)
    local name = p[1]
    local path = p[2]
    local point_prob = p[3]
    if name == nil or path == nil then
        return
    end

    if point_prob == nil then
        point_prob = 100
    end

    local path = patrol(path)
    local count = path:count()
    for a = 0,count-1,1 do
        local particle = particles_object(name)
        if math.random(100) <= point_prob then
            particle:play_at_pos(path:point(a))
        end
    end
end


-----------------------------------------------------------------------------
function monster_berserk(actor, npc)
    npc:berserk()
end

function activate_bolt(actor, npc)
	db.actor:activate_slot(5)
end

--[[
send_tip(news_id:sender:sender_id)
    1. news_id
    2. sender*
    3. sender_id*
    * - not necessary
--]]
function send_tip(actor, npc, p)
    news_manager.send_tip(actor, p[1], nil, p[2], nil, p[3])
end



--[[
Дать сталкеру небольшой пинок. Например чтоб скинуть его с возвышения.
параметры: actor, npc, p[direction,bone,power,impulse,reverse=false]
    1. direction - если строка, то считается, что это имя пути и в сторону
        первой точки производится толчек. Если же это число, то оно
        рассматривается как story_id персонажа от которого должен поступить хит.
    2. bone - строка. Имя кости, по которой наносится удар.
    3. power - сила удара
    4. impulse - импульс
    5. reverse (true/false) - изменение направления удара. по умолчанию false
--]]
function hit_npc(actor, npc, p)
	local h = hit()
	local rev = p[5] and p[5] == 'true'
	h.draftsman = npc
	h.type = hit.wound
	if type(p[1]) == 'number' then
		local hitter = level_object_by_sid(p[1])
		if not hitter then return end
	    if rev then
	        h.draftsman = hitter
		    h.direction = hitter:position():sub(npc:position())
	    else
		    h.direction = npc:position():sub(hitter:position())
	    end
	else
	    if rev then
	        h.draftsman = nil
		    h.direction = npc:position():sub(patrol(p[1]):point(0))
	    else
		    h.direction = patrol(p[1]):point(0):sub(npc:position())
	    end
	end
	h:bone(p[2])
	h.power = p[3]
	h.impulse = p[4]
	--printf("HIT EFFECT: (%s, %s,%d,%d) health(%s)", npc:name(), p[2], h.power, h.impulse, npc.health)
	npc:hit(h)
end

--[[
Дать обьекту, заданному story_id, хит.
параметры: actor, npc, p[sid,bone,power,impulse,hit_src=npc:position()]
    1. sid - story_id обьекта, по которому наносится хит.
    2. bone - строка. Имя кости, по которой наносится удар.
    3. power - сила удара
    4. impulse - импульс
    5. hit_src - если число, то рассматривается как story_id обьекта, со стороны
        которого наносится хит (он же является и инициатором хита), иначе это
        точка (waypoint), из которой по объекту наносится хит.
        Если не задано, то берется позиция обьекта, из которого была вызвана
        данная функция.
--]]
function hit_obj(actor, npc, p)
	local h = hit()
	local obj = level_object_by_sid(p[1])
	local sid = nil

	if not obj then
--		abort("HIT_OBJ [%s]. Target object does not exist", npc:name())
		return
	end

	h:bone(p[2])
	h.power = p[3]
	h.impulse = p[4]

	if p[5] then
	    sid = tonumber(p[5])
	    if sid then
	        sid = level_object_by_sid(sid)
	        if sid then
	            h.direction = vector():sub(sid:position(), obj:position())
	        end
	    end
	    if not sid then
	        h.direction = vector():sub(patrol(p[5]):point(0), obj:position())
	    end
	else
	    h.direction = vector():sub(npc:position(), obj:position())
	end

	h.draftsman = sid or npc
	h.type = hit.wound
	obj:hit(h)
end

--[[
Дать сталкеру небольшой пинок после смерти. Аналогично предыдущему, только направление хита теперь
вычисляется через убийцу. Поэтому параметра direction нет.
параметры: actor, npc, p[bone,power,impulse]
FIXME: killer:position() isn't working
--]]
function hit_by_killer(actor, npc, p)
	if not npc then return end
	local t = db.storage[npc:id()].death
	if t == nil or t.killer == -1 then return end
	local killer = db.storage[t.killer]
	if killer == nil then return end
	local p1, p2
	p1 = npc:position()
	p2 = killer:position()
	local h = hit()
	h.draftsman = npc
	h.type = hit.wound
	h.direction = utils.vector_copy_by_val(p1):sub(p2)
	h.bone = p[1]
	h.power = p[2]
	h.impulse = p[3]
	npc:hit(h)
end

function set_friends(actor, npc, p)
    local npc1
	for i, v in pairs(p) do
		npc1 = level_object_by_sid(v)
		if npc1 and npc1:alive() then
			--printf("_bp: %d:set_friends(%d)", npc:id(), npc1:id())
			npc:set_relation(game_object.friend, npc1)
			npc1:set_relation(game_object.friend, npc)
		end
	end
end

function set_enemies(actor, npc, p)
    local npc1
	for i, v in pairs(p) do
		--printf("_bp: set_enemies(%d)", v)
		npc1 = level_object_by_sid(v)
		if npc1 and npc1:alive() then
			npc:set_relation(game_object.enemy, npc1)
			npc1:set_relation(game_object.enemy, npc)
		end
	end
end

-- играть звук в голове актёра
function play_snd(actor, npc, p)
	if p[1] then
		local snd_obj = xr_sound.get_safe_sound_object(p[1])
		--snd_obj:play(actor, p[2] or 0, sound_object.s2d)
		snd_obj:play_no_feedback(actor, sound_object.s2d, p[2] or 0, vector(), 1.0)
	end
end

-- играть звук от указанного объекта
function play_snd_from_obj(actor, npc, p)
	if p[1] and p[2] then
		local snd_obj = xr_sound.get_safe_sound_object(p[2])
		local obj     = level_object_by_sid(p[1])
        if obj ~= nil then
           printf("can't find object with story id %s", tostring(p[1]))

--		snd_obj:play_at_pos(obj, obj:position(), sound_object.s3d)
		snd_obj:play_no_feedback(obj, sound_object.s3d, 0, obj:position(), 1.0)
		end
	end
end

-- играть звук от указанного объекта
function play_snd_now(actor, npc, p)
	xr_sound.set_sound_play(npc, p[1])
end


-- прибавить к указанному счётчику актёра 1
function inc_counter(actor, npc, p)
	if p[1] then
		printf( "inc_counter '%s'", p[1] )
		xr_logic.pstor_store(actor, p[1], xr_logic.pstor_retrieve(actor, p[1], 0) + 1)
	end
end

function dec_counter(actor, npc, p)
	if p[1] then
		printf( "dec_counter '%s'", p[1] )
		xr_logic.pstor_store(actor, p[1], xr_logic.pstor_retrieve(actor, p[1], 0) - 1)
	end
end


-- переключает камеру на монстра или на актёра
function alien_control( actor, npc, p )
	printf( "alien_control(%s)", p[1] )
	npc:set_alien_control( p[1] == "true" )
end

-- слелать актёра врагом персонажам, которые в онлайне под указанным смартом
function set_gulag_enemy_actor( actor, npc, p )
	if p[1] then
		xr_gulag.setGulagEnemy(p[1], actor)
	end
end

-- принудительное обновление смарта. Использовать только в КРАЙНИХ случаях!!!
-- каждое использование согласовывать со мной. Чугай.
function smart_terrain_force_update(actor, npc, p)
	printf( "xr_effects.smart_terrain_force_update called" )

	if p[1] then
		local gulag = xr_gulag.get_gulag(p[1])

		if gulag then
			gulag.smrttrn:update()
		end
	end
end

------------------------------------------------------------------------------------------------------------------------

-- постпроцесс и влияние удара в морду
function actor_punch(npc)
	if db.actor:position():distance_to_sqr(npc:position()) > 4 then
		return
	end

	local active_slot = db.actor:active_slot()
	if active_slot ~= 1 and
	   active_slot ~= 2
	then
		return
	end

	local active_item = db.actor:active_item()
	if active_item then
		db.actor:drop_item(active_item)
	end

	set_inactivate_input_time(30)
	local snd_obj = xr_sound.get_safe_sound_object([[affects\hit_fist]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)

	level.add_cam_effector("camera_effects\\fusker.anm", 999, false, "")
end

-- Принудительное усыпание игрока на радаре.
function force_actor_sleep(npc)
	db.actor:actor_sleep(24, 0)
end


-- забывание обиды
function clearAbuse(npc)
	printf("CLEAR_ABUSE")
	xr_abuse.clear_abuse(npc)
end


---Выключение динамической лампочки (hanging_lamp)
function turn_off(actor, npc, p)
	local obj = level_object_by_sid(p[1])

	if not obj then
		abort("TURN_OFF [%s]. Target object does not exist", npc:name())
		return
	end
	obj:get_hanging_lamp():turn_off()
end
function turn_off_object(actor, npc)
	npc:get_hanging_lamp():turn_off()
end

---Включение динамической лампочки (hanging_lamp)
function turn_on(actor, npc, p)
	local obj = level_object_by_sid(p[1])

	if not obj then
		abort("TURN_ON [%s]. Target object does not exist", npc:name())
		return
	end
	obj:get_hanging_lamp():turn_on()
end
function turn_on_object(actor, npc)
	npc:get_hanging_lamp():turn_on()
end

------------------------------------------------------------------------------------------------

-- Кто-то из участников сценки вступил в бой - теперь нужно пообижать всех на всех
function gar_dm_bandits_fight(actor, npc)
	local novice = level_object_by_sid(104)
	if not novice or not novice:alive() then
		return
	end

	local ignore_actor = distance_between(actor, novice) > 25

	local bandit1 = level_object_by_sid(101)
	if bandit1 then
		novice:set_relation(game_object.enemy, bandit1)
		if not ignore_actor then
			bandit1:set_relation(game_object.enemy, actor)
		end
		bandit1:set_relation(game_object.enemy, novice)
	end

	local bandit2 = level_object_by_sid(102)
	if bandit2 then
		novice:set_relation(game_object.enemy, bandit2)
		if not ignore_actor then
			bandit2:set_relation(game_object.enemy, actor)
		end
		bandit2:set_relation(game_object.enemy, novice)
	end

	local bandit3 = level_object_by_sid(103)
	if bandit3 then
		novice:set_relation(game_object.enemy, bandit3)
		if not ignore_actor then
			bandit3:set_relation(game_object.enemy, actor)
		end
		bandit1:set_relation(game_object.enemy, novice)
	end
end

function gar_dm_bandit_demand(actor, npc)
	printf("_bp: gar_dm_bandit_demand: actor=%s", actor:name())

	if has_alife_info("gar_dm_bandit1_demand") or
	   has_alife_info("gar_dm_bandit2_demand") or
	   has_alife_info("gar_dm_bandit3_demand") then
		return
	end
	local r = math.random(3)
	if r == 1 then
		actor:give_info_portion("gar_dm_bandit1_demand")
	elseif r == 2 then
		actor:give_info_portion("gar_dm_bandit2_demand")
	else
		actor:give_info_portion("gar_dm_bandit3_demand")
	end
end

function gar_send_dymon_alarm(actor, npc)
	if has_alife_info("gar_start_graveyard") then
		news_manager.send_tip(actor, "tips_gar_hellcar_alarm", 2, "stalker", 10000)
	end
end

function gar_direction_fire(actor, npc)
	if has_alife_info("gar_hellcar_help") and not has_alife_info("gar_counter_fire") and not has_alife_info("gar_open_fire") then
		news_manager.send_tip(actor, "gar_direction_fire", 0, "stalker", 0)
	end
end

function gar_hellcar_victory(actor, npc)
	if not has_alife_info("gar_hellcar_tips_end") and has_alife_info("gar_hellcar_help") and not has_alife_info("gar_hellcar_thanks") then
		news_manager.send_tip(actor, "gar_hellcar_victory", 0, "stalker", 0)
		db.actor:give_info_portion("gar_hellcar_tips_end")
	end
end

function gar_seryi_victory(actor, npc)
		news_manager.send_tip(actor, "gar_hellcar_victory", 0, "stalker", 0)
end

function gar_boars_counter(actor, npc)
	local c = xr_logic.pstor_retrieve(actor, "gar_boars_counter", 0)
	if c < 1 then
		news_manager.send_tip(actor, "gar_actor_looser", 0, "dolg", 0)
	else
		news_manager.send_tip(actor, "gar_actor_normal", 0, "dolg", 0)
		db.actor:give_info_portion("gar_kill_boars_request")
	end
end

--' Escape

function play_snd_from_radio(actor, npc)
  als_messages.esc_wolf_to_rangers_dialog()
	local snd_obj	= xr_sound.get_safe_sound_object([[characters_voice\scenario\escape\wolf_to_rangers_1]])
	local obj		= npc:object("hand_radio")
	snd_obj:play_no_feedback(obj, sound_object.s3d, 0, obj:position(), 1.0)
end

function esc_direction_fire(actor, npc)
	if not has_alife_info("esc_fanat_die") then
		news_manager.send_tip(actor, "esc_direction_fire", 7, "stalker", 0)
	end
end

function esc_fanat_victory(actor, npc)
	if has_alife_info("escape_lager_killers_die") and not has_alife_info("esc_fanat_die") then
		news_manager.send_tip(actor, "esc_fanat_victory", 0, "stalker", 10000)
	end
end

function esc_return_dv(actor, npc)
		news_manager.send_tip(actor, "esc_return_dv", 0, "trader", 10)
end



-- function esc_lager_forgive_actor(actor, npc)
--	xr_gulag.setGulagNeutral("esc_lager", db.actor)
-- end

-- function esc_lager_promise_actor(actor, npc)
--	local gulag = xr_gulag.get_gulag_by_name ("esc_lager")
--    if (gulag) then
--       gulag:set_relation (game_object.neutral, actor)
--    end
-- end

-- function esc_lager_rage_actor(actor, npc)
--	local gulag = xr_gulag.get_gulag_by_name ("esc_lager")
--    if (gulag) then
--       gulag:set_relation (game_object.enemy, actor)
--    end
-- end

--' garbage

function gar_mapspot_blockpost (actor, npc)
	level_tasks.add_location(115, "green_location", "gar_dolg_blokpost_leader_name")
end



function actor_friend(actor, npc)
	printf("_bp: xr_effects: actor_friend(): npc='%s': time=%d", npc:name(), time_global())
	npc:set_relation(game_object.friend, actor)
end

function actor_neutral(actor, npc)
	npc:set_relation(game_object.neutral, actor)
end

function actor_enemy(actor, npc)
	npc:set_relation(game_object.enemy, actor)
end

function give_all_quests(actor, npc)
	--bar_dialogs.quests()
end

function give_rostok_quests(actor, npc)
	bar_dialogs.rostok_quests()
end


-- Вызов этой функции отключит обработчик [combat] боя для персонажа.
-- Используется в случаях, когда все необходимые действия, такие как переключение на другую секцию,
-- уже выполнены, и повторно выполнять их во время боя нельзя (а условия секции [combat] проверяются на каждом
-- апдейте, когда персонаж в бою, если, конечно, не отключены вызовом этой функции).
function disable_combat_handler(actor, npc)
	if db.storage[npc:id()].combat then
		db.storage[npc:id()].combat.enabled = false
	end

	if db.storage[npc:id()].mob_combat then
		db.storage[npc:id()].mob_combat.enabled = false
	end
end

-- Вызов этой функции отключит обработчик [combat_ignore] перехвата боя для персонажа.
function disable_combat_ignore_handler(actor, npc)
	if db.storage[npc:id()].combat_ignore then
		db.storage[npc:id()].combat_ignore.enabled = false
	end
end

function log_bp1(actor, npc)
	printf("xr_effects: log_bp1 (actor='%s', npc='%s'", actor:name(), npc:name())
end

function psi_hit_npc(actor, npc,p)
end


function mil_paul_frost_dead (actor, npc)
    local gulag = xr_gulag.get_gulag_by_name ("mil_freedom")
    if (gulag) then
       gulag:set_relation (game_object.neutral, actor)
    end
end

function set_freedom_actor_enemy (actor, npc)
    local luk = level_object_by_sid (707)
    this.actor_enemy (actor, luk)
end

function military_dolg_dead (actor, npc)
    -- если нет актера, то вылетаем с грохотом и треском
    if actor == nil then return end
    -- если данные не существуют, то создадим
    local id = actor:id ()
    if db.storage[id] == nil then
       db.storage[id] = {}
    end

    if db.storage[id].mil_dolg_killed == nil then
       db.storage[id].mil_dolg_killed = 0
       db.storage[id].mil_dolg_killed_by_actor = false
    end
    -- проапдейтим количество мертвых долговцев
    db.storage[id].mil_dolg_killed = db.storage[id].mil_dolg_killed + 1

    --printf ("!!! DOLG STALKER IS DEAD, KILLED %d STALKERS !!!", db.storage[db.actor:id ()].mil_dolg["killed"])

    -- взведем флажок, что мужика замочили мы (нужно для Свободы)
    local st = db.storage[npc:id ()]
    if st.death.killer == -1 then return end
    if id == st.death.killer then
       db.storage[id].mil_dolg_killed_by_actor = true
    end

    -- если все умерли и была задача мочить снайпера, но сообщать не кому, то
    -- ставим задачу, как не выполненую
    if db.storage[id].mil_dolg_killed == 8 then
       actor:give_info_portion ("mil_dolg_dead")
    end

end

function mil_patrol_death_check (actor, npc)
    if has_alife_info("mil_patrol_man1_dead") and has_alife_info("mil_patrol_man2_dead") and has_alife_info("mil_patrol_man3_dead") then
       actor:give_info_portion ("mil_patrol_dead")
    end
end

function mil_cook_dead (actor, npc)
    --level_tasks.set_task_state (task.fail, "mil_freedom_rg6_task", 2)
end

function search_gulag_job(actor, npc)
	xr_gulag.resetJob(npc)
end


---------------------------------------------------------
-- BAR-ROSTOK
---------------------------------------------------------

function bar_freedom_spam_1(actor, npc)
	news_manager.send_tip(actor, "bar_freedom_spam_1", nil, "killer", nil, 509)
end
function bar_freedom_spam_2(actor, npc)
	news_manager.send_tip(actor, "bar_freedom_spam_2", nil, "killer", nil, 509)
end
function bar_freedom_spam_3(actor, npc)
	news_manager.send_tip(actor, "bar_freedom_spam_3", nil, "killer", nil, 509)
end
function bar_freedom_spam_4(actor, npc)
	news_manager.send_tip(actor, "bar_freedom_spam_4", nil, "killer", nil, 509)
end
function bar_ecolog_spam_1(actor, npc)
	news_manager.send_tip(actor, "bar_ecolog_spam_1", nil, "ecolog", nil, 503)
end
function bar_ecolog_spam_2(actor, npc)
	news_manager.send_tip(actor, "bar_ecolog_spam_2", nil, "ecolog", nil, 503)
end
function bar_ecolog_spam_3(actor, npc)
	news_manager.send_tip(actor, "bar_ecolog_spam_3", nil, "ecolog", nil, 503)
end
function bar_ecolog_spam_4(actor, npc)
	news_manager.send_tip(actor, "bar_ecolog_spam_4", nil, "ecolog", nil, 503)
end
function bar_ecolog_spam_5(actor, npc)
	if not has_alife_info("bar_heli_scene_volkodav_die") and not has_alife_info("bar_ecolog_saw_chase") then
		news_manager.send_tip(actor, "bar_freedom_chase", nil, "ecolog", nil, 503)
		db.actor:give_info_portion("bar_ecolog_saw_chase")
	end
end
function bar_ecolog_hit(actor, npc)
	news_manager.send_tip(actor, "bar_ecolog_hit", nil, "ecolog", nil, 503)
end
function bar_freedom_spam_5(actor, npc)
	if not has_alife_info("bar_heli_scene_volkodav_die") then
		news_manager.send_tip(actor, "bar_ecolog_escape", nil, "killer", nil, 509)
	end
end
function bar_freedom_angry_actor(actor,npc)
	if has_alife_info("bar_ecolog_crush_actor_enemy")
	then
		npc:set_relation(game_object.enemy, db.actor)
	end
end
function bar_freedom_defence_ecolog(actor,npc)
	news_manager.send_tip(db.actor, "bar_ecolog_attack", nil, "ecolog", nil, 503)
end
function bar_freedom_angry_actor_notify(actor,npc)
	if has_alife_info("bar_ecolog_crush_actor_enemy") then
		news_manager.send_tip(actor, "bar_freedom_attack_spy", 4, "killer", nil, 509)
	end
end
function bar_crush_heli_start(actor,npc)
	news_manager.send_tip(actor, "bar_ecolog_crush_start_heli", nil, "ecolog", nil, 503)
end
function rostok_kruglov_tip_1(actor,npc)
	news_manager.send_tip(actor, "rostok_kruglov_spam_1", nil, "ecolog", nil, 503)
end
function rostok_kruglov_tip_2(actor,npc)
	news_manager.send_tip(actor, "rostok_kruglov_spam_2", nil, "ecolog", nil, 503)
	level_tasks.add_location(597, "volkodav_location", "rostok_banda_volkodava")
end
function rostok_kruglov_attract_1(actor,npc)
	xr_sound.set_sound_play(npc, "kruglov_stop_enemy_1")
	local tips_sound = news_manager.send_tip_nosound(db.actor, "bar_freedom_chase", 0, "ecolog")
	if tips_sound ~= nil then
		--' Играем звук забитый
		tips_sound:play(db.actor, 0, sound_object.s2d)
	end
end
function rostok_kruglov_attract_2(actor,npc)
	xr_sound.set_sound_play(npc, "kruglov_stop_enemy_2",3)
	local tips_sound = news_manager.send_tip_nosound(db.actor, "rostok_kruglov_follow_2",3000, "ecolog")
	if tips_sound ~= nil then
		--' Играем звук забитый
		tips_sound:play(db.actor, 0, sound_object.s2d)
	end
end
function rostok_kruglov_ambush(actor,npc)
	xr_sound.set_sound_play(npc, "rostok_kruglov_help_5")
	local tips_sound = news_manager.send_tip_nosound(db.actor, "rostok_kruglov_follow_3", 0, "ecolog")
	if tips_sound ~= nil then
		--' Играем звук забитый
		tips_sound:play(db.actor, 0, sound_object.s2d)
	end
end
function bar_crush_heli_down(actor,npc)
	news_manager.send_tip(actor, "bar_ecolog_crush_heli_down", 1, "killer", nil, 509)
end
function bar_ecolog_crush_attract_actor(actor,npc)
	if not has_alife_info("bar_heli_scene_professor_die") then
		news_manager.send_tip(actor, "bar_ecolog_crush_attract_actor", nil, "ecolog")
	end
end
function bar_freedom_attack_attract_actor(actor,npc)
		news_manager.send_tip(actor, "bar_freedom_attack_attract_actor", nil, "killer")
	end
function bar_freedom_attack_start(actor,npc)
		if not has_alife_info("bar_freedom_defence_ecolog") then
			news_manager.send_tip(db.actor, "bar_freedom_attack", nil, "killer", nil, 509)
            db.actor:give_info_portion("bar_freedom_defence_ecolog")
		end
	end
function bar_arena_hit(actor, npc)
	local h = hit()
	h.power = 0.01
	h.direction = npc:direction()
	h.draftsman = db.actor
	h.impulse = 1
	h.type = hit.wound
	npc:hit(h)
end
function esc_hit_from_fox(actor, npc)
	local fox = level_object_by_sid (005)
	if fox == nil then
		return
	end
	local h = hit()
	h.power = 0.01
	h.direction = npc:direction()
	h.draftsman = fox
	h.impulse = 1
	h.type = hit.wound
	npc:hit(h)
end

function bar_territory_logic(actor, npc)
	local level = level.name()
	if 	level == "l05_bar" then
		if dialogs.actor_in_dolg(actor,npc) then
			if has_alife_info("bar_dolg_territory_kill") then
				news_manager.send_tip(actor, "bar_territory_dolg_kill", nil, "dolg", nil, 507)
				xr_gulag.setGulagEnemy("bar_dolg_general", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_veterans", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_bunker", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_zastava", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_zastava_2", db.actor)
				xr_gulag.setGulagEnemy("bar_visitors", db.actor)
				return
			end
			if has_alife_info("bar_dolg_territory_3_hit") then
				news_manager.send_tip(actor, "bar_territory_dolg_3_hit", nil, "dolg", nil, 507)
				xr_gulag.setGulagEnemy("bar_dolg_general", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_veterans", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_bunker", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_zastava", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_zastava_2", db.actor)
				return
			end
			if has_alife_info("bar_dolg_territory_2_hit") then
				news_manager.send_tip(actor, "bar_territory_dolg_2_hit", nil, "dolg", nil, 507)
				return
			end
			if has_alife_info("bar_dolg_territory_1_hit") then
				news_manager.send_tip(actor, "bar_territory_dolg_1_hit", nil, "dolg", nil, 507)
				return
			end
		else
			if has_alife_info("bar_dolg_territory_kill") then
				db.actor:give_info_portion("bar_territory_nodolg_kill")
				news_manager.send_tip(actor, "bar_territory_nodolg_kill", nil, "dolg", nil, 507)
				xr_gulag.setGulagEnemy("bar_dolg_general", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_veterans", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_bunker", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_zastava", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_zastava_2", db.actor)
				xr_gulag.setGulagEnemy("bar_visitors", db.actor)
				return
			end
			if has_alife_info("bar_dolg_territory_2_hit") then
				db.actor:give_info_portion("bar_territory_nodolg_2_hit")
				news_manager.send_tip(actor, "bar_territory_nodolg_2_hit", nil, "dolg", nil, 507)
				xr_gulag.setGulagEnemy("bar_dolg_general", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_veterans", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_bunker", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_zastava", db.actor)
				xr_gulag.setGulagEnemy("bar_dolg_zastava_2", db.actor)
				xr_gulag.setGulagEnemy("bar_visitors", db.actor)
				return
			end
			if has_alife_info("bar_dolg_territory_1_hit") then
				db.actor:give_info_portion("bar_territory_nodolg_1_hit")
				news_manager.send_tip(actor, "bar_territory_nodolg_1_hit", nil, "dolg", nil, 507)
				return
			end
		end
	end
	return
end

function bar_psih_come(actor, npc)
	news_manager.send_tip(actor, "bar_psih_come", nil, "barman")
end

function bar_actor_is_enemy(actor, npc)
			xr_gulag.setGulagEnemy("bar_dolg_general", db.actor)
			xr_gulag.setGulagEnemy("bar_dolg_veterans", db.actor)
			xr_gulag.setGulagEnemy("bar_dolg_bunker", db.actor)
			xr_gulag.setGulagEnemy("bar_visitors", db.actor)
end

function bar_actor_enemy_set (actor, npc)
    local dog = level_object_by_sid (509)
    if dog ~= nil then
       dog:set_relation (game_object.enemy, db.actor)
    end
end

function bar_arena_weapon_spawn ()

	local obj = level_object_by_sid (606)
	local spawn_items = {}

	for i = 1,100 do
		table.insert( spawn_items, "bandit_outfit")
	end

	local k,v = 0,0

	for k,v in pairs(spawn_items) do
		alife():create(v,
						obj:position(),
						obj:level_vertex_id(),
						obj:game_vertex_id())
	end
end

local function transfer_object_item(item)
    out_object:transfer_item(item, in_object)
end
function bar_arena_teleport ( actor, npc)

	inv_box_1 = level_object_by_sid (573)

	out_object = actor
    in_object  = inv_box_1
		actor:inventory_for_each(transfer_object_item)

	local spawn_items = {}

	if	has_alife_info("bar_arena_fight_1") then
		table.insert(spawn_items, "wpn_pm")
		table.insert(spawn_items, "ammo_9x18_pmm")
		table.insert(spawn_items, "ammo_9x18_pmm")
		table.insert(spawn_items, "wpn_knife")
	elseif	has_alife_info("bar_arena_fight_2") then
		table.insert(spawn_items, "wpn_mp5")
		table.insert(spawn_items, "ammo_9x19_pbp")
		table.insert(spawn_items, "wpn_knife")
	elseif	has_alife_info("bar_arena_fight_3") then
		table.insert(spawn_items, "wpn_bm16")
		table.insert(spawn_items, "ammo_12x70_buck")
		table.insert(spawn_items, "ammo_12x70_buck")
		table.insert(spawn_items, "wpn_knife")
	elseif	has_alife_info("bar_arena_fight_4") then
		table.insert(spawn_items, "wpn_ak74")
		table.insert(spawn_items, "ammo_5.45x39_ap")
		table.insert(spawn_items, "ammo_5.45x39_ap")
		table.insert(spawn_items, "wpn_knife")
		table.insert(spawn_items, "bandage")
		table.insert(spawn_items, "bandage")
	elseif	has_alife_info("bar_arena_fight_5") then
		table.insert(spawn_items, "wpn_abakan")
		table.insert(spawn_items, "ammo_5.45x39_ap")
		table.insert(spawn_items, "ammo_5.45x39_ap")
		table.insert(spawn_items, "ammo_5.45x39_ap")
		table.insert(spawn_items, "wpn_knife")
		table.insert(spawn_items, "bandage")
		table.insert(spawn_items, "medkit")
		table.insert(spawn_items, "svoboda_light_outfit")
	elseif	has_alife_info("bar_arena_fight_6") then
		table.insert(spawn_items, "wpn_groza")
		table.insert(spawn_items, "ammo_9x39_ap")
		table.insert(spawn_items, "ammo_9x39_ap")
		table.insert(spawn_items, "ammo_9x39_ap")
		table.insert(spawn_items, "wpn_knife")
		table.insert(spawn_items, "grenade_f1")
		table.insert(spawn_items, "specops_outfit")
	elseif	has_alife_info("bar_arena_fight_7") then
		table.insert(spawn_items, "wpn_knife")
		table.insert(spawn_items, "bandage")
		table.insert(spawn_items, "grenade_f1")
		table.insert(spawn_items, "grenade_f1")
		table.insert(spawn_items, "grenade_f1")
		table.insert(spawn_items, "grenade_f1")
	elseif	has_alife_info("bar_arena_fight_8") then
		table.insert(spawn_items, "wpn_g36")
		table.insert(spawn_items, "ammo_5.56x45_ap")
		table.insert(spawn_items, "ammo_5.56x45_ap")
		table.insert(spawn_items, "ammo_5.56x45_ap")
		table.insert(spawn_items, "ammo_5.56x45_ap")
		table.insert(spawn_items, "wpn_knife")
	end

	local k,v = 0,0

	for k,v in pairs(spawn_items) do
		alife():create(v,
						db.actor:position(),
						db.actor:level_vertex_id(),
						db.actor:game_vertex_id(),
						db.actor:id())
	end

end

function bar_arena_weapon_slot ()
	if	has_alife_info("bar_arena_fight_1") then
		db.actor:activate_slot(1)
	else
		db.actor:activate_slot(2)
	end
end

function bar_arena_teleport_2 ( actor, npc)

	  level.add_pp_effector ("blink.ppe", 234, false)

		db.actor:set_actor_position(patrol("t_walk_2"):point(0))
		local dir = patrol("t_look_2"):point(0):sub(patrol("t_walk_2"):point(0))
		db.actor:set_actor_direction(-dir:getH())

	inv_box_2 = level_object_by_sid (574)

	out_object = actor
    in_object  = inv_box_2
		actor:inventory_for_each(transfer_object_item)
end

function barman_give_extra_task (actor, npc)
	if has_alife_info ("agroprom_military_case_done") and not has_alife_info ("bar_darklab_document_start") then
		db.actor:give_info_portion("barman_job_1")
		return
	elseif has_alife_info ("bar_darklab_document_done") and not has_alife_info ("bar_x16_documents_start") then
		db.actor:give_info_portion("barman_job_2")
		return
	elseif has_alife_info ("bar_x16_documents_done") and not has_alife_info ("bar_deactivate_radar_start") then
		db.actor:give_info_portion("barman_job_3")
		return
	end
	return
end

function trader_extra_task (actor, npc)
	if has_alife_info ("esc_serious_talk") and not has_alife_info ("agroprom_military_case") then
		db.actor:give_info_portion("trader_job")
		return
	end
	return
end

function scientist_extra_task (actor, npc)
	if has_alife_info ("yan_find_scientist_done") and not has_alife_info ("yan_find_vasilyev_start") then
		db.actor:give_info_portion("scientist_job")
		return
	end
	return
end

function military_max_dead (actor, npc)
end

function military_lukash_dead (actor, npc)
end

function mil_courier_death (actor, npc)
    actor:give_info_portion ("mil_courier_dead")
    if has_alife_info("mil_leader_quest2_start") then
       if not has_alife_info("mil_courier_visited") then
          level_tasks.set_task_state (task.fail, "mil_courier_job", 1)
       end
       level_tasks.set_task_state (task.completed, "mil_courier_job", 2)
       level_tasks.set_task_state (task.completed, "mil_courier_job", 0)
    end
end

function mil_courier_quest_fail (actor, npc)
    if has_alife_info("mil_courier_quest") == false then return end
    level_tasks.set_task_state (task.fail, "mil_courier_job", 0)
    actor:give_info_portion ("mil_courier_quest_failed")
end

function mil_scull_news (actor, npc)
end

function mil_sniper_dead (actor, npc)
    if has_alife_info("mil_dolg_final_task") then
       level_tasks.remove_location (npc:story_id (), "mil_sniper_location")
    end
end

function mil_actor_enemy_set (actor, npc)
    local sniper = level_object_by_sid (704)
    if sniper ~= nil then
       sniper:set_relation (game_object.enemy, db.actor)
    end
    --xr_gulag.setGulagRelation ("mil_freedom", game_object.enemy, db.actor)
end


function mil_actor_enemy_reset (actor, npc)
    local sniper = level_object_by_sid (704)
    if sniper ~= nil then
       sniper:set_relation (game_object.neutral, db.actor)
    end
    --xr_gulag.setGulagRelation ("mil_freedom", game_object.neutral, db.actor)
end

function mil_bomb_explode (actor, npc)
    local source = nil
    local sim = alife ()
    if sim then
       local se_obj = sim:story_object (723)
       if se_obj then
          source = level.object_by_id(se_obj.id)
       end
    end

    if source == nil then
       --'abort ("Bomb with story id MIL_BOMB not found")
       return
    end

    local h = hit ();
    h.power = 1000000;
    h.direction = vector():set( 1, 0, 0 );
    h.impulse = 1;
    h.draftsman = source;
    h.type = hit.chemical_burn;
    source:hit (h);


end

function mil_set_alarm (actor, npc)
	printf("pl:millitary base is under attack!!!!!!!")
    actor:give_info_portion ("mil_freedom_under_attack")

    local skull = level_object_by_sid (708)
    if skull == nil then
       return
    end

    this.set_stalker_enemy (702, skull)     -- hit to Lukash
    this.set_stalker_enemy (707, skull)     -- hit to Max
    this.set_stalker_enemy (730, skull)     -- hit to Sniper1
    this.set_stalker_enemy (731, skull)     -- hit to Sniper2
    this.set_stalker_enemy (732, skull)     -- hit to Sniper3
end

function sar2_monolith_explode (actor, npc)
    local monolith = level_object_by_sid (1305)
    if monolith == nil then
       abort ("Object MONOLITH with SID 1305 not found")
    end
    local h = hit ();
    h.power = 1000;
    h.direction = vector():set( 1, 0, 0 );
    h.impulse = 1;
    h.draftsman = actor;
    h.type = hit.chemical_burn;
    monolith:hit (h);
end

function set_stalker_enemy (sid, draftsman)
    local npc = level_object_by_sid (sid)
    if npc == nil or npc:alive () == false then
       return
    end
    local h = hit ()
    h.power = 0
    h.direction = vector():set( 1, 0, 0 )
    h.impulse = 0
    h.draftsman = draftsman
    h.type = hit.strike
    npc:hit (h)
end



function mil_remove_cook_map_spot (actor, npc)
    level_tasks.remove_location (728, "mil_cook_location")
end

function mil_transfer_docs_to_ara (actor, npc)
    --local ara = level_object_by_sid (719)
    --local pavlik = level_object_by_sid (710)
    --if ara == nil or pavlik == nil or pavlik:object ("mil_courier_doc") == nil then
       --return
    --end
    --ara:transfer_item (pavlik:object ("mil_courier_doc"), pavlik)
end

function mil_emeny_nearest (actor, npc)
    if actor == nil or actor:alive () == false then
       return
    end

    local gulag = xr_gulag.get_gulag_by_name ("mil_freedom")
    if gulag == nil then return end

    if gulag:npc_is_enemy_to_anybody(actor) then
       actor:give_info_portion ("mil_enemy_nearest")
    end
end


function mil_cap_mapspot (actor, npc)
    local cap = level_object_by_sid (724)
    if cap == nil or cap:alive () == false then
       return
    end

    if not has_alife_info("mil_fblockpost_spot_set") then
       actor:give_info_portion ("mil_fblockpost_spot")
       actor:give_info_portion ("mil_fblockpost_spot_set")
       level_tasks.add_location (724, "mil_fblockpost_location")
    end
end

function mil_cap_mapspot_remove (stalker1, stalker2)
    if has_alife_info("mil_fblockpost_spot") then
       level_tasks.remove_location_safe (724, "mil_fblockpost_location")
       db.actor:disable_info_portion ("mil_fblockpost_spot_remove")
    end
end

function set_actor_enemy_for_freedom (actor, npc)
    xr_gulag.setGulagEnemy ("mil_freedom", actor)
end


-- GARBAGE

function gar_send_dolg_warning()
	if db.actor then
		if xr_gulag.getGulagPopulation("gar_dolg") > 0 then
			news_manager.send_tip(db.actor, "gar_dolg_warning", 0, "dolg")
		end
	end
end


-------------------------------------------------------------------------------------
-- Функции для DarkValley
-------------------------------------------------------------------------------------
function val_escort_guard_death(actor, npc)
    --printf("xr_effects <val_escort_guard_death>: %s.", npc:name())
    local idx = string.sub(npc:name(), -1)
	local t = db.storage[npc:id()].death

    actor:disable_info_portion("val_escort_guard" .. idx .. "_combat")
    actor:give_info_portion("val_escort_guard" .. idx .. "_dead")

	if t ~= nil and t.killer == actor:id() then
        actor:give_info_portion("val_escort_actor_helped")
	end
    --"on_info     = %-val_escort_guard1_combat +val_escort_guard1_dead%\n" ..
    --"on_info2    = {=killed_by_actor} %+val_escort_actor_helped%\n" ..
end

function val_escort_guard_hit(actor, npc)
    local idx = string.sub(npc:name(), -1)
	local t = db.storage[npc:id()].hit

	if t ~= nil then
	    if t.who == actor:id() then
            actor:give_info_portion("val_escort_combat")
            actor:give_info_portion("val_escort_actor_helped")
            if not has_alife_info("val_escort_nap1_start_combat") then
                actor:give_info_portion("val_escort_captive_enemy")
            end
	    else
	        local npc1 = level_object_by_sid(406)
	        if npc1 ~= nil and t.who == npc1:id() then
                actor:give_info_portion("val_escort_combat")
                actor:give_info_portion("val_escort_nap1_start_combat")
	        --else
            --    actor:give_info_portion("val_escort_guard" .. idx .. "_combat")
	        end
	    end
	end
    --"on_info     = {=hit_by_actor} %+val_escort_combat +val_escort_actor_helped%, %+val_escort_guard1_combat%\n" ..
    --"on_info2    = {+val_escort_combat -val_escort_nap1_start_combat} %+val_escort_captive_enemy%\n" ..
    --"on_info3    = {=hitted_by(406) -val_escort_captive_enemy} %+val_escort_nap1_start_combat%\n" ..
end

function val_escort_guard_combat(actor, npc)
    local idx = string.sub(npc:name(), -1)

    actor:give_info_portion("val_escort_guard" .. idx .. "_combat")

    if npc:see(actor) then
        if not has_alife_info("val_escort_nap1_start_combat") then
            actor:give_info_portion("val_escort_captive_enemy")
        end
        actor:give_info_portion("val_escort_combat")
    end
    --"on_info     = %+val_escort_guard1_combat%\n" ..
    --"on_info2    = {=see_actor -val_escort_nap1_start_combat -val_escort_captive_enemy} %+val_escort_captive_enemy%\n" ..
    --"on_info3    = {=see_actor -val_escort_combat} %+val_escort_combat% ;remark@val_escort_guard1_fight\n" ..
end

function val_escort_guard_free(actor, npc)
    --local idx = string.sub(npc:name(), -1)

    actor:give_info_portion("val_escort_guards_free")
    actor:disable_info_portion("val_escort_guard" .. string.sub(npc:name(), -1) .. "_combat")
    --"on_info             = %+val_escort_guards_free -val_escort_guard1_combat%\n"
end


-------------------------------------------------------------------------------------
-- kill
-------------------------------------------------------------------------------------
function killactor (actor, npc)
    npc:set_relation (game_object.enemy, actor)
    --actor:give_info_portion ("mil_bodyguard_kill")
end

function kill(actor, npc)
	npc:kill( npc )
end


-------------------------------------------------------------------------------------
-- Функции для Агропрома
-------------------------------------------------------------------------------------

function agr_krot_sos( actor, npc )
	news_manager.send_tip( actor, "tips_agr_krot_sos", 0, "krot", 10000 )
end

function agr_krot_sos_1_2( actor, npc )
	if not has_alife_info( "agr_help_krot_start" ) and
	   not has_alife_info( "agr_help_krot_done" ) and
	   not has_alife_info( "agr_krot_skirmish_start" ) and
	   not has_alife_info( "agr_krot_dead" ) and not(agroprom_tasks.agr_actor_enemy())
	then
		actor:give_info_portion( "agr_help_krot_start" )
		news_manager.send_tip( actor, "tips_agr_krot_sos1", 0, "krot", 10000 )

		if has_alife_info( "agr_help_stalkers_defence_dead" ) then
			news_manager.send_tip( actor, "tips_agr_krot_sos2", 0, "krot", 10000 )
		end
	end
end

function agr_knockdown ()
	local snd_obj = xr_sound.get_safe_sound_object([[affects\tinnitus3a]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
	level.add_cam_effector("camera_effects\\earthquake.anm", 1974, false, "")
end

function agr_contuz (actor, npc)
		local sound_obj_l		= xr_sound.get_safe_sound_object( [[affects\psy_blackout_l]] )
        local sound_obj_r		= xr_sound.get_safe_sound_object( [[affects\psy_blackout_r]] )

		sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
end

function agr_cam_effect ()
	level.add_cam_effector2("camera_effects\\agroprom_doctor_cam.anm", 123, false, "")

end

function agr_weapon(actor, npc)
	local actor = db.actor
	if 	actor ~= nil then actor:activate_slot(2)
	end
end
function agr_hold_enemy(actor, npc)
	local gulag = xr_gulag.get_gulag_by_name("agr_factory_hold")

	local h  = hit()
	h.power     = 0.01
	h.direction = vector():set( 1, 0, 0 )
	h.draftsman = actor
	h.impulse   = 1
	h.type      = hit.wound

	for k, v in pairs(gulag.Object) do
		if v ~= true and level.object_by_id( k ) ~= nil then
			v:hit( h )
		end
	end
end
---------------------------------------------------------
-- PRIPYAT
---------------------------------------------------------
function pri_zombied_in_combat_inc(actor, npc)
    gulag_pripyat.zombied_in_combat[npc:name()] = true
    --printf("effect <pri>: zombied in combat(%s) inc.", npc:name())
end

function pri_zombied_in_combat_dec(actor, npc)
    gulag_pripyat.zombied_in_combat[npc:name()] = nil
    --printf("effect <pri>: zombied in combat(%s) dec.", npc:name())
end

function pri_drop_rpg_ammo(actor, npc)
    local item = npc:object("ammo_og-7b")
    if item then
        npc:drop_item(item)
    else
        printf("xr_effects <pri_drop_rpg_ammo>: there is no [ammo_og-7b] in [%s] inventory.", npc:name())
    end
end

function pri_give_ammo_og7b(actor, npc)
    alife():create("ammo_og-7b", npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id())
    alife():create("ammo_og-7b", npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id())
end

---------------------------------------------------------
-- DeadCity
---------------------------------------------------------


---------------------------------------------------------
-- Sarcofag + Monolith
---------------------------------------------------------
function osoznanie_call(actor, npc)
	news_manager.send_tip(db.actor, "o_soznanie_text", 0, "o_soznanie")
end

function death_monolith_ghosts(actor, npc)
	db.actor:give_info_portion("sar2_death_2")
	db.actor:give_info_portion("sar2_death_5")
	db.actor:give_info_portion("sar2_death_7")
	db.actor:give_info_portion("sar2_death_9")
	db.actor:give_info_portion("sar2_death_16")
	db.actor:give_info_portion("sar2_death_25")
	db.actor:give_info_portion("sar2_death_26")
	db.actor:give_info_portion("sar2_death_27")
	db.actor:give_info_portion("sar2_death_28")
	db.actor:give_info_portion("sar2_death_29")
	db.actor:give_info_portion("sar2_death_30")
	db.actor:give_info_portion("sar2_death_35")
	db.actor:give_info_portion("sar2_death_36")
	db.actor:give_info_portion("sar2_death_37")
	db.actor:give_info_portion("sar2_death_50")
	db.actor:give_info_portion("sar2_death_51")
	db.actor:give_info_portion("sar2_death_54")
	db.actor:give_info_portion("sar2_death_57")
	db.actor:give_info_portion("sar2_death_58")
	db.actor:give_info_portion("sar2_death_59")
	db.actor:give_info_portion("sar2_death_60")
end

---------------------------------------------------------
-- Sarcofag2
---------------------------------------------------------
--[[
local sar2_heroes_list = {
    "sar2_tutorial_wounded",
    "sar2_stalker_freeman",
    "sar2_doctor",
    "sar2_dram_novice",
    "sar2_bandit_novice",
    "sar2_ranger",
    "sar2_bandit_general",
    "sar2_zombied_novice",
    "sar2_fox",
    "sar2_seriy",
    "sar2_ratcatcher",
    "sar2_wolf",
    "sar2_ecolog_professor",
    "sar2_psih",
    "sar2_stalker_explorer",
    "sar2_hellcar",
    "sar2_fanat",
    "sar2_gar_dolg_blokpost_commander",
    "sar2_krot",
    "sar2_bandit_borov",
    "sar2_arena_manager",
    "sar2_zastava_commander_1",
    "sar2_bandit_leader",
    "sar2_svoboda_zombi_stalker",
    "sar2_monolith_regular2",
    "sar2_monolith_regular",
    "sar2_bandit_veteran",
    "sar2_soldier_regular",
    "sar2_killer_regular",
    "sar2_killer_informator",
    "sar2_svoboda_cook",
    "sar2_svoboda_bodyguard",
    "sar2_svoboda_stukach",
    "sar2_esc_soldier_commander",
    "sar2_zombied_stalker",
    "sar2_soldier_specnaz",
    "sar2_killer_specnaz",
    "sar2_dolg_specnaz_cherep",
    "sar2_svoboda_blockpost_leader",
    "sar2_dolg_guard_commander",
    "sar2_dolg_ivancov",
    "sar2_dolg_petrenko",
    "sar2_dolg_leader",
    "sar2_svoboda_attack_commander",
    "sar2_crazy_veterans_lucky",
    "sar2_svoboda_engineer",
    "sar2_svoboda_leader",
    "sar2_svoboda_trader",
    "sar2_svoboda_master_max",
    "sar2_monolith_specnaz2",
    "sar2_monolith_specnaz",
    "sar2_svoboda_master_ugrumiy",
    "sar2_arena_savage",
    "sar2_zombied_exo",
    "sar2_monolith_leader",
    "sar2_killer_ambush_tiran",
    "sar2_killer_exo",
    "sar2_soldier_stalker",
    "sar2_monolith_exo",
    "sar2_monolith_exo2"
}
--]]

local sar2_heroes_sel_number, sar2_heroes_number = 0, 60
local sar2_heroes_count, sar2_heroes_max_count = 0, 6
local sar2_hero_next_free_id = 1
local sar2_heroes_sel = {}

function sar2_scene_start(actor, npc)
    printf("effects <sar2>: scene start initializing.")
    local i = 0

    sar2_heroes_sel = {}
    sar2_heroes_sel_number = 0
    sar2_hero_next_free_id = 1
    for i = 1, sar2_heroes_number do
        if has_alife_info("sar2_death_" .. i) then
            table.insert(sar2_heroes_sel, i)
            sar2_heroes_sel_number = sar2_heroes_sel_number + 1
        end
    end

    print_table(sar2_heroes_sel)
    printf("effects <sar2>: scene end initializing.")
end

function sar_hero_dead(actor, npc)
    actor:give_info_portion("sar2_monolith_rock")

    if sar2_heroes_count > 0 then
        sar2_heroes_count = sar2_heroes_count - 1
    end

    if sar2_heroes_count == 0 and sar2_hero_next_free_id > sar2_heroes_sel_number then
        actor:give_info_portion("sar2_monolith_end")
    end

    printf("effects <sar2>: hero dead.")
end

function sar2_hero_spawn(actor, npc)
    printf("effects <sar2>: hero count - %d, max - %d.", sar2_heroes_count, sar2_heroes_max_count)
    local c = sar2_heroes_max_count - sar2_heroes_count

    -- check if we need to spawn stalkers
    if sar2_hero_next_free_id <= sar2_heroes_sel_number and c > 0 then
        local i, n = 0, math.min(sar2_hero_next_free_id + c - 1, sar2_heroes_sel_number)

        for i = sar2_hero_next_free_id, n do
            actor:give_info_portion("sar2_spawn_" .. sar2_heroes_sel[i])
        end

        if n >= sar2_hero_next_free_id then
            printf("effects <sar2>: hero spawn.")
        end

        sar2_heroes_count = sar2_heroes_count + (n - sar2_hero_next_free_id + 1)
        sar2_hero_next_free_id = n + 1
    end
end

-------------------------------------------------------------------------------------
-- Функции для работы с вертолётами
-------------------------------------------------------------------------------------

function heli_set_enemy_actor(actor, npc)
	local st = db.storage[npc:id()]
	if not st.combat.enemy_id and actor:alive() then
		st.combat.enemy_id = actor:id()

		heli_snd.play_snd( st, heli_snd.snd_see_enemy, 1 )
	end
end

function heli_set_enemy(actor, npc, p)
	local st  = db.storage[npc:id()]
	local obj = level_object_by_sid( p[1] )

	if not st.combat.enemy_id and obj:alive() then
		st.combat.enemy_id = obj:id()

		heli_snd.play_snd( st, heli_snd.snd_see_enemy, 1 )
	end
end

function heli_clear_enemy(actor, npc)
    db.storage[npc:id()].combat:forget_enemy()
end

function heli_start_flame(actor, npc)
	bind_heli.heli_start_flame( npc )
end

function heli_die(actor, npc)
	bind_heli.heli_die( npc )
end


-------------------------------------------------------------------------------------
-- Функции для работы с погодными эффектами
-------------------------------------------------------------------------------------
function start_small_reject (actor, npc)
    level.set_weather_fx ("surge_day")
	level.add_pp_effector ("vibros_p.ppe", 1974, false)
	this.aes_earthshake (npc)
    --set_postprocess ("scripts\\postprocess1.ltx")
end

function start_full_reject (actor, npc)
    level.set_weather_fx ("surge_day")
    level.remove_pp_effector (1974)
    level.add_pp_effector ("vibros.ppe", 1974, false)
    --set_postprocess ("scripts\\postprocess.ltx")
end


function aes_grenade_explode (actor, npc)
    local obj = level_object_by_sid (1101)
    if obj == nil then return end
    local h = hit ();
    h.power = 1000;
    h.direction = vector():set (1, 0, 0);
    h.impulse = 1;
    h.draftsman = obj;
    h.type = hit.chemical_burn;
    obj:hit (h);
end

function aes_kill_actor (actor, npc)
    if actor ~= nil and actor.health > 0 then
       actor:kill (actor)
    end
end

function set_sidorovich_animation (npc)
    local sidor = level_object_by_sid (1118)
    if sidor == nil then
       abort ("SIDOROVICH NOT FOUND !!!")
    end
    --sidor:clear_animations ()
    sidor:play_cycle ("wonder", true)
    --sidor:add_animation ("idle_looped", true, false)
end

function aes_zombie_hit1 (npc)
    --local npc = level_object_by_sid (1119)
    --local force = vector ():set (0, 0, 0.02)
    --local pshell = npc:get_physics_shell ()

    --local joint = pshell:get_joint_by_bone_name ("head2")
    --joint:set_max_force_and_velocity (0.5 + math.random (), 0.1 * -1, 0)
    --joint:set_max_force_and_velocity (0.5 + math.random(), 0.1 * -1,  2)

    --local npc = level_object_by_sid (1119)
    --local force = vector ():set (0, 0, 50)
    --local pshell = npc:get_physics_shell ()
    --local element = pshell:get_element_by_bone_name ("foot_right")
    --element:apply_force (force.x, force.y, force.z)

    -- foot_right, foot_left, left_hand, right_hand


    --local dir = npc:direction ()
    --dir.y = 0.0
    --dir:normalize ()
	--npc:set_const_force (dir, 2000, 3)

    --npc = level_object_by_sid (1120)
    --dir = npc:direction ()
    --dir.y = 0.0
    --dir:normalize ()
	--npc:set_const_force (dir, 2000, 3)

    --npc = level_object_by_sid (1121)
    --dir = npc:direction ()
    --dir.y = 0.0
    --dir:normalize ()
	--npc:set_const_force (dir, 2000, 3)

    --npc = level_object_by_sid (1122)
    --dir = npc:direction ()
    --dir.y = 0.0
    --dir:normalize ()
	--npc:set_const_force (dir, 2000, 3)

    --npc = level_object_by_sid (1123)
    --dir = npc:direction ()
    --dir.y = 0.0
    --dir:normalize ()
	--npc:set_const_force (dir, 2000, 3)
end

function aes_zombie_hit2 (npc)
    --local npc = level_object_by_sid (1119)
    --local force = vector ():set (0, 0, 50)
    --local pshell = npc:get_physics_shell ()
    --local element = pshell:get_element_by_bone_name ("foot_right")
    --element:apply_force (force.x, force.y, force.z)


    --local npc = level_object_by_sid (1119)
    --local force = vector ():set (0, 0, 0.02)
    --local pshell = npc:get_physics_shell ()

    --local joint = pshell:get_joint_by_bone_name ("head2")
    --joint:set_max_force_and_velocity (0.5 + math.random (), 0.1 * 1, 0)
    --joint:set_max_force_and_velocity (0.5 + math.random(), 0.1 * 1,  2)
                --self.dir_x_axis  = self.dir_x_axis * (-1)
                --self.dir_z_axis = self.dir_z_axis * (-1)
                --self.time    = device():time_global() + math.random(800, 1000)
        --end

    --local element = pshell:get_element_by_bone_name ("foot_right")
    --element:apply_force (force.x, force.y, force.z)
    --local npc = level_object_by_sid (1119)
    --local dir = npc:direction ()
    --dir.y = 0.0
    --dir.x = -dir.x
    --dir.z = -dir.z
    --dir:normalize ()
	--npc:set_const_force (dir, 2000, 3)

    --npc = level_object_by_sid (1120)
    --dir = npc:direction ()
    --dir.y = 0.0
    --dir.x = -dir.x
    --dir.z = -dir.z
    --dir:normalize ()
	--npc:set_const_force (dir, 2000, 3)

    --npc = level_object_by_sid (1121)
    --dir = npc:direction ()
    --dir.y = 0.0
    --dir.x = -dir.x
    --dir.z = -dir.z
    --dir:normalize ()
	--npc:set_const_force (dir, 2000, 3)

    --npc = level_object_by_sid (1122)
    --dir = npc:direction ()
    --dir.y = 0.0
    --dir.x = -dir.x
    --dir.z = -dir.z
    --dir:normalize ()
	--npc:set_const_force (dir, 2000, 3)

    --npc = level_object_by_sid (1123)
    --dir = npc:direction ()
    --dir.x = -dir.x
    --dir.z = -dir.z
    --dir.y = 0.0
    --dir:normalize ()
	--npc:set_const_force (dir, 2000, 3)
end

-- постпроцесс и влияние удара в морду
function aes_earthshake (npc)
	local snd_obj = xr_sound.get_safe_sound_object([[ambient\earthquake]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
	level.add_cam_effector("camera_effects\\earthquake.anm", 1974, false, "")
    --set_postprocess ("scripts\\earthshake.ltx")
end

function vovan_camera_test (npc)
	level.add_cam_effector("camera_effects\\test.anm", "")
end
-------------------------------------------------------------------------------------
-- Функции для Янтаря
----------------------------------------------------------------------------------
function yan_actor_sleep (actor, npc)
	db.actor:set_actor_position(patrol("yan_actor_sleep"):point(0))
	local dir = patrol("yan_actor_sleep"):point(1):sub(patrol("yan_actor_sleep"):point(0))
	db.actor:set_actor_direction(-dir:getH())
end

function yan_actor_sleep_1 (actor, npc)
	db.actor:set_actor_position(patrol("yan_actor_sleep_1"):point(0))
	local dir = patrol("yan_actor_sleep_1"):point(1):sub(patrol("yan_actor_sleep_1"):point(0))
	db.actor:set_actor_direction(-dir:getH())
end

function yan_dream_voices (actor, npc)
        local sound_obj_l		= xr_sound.get_safe_sound_object( [[characters_voice\scenario\yantar\dream_talk_l]] )
        local sound_obj_r		= xr_sound.get_safe_sound_object( [[characters_voice\scenario\yantar\dream_talk_r]] )

		sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
    als_messages.yan_dream_voices_dialog()
end

function yan_gluk (actor, npc)

		local sound_obj_l		= xr_sound.get_safe_sound_object( [[affects\psy_blackout_l]] )
        local sound_obj_r		= xr_sound.get_safe_sound_object( [[affects\psy_blackout_r]] )

		sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
	level.add_cam_effector("camera_effects\\earthquake.anm", 1974, false, "")

end
function x18_gluk (actor, npc)
		level.add_pp_effector ("blink.ppe", 234, false)
		local sound_obj_l		= xr_sound.get_safe_sound_object( [[affects\psy_blackout_l]] )
        local sound_obj_r		= xr_sound.get_safe_sound_object( [[affects\psy_blackout_r]] )
        local snd_obj			= xr_sound.get_safe_sound_object( [[affects\tinnitus3a]] )
		snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
	level.add_cam_effector("camera_effects\\earthquake.anm", 1974, false, "")

end



function yan_sleep_not_relocate (actor, npc)
		db.actor:actor_sleep(0, 180)
end
function yantar_kruglov_talk(actor,npc)
	xr_sound.set_sound_play(npc, "rostok_kruglov_help_6")
end

function yantar_professor_spam_1 (actor, npc)
    news_manager.send_tip(db.actor, "general_ecolog_tip_1", nil, "saharov", nil, 902)
end

function yantar_professor_spam_2 (actor, npc)
    news_manager.send_tip(db.actor, "general_ecolog_tip_2", nil, "saharov", nil, 902)
end

function yantar_vasilyev_spam (actor, npc)
    news_manager.send_tip(db.actor, "storyline_vasilyev_tip", nil, "ecolog", nil, 903)
end
function yan_saharov_message (actor, npc)
    news_manager.send_tip(db.actor, "yan_saharov_message", nil, "saharov", nil, 902)
    db.actor:give_info_portion("labx16_find")
end

function yan_saharov_message_2 (actor, npc)
    news_manager.send_tip(db.actor, "yan_saharov_message_2", nil, "saharov", nil, 902)
end
function yan_saharov_message_3 (actor, npc)
    news_manager.send_tip(db.actor, "yan_saharov_message_3", nil, "saharov", nil, 902)
end
function yan_ghost_pda (actor, npc)
    if has_alife_info("agr_gunslinger_flash_have") then
        db.actor:give_info_portion("yan_provodnik_spawn")
    end
    news_manager.send_tip(db.actor, "storyline_ghost_tip", nil, "wolf")
end

function start_yantar_dream(actor, npc)
	game.start_tutorial("yantar_dream")
end

function end_yantar_dream(actor, npc)
	db.actor:give_info_portion("yantar_find_ghost_task_start")
end
-----------------------------radar
function rad_sos_spam(actor, npc)
	news_manager.send_tip(actor, "tips_rad_sos_suicide", nil, "stalker", nil, 1004)
end


function monolith_generator_hit (actor, npc)
    printf ("ON GENERATOR HIT !!!")
end


function start_x18_dream(actor, npc)
	game.start_tutorial("x18_dream")
end
function end_x18_dream(actor, npc)
	db.actor:give_info_portion("dar_x18_dream")
end

function aes_final_movie(actor, npc)
	game.start_tutorial("mov_refuse_osoznanie")
end
------------------------------------------------------------------------------------
-- Функции для Радара
------------------------------------------------------------------------------------
function rad_psi_hit (actor, npc)
	level.add_pp_effector ("radar_psi.ppe", 2006, false)
end

function start_radar_dream(actor, npc)
	game.start_tutorial("radar_dream")
end

function end_radar_dream(actor, npc)
	db.actor:give_info_portion("bun_patrol_start")
end
------------------------------------------------------------------------------------
-- Функции для саркофага
------------------------------------------------------------------------------------
function destroy_monolith_generator(actor, npc)
    local source = nil
    local sim = alife()
    if sim then
       local se_obj = sim:story_object(1305)
       if se_obj then
          source = level.object_by_id(se_obj.id)
       end
    end

    if source == nil then
       abort ("MONOLITH GENERATOR story id 1305 not found")
       return
    end

    local h = hit ();
    h.power = 1000000;
    h.direction = vector():set( 1, 0, 0 );
    h.impulse = 1;
    h.draftsman = source;
    h.type = hit.chemical_burn;
    source:hit (h);
end

function sar_monolith_miracle(actor, npc)
	--' Убил лидеров группировок
	if has_alife_info("mil_lukash_dead") and
	   has_alife_info("bar_voronin_dead")
	then
		game.start_tutorial("mov_desire_3")
		return
	end

	--' Много денег
	if db.actor:money() >= 50000 then
		game.start_tutorial("mov_desire_2")
		return
	end

	--' Хорошая репутация
	if db.actor:character_reputation() >= 1000 then
		game.start_tutorial("mov_desire_1")
		return
	end

	--' плохая репутация
	if db.actor:character_reputation() <= -1000 then
		game.start_tutorial("mov_desire_4")
		return
	end

	game.start_tutorial("mov_desire_5")
end

function game_credits(actor, npc)
	db.gameover_credits_started = true
	game.start_tutorial("credits_seq")
end

function game_over(actor, npc)
	if db.gameover_credits_started ~= true then
		return
	end
	local c = get_console()
--	c:execute("disconnect")
	printf("main_menu on console command is executed")
	c:execute("main_menu on")
end

function after_credits(actor, npc)
	if db.gameover_credits_started ~= true then
		return
	end
	local c = get_console()
	c:execute("disconnect")
end


function pri_game_over(actor, npc)
	local c = get_console()
--	c:execute("disconnect")
	printf("main_menu on console command is executed")
	c:execute("main_menu on")
end

function esc_init_dialod ()
	local trader = level_object_by_sid(003)
	db.actor:run_talk_dialog(trader)
end

function oso_init_dialod ()
	-- local oso = level_object_by_sid(1307)
	-- db.actor:run_talk_dialog(oso)
end
-- DELME:only for presentation!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

function actor_inventory_by_levels ()
	local level = level.name()
    local spawn_items = {}
    local start_point = ""

	if level == "l03_agroprom" then
		start_point = "agr_start_actor"
	elseif level == "l05_bar" then
		start_point = "bar_way_if_reject_to_gar"
	elseif level == "l08_yantar" then
		start_point = "yan_start_actor"
	elseif 	level == "l11_pripyat" then
		start_point = "pri_way_if_reject_to_rad"
	end
	db.actor:set_actor_position(patrol(start_point):point(0))
	local dir = patrol(start_point):point(1):sub(patrol(start_point):point(0))
	db.actor:set_actor_direction(-dir:getH())

end

function presentation_tutorial ()

end

function presentation_task ()

end






function change_leader(actor, npc)
	if xr_gulag.getGulagPopulation(823) == 0 then
		db.actor:give_info_portion("pri_followers_all_dead")
	end
end

function on_tutor_gameover_stop()
	local c = get_console()
--	c:execute("disconnect")
	printf("main_menu on console command is executed")
	c:execute("main_menu on")
end

-- LAST STALKER
function esc_projectors_on()
	als_projectors.projectors_esc_on()
end

function esc_projectors_off()
	als_projectors.projectors_esc_off()
end

function marsh_projectors_on()
	als_projectors.projectors_marsh_on()
end

function marsh_projectors_off()
	als_projectors.projectors_marsh_off()
end

function sor_projectors_on()
	als_projectors.projectors_sor_on()
end

function sor_projectors_off()
	als_projectors.projectors_sor_off()
end

function mil_projectors_on()
	als_projectors.projectors_mil_on()
end

function mil_projectors_off()
	als_projectors.projectors_mil_off()
end

function tv_day()
	als_barman_tv.tv_day()
end

function tv_night()
	als_barman_tv.tv_night()
end

function tv_gold()
	als_barman_tv.tv_gold()
end

function tv_no_one()
	als_barman_tv.tv_no_one()
end

function agru_lamp_off_00()
	local obj = alife():story_object(20030)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	sound_lamp_off()
	end
end

function agru_lamp_off_01()
	local obj = alife():story_object(20031)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	sound_lamp_off()
	end
end

function agru_lamp_off_02()
	local obj = alife():story_object(20032)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	sound_lamp_off()
	end
end

function agru_lamp_off_03()
	local obj = alife():story_object(20033)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	sound_lamp_off()
	end
end

function agru_lamp_off_04()
	local obj = alife():story_object(20034)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	sound_lamp_off()
	end
end

function agru_lamp_off_05()
	local obj = alife():story_object(20035)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	sound_lamp_off()
	end
end

function agru_lamp_off_06()
	local obj = alife():story_object(20036)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	sound_lamp_off()
	end
end

function agru_lamp_off_07()
	local obj = alife():story_object(20037)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	sound_lamp_off()
	end
end

function agru_lamp_off_08()
	local obj = alife():story_object(20038)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	sound_lamp_off()
	end
end

function agru_lamp_off_09()
	local obj = alife():story_object(20039)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	sound_lamp_off()
	end
end

function agru_lamp_off_10()
	local obj = alife():story_object(20040)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	sound_lamp_off()
	end
end

function agru_lamp_off_11()
	local obj = alife():story_object(20041)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	sound_lamp_off()
	end
end

function agru_lamp_off_12()
	local obj = alife():story_object(20042)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	sound_lamp_off()
	end
end

function agru_lamp_off_13()
	local obj = alife():story_object(20043)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	sound_lamp_off()
	end
end

function agru_lamp_on()
	als_on_off_switch.agru_lamp_on()
	sound_lamp_off()
end

function sound_lamp_off(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[material\metal_box\collide\big_metal_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function val_alcohol_on()
	als_on_off_switch.val_alcohol_on()
end

function teuton_whiskey_switch()
	als_on_off_switch.teuton_whiskey_switch()
end

--винтовка Хьюго
function del_hugo_svd()
	als_on_off_switch.del_hugo_svd()
end

function red_bulldog_on()
	als_on_off_switch.red_bulldog_on()
end

function garfirst2esc_jump()
	-- db.actor:disable_info_portion("blabla_init_dialog")
	xr_effects.enable_ui(db.actor, nil)
local point = patrol("garfirst2esc_jump_walk")
local look = patrol("garfirst2esc_jump_look")
	db.actor:set_actor_position(point:point(0))
local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

function esc2atp_jump()
	-- db.actor:disable_info_portion("blabla_init_dialog")
	xr_effects.enable_ui(db.actor, nil)
local point = patrol("esc2atp_jump_walk")
local look = patrol("esc2atp_jump_look")
	db.actor:set_actor_position(point:point(0))
local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

function atp2esc_jump()
	-- db.actor:disable_info_portion("blabla_init_dialog")
	xr_effects.enable_ui(db.actor, nil)
local point = patrol("atp2esc_jump_walk")
local look = patrol("atp2esc_jump_look")
	db.actor:set_actor_position(point:point(0))
local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

function dc2gen_jump()
	-- db.actor:disable_info_portion("blabla_init_dialog")
	xr_effects.enable_ui(db.actor, nil)
local point = patrol("dc2gen_jump_walk")
local look = patrol("dc2gen_jump_look")
	db.actor:set_actor_position(point:point(0))
local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

function obscure_effects(actor, npc)
    local sound_obj_l		= xr_sound.get_safe_sound_object([[ambient\horror\obscure_horror_l]])
	local sound_obj_r		= xr_sound.get_safe_sound_object([[ambient\horror\obscure_horror_r]])

	sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
	sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
	level.add_pp_effector ("obscure_comming.ppe", 58000, false)
end

function obscure_sound(actor, npc)
	local sound_obj_l		= xr_sound.get_safe_sound_object( [[ambient\horror\obscure_horror_l]] )
	local sound_obj_r		= xr_sound.get_safe_sound_object( [[ambient\horror\obscure_horror_r]] )

	sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
	sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
end

function kill_actor_by_knife(actor, npc)
    if actor ~= nil and actor.health > 0 then
       actor:kill (actor)
	   sound_knife_strike()
    end
end

function sound_knife_strike(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[weapons\knife_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function kill_actor_by_svd(actor, npc)
    if actor ~= nil and actor.health > 0 then
       actor:kill (actor)
	   sound_svd_strike()
    end
end

function kill_actor_by_electroshock(actor, npc)
    if actor ~= nil and actor.health > 0 then
       actor:kill(actor)
	   sound_electroshock()
    end
end

function electroshocker_act(actor, npc)
    if actor ~= nil and actor.health > 0 then
       electric_shock()
	   sound_electroshock()
    end
end

function electric_shock()
	local h = hit()
		h.draftsman = db.actor
		h.type = hit.shock
		h.power = 2.5
		db.actor:hit(h)
end

function sound_electroshock(npc)
	level.add_pp_effector ("blink.ppe", 234, false)
	local snd_obj = xr_sound.get_safe_sound_object([[anomaly\electra_blast]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function sound_svd_strike(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[weapons\svd_shoot]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function sound_svd_strike_quiet(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[weapons\svd_shoot]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 0.1)
end

function kill_actor_by_mine_shot(actor, npc)
    if actor ~= nil and actor.health > 0 then
       actor:kill (actor)
	   sound_mine_shot()
    end
end

function sound_mine_shot(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[weapons\f1_explode]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_negotiations_1(npc)
  als_messages.esc_negotiations_1_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\own_stoy_low]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_negotiations_2(npc)
  als_messages.esc_negotiations_2_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\own_stoyu_nachalnik]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_negotiations_3(npc)
  als_messages.esc_negotiations_3_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\own_ghdi_low]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_see_demon_girl(actor, npc)
        local sound_obj_l		= xr_sound.get_safe_sound_object( [[ambient\horror\esc_see_demon_girl_l]] )
        local sound_obj_r		= xr_sound.get_safe_sound_object( [[ambient\horror\esc_see_demon_girl_r]] )

		sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
end

function nato_down()
	relation_registry.change_community_goodwill("nato", db.actor:id(), (-5000))
end

function esc_demon_girl_off()
	als_on_off_switch.esc_demon_girl_off()
end

function esc_demon_girl_on()
	als_on_off_switch.esc_demon_girl_on()
	-- als_demons.play_polter_on_spine()
end

function esc_shamray_bandit_2_off()
	als_on_off_switch.esc_shamray_bandit_2_off()
end

function esc_shamray_bandit_1_off()
	local obj = alife():story_object(20111)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	end
end

function esc_shamray_off()
	local obj = alife():story_object(20110)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	end
end

function esc_cutscene_del()
	als_on_off_switch.esc_cutscene_del()
end

function esc_hazar_dubl_off()
	local obj = alife():story_object(20137)
	if obj then
	alife():set_switch_offline(obj.id, true)
	alife():set_switch_online(obj.id, false)
	alife():set_interactive(obj.id, false)
	end
end

function sor_ivanzov_marchenko_off()
	als_on_off_switch.sor_ivanzov_marchenko_off()
end

function sor_galash_off()
	als_on_off_switch.sor_galash_off()
end

function lch_sor2esc_02_on()
	als_on_off_switch.sor2esc_02_on()
end
function sor2esc_02_off()
	als_on_off_switch.sor2esc_02_off()
end

function esc2marsh_02_on()
	als_on_off_switch.esc2marsh_02_on()
end
function esc2marsh_02_off()
	als_on_off_switch.esc2marsh_02_off()
end

function marsh2esc_02_on()
	als_on_off_switch.marsh2esc_02_on()
end
function marsh2esc_02_off()
	als_on_off_switch.marsh2esc_02_off()
end

function esc_fallout()
	sleep_manager.sleep(10)
end

function marsh_fallout()
	sleep_manager.sleep(2)
end

function marsh_demon_boy_off()
	als_on_off_switch.marsh_demon_boy_off()
	als_on_off_switch.marsh_mogilshik_final_off()
end

function marsh_mogilshik_final_del()
	als_on_off_switch.marsh_mogilshik_final_del()
end

function marsh_combat_1_jump()
	-- db.actor:disable_info_portion("blabla_init_dialog")
	xr_effects.enable_ui(db.actor, nil)
local point = patrol("marsh_combat_1_jump_walk")
local look = patrol("marsh_combat_1_jump_look")
	db.actor:set_actor_position(point:point(0))
local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

function marsh_combat_2_jump()
	-- db.actor:disable_info_portion("blabla_init_dialog")
	xr_effects.enable_ui(db.actor, nil)
local point = patrol("marsh_combat_2_jump_walk")
local look = patrol("marsh_combat_2_jump_look")
	db.actor:set_actor_position(point:point(0))
local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

function lim_turrets_switch()
	als_on_off_switch.lim_turrets_switch()
end

function marsh_galash_1_off()
	als_on_off_switch.marsh_galash_1_off()
end

function marsh_galash_2_off()
	als_on_off_switch.marsh_galash_2_off()
end

function marsh_galash_3_off()
	als_on_off_switch.marsh_galash_3_off()
end

function drezina_targets()
	als_mass_killing.drezina_targets()
end

function esc_mobil_1_hit()
	als_mass_killing.esc_mobile_target_1()
end

function esc_mobil_2_hit()
	als_mass_killing.esc_mobile_target_2()
end

function esc_mobil_3_hit()
	als_mass_killing.esc_mobile_target_3()
end

function esc_mobil_4_hit()
	als_mass_killing.esc_mobile_target_4()
end

function esc_mobil_5_hit()
	als_mass_killing.esc_mobile_target_5()
end

function esc_mobil_6_hit()
	als_mass_killing.esc_mobile_target_6()
end

function marsh_wrs_hit()
	als_mass_killing.marsh_wrs_targets()
end

function red_gold_hit()
	als_mass_killing.red_gold_targets()
	sound_svd_strike_quiet()
end

function red_sniper_hit()
	als_mass_killing.red_sniper_targets()
end

function red_sniper_stoker_hit()
	als_mass_killing.red_sniper_stoker_targets()
end

function marsh_simpson_hit()
	als_mass_killing.marsh_simpson_targets()
end

function val_kill_yalta_group_hit()
	als_mass_killing.val_kill_yalta_group_targets()
end

function lim_kill_warstalks_hit()
	als_mass_killing.lim_kill_warstalks_targets()
end

function esc_mine_1()
	als_mass_killing.esc_mine_1()
end
function esc_mine_2()
	als_mass_killing.esc_mine_2()
end
function esc_mine_3()
	als_mass_killing.esc_mine_3()
end
function esc_mine_4()
	als_mass_killing.esc_mine_4()
end
function esc_mine_5()
	als_mass_killing.esc_mine_5()
end
function esc_mine_6()
	als_mass_killing.esc_mine_6()
end
function esc_mine_7()
	als_mass_killing.esc_mine_7()
end
function esc_mine_8()
	als_mass_killing.esc_mine_8()
end
function esc_mine_9()
	als_mass_killing.esc_mine_9()
end

function aes_cliric_1_hit()
	als_mass_killing.aes_cliric_1_target()
	sound_svd_strike()
end

function aes_cliric_2_hit()
	als_mass_killing.aes_cliric_2_target()
	sound_svd_strike()
end

function aes_cliric_3_hit()
	als_mass_killing.aes_cliric_3_target()
	sound_svd_strike()
end

function aes_cliric_4_hit()
	als_mass_killing.aes_cliric_4_target()
	sound_svd_strike()
end

function aes_cliric_5_hit()
	als_mass_killing.aes_cliric_5_target()
	sound_svd_strike()
end

function aes_cliric_6_hit()
	als_mass_killing.aes_cliric_6_target()
	sound_svd_strike()
end

function aes_cliric_7_hit()
	als_mass_killing.aes_cliric_7_target()
	sound_svd_strike()
end

function aes_cliric_8_hit()
	als_mass_killing.aes_cliric_8_target()
	sound_svd_strike()
end

function aes_cliric_9_hit()
	als_mass_killing.aes_cliric_9_target()
	sound_svd_strike()
end

function aes_cliric_10_hit()
	als_mass_killing.aes_cliric_10_target()
	sound_svd_strike()
end

function aes_cliric_11_hit()
	als_mass_killing.aes_cliric_11_target()
	sound_svd_strike()
end

function aes_cliric_12_hit()
	als_mass_killing.aes_cliric_12_target()
	sound_svd_strike()
end

function gen_borman_hit()
	als_mass_killing.gen_borman_target()
end

function esc_zones_mine_field_off()
	als_on_off_switch.esc_zones_mine_field_off()
end

function esc_zones_mine_field_del()
	als_on_off_switch.esc_zones_mine_field_del()
end

function marsh_waterrat_gang_dead()
	als_on_off_switch.marsh_waterrat_gang_off()
end

function marsh_accumulator_on()
	als_on_off_switch.marsh_accumulator_on()
end

function marsh_accumulator_on_1()
	als_on_off_switch.marsh_accumulator_on_1()
end

function marsh_deadman_container_on()
	als_on_off_switch.marsh_deadman_container_on()
end

function marsh_monks_on()
	als_on_off_switch.marsh_monks_on()
end

function marsh_mogilshik_final_on()
	als_on_off_switch.marsh_mogilshik_final_on()
end

function red2panzerhc_lc_on()
	als_on_off_switch.red2panzerhc_lc_on()
end
function red2panzerhc_lc_off()
	als_on_off_switch.red2panzerhc_lc_off()
end

function teuton_items_on()
	als_on_off_switch.teuton_items_on()
end

function agru_gunmanroom_light_turn_on()
	als_on_off_switch.agru_gunmanroom_light_turn_on()
	sound_electroswitcher()
end

function agru_gunmanroom_light_turn_off()
	als_on_off_switch.agru_gunmanroom_light_turn_off()
	sound_electroswitcher()
end

function agru_gunmanquazyroom_light_turn_on()
	als_on_off_switch.agru_gunmanquazyroom_light_turn_on()
	sound_electroswitcher()
end

function agru_gunmanquazyroom_light_turn_off()
	als_on_off_switch.agru_gunmanquazyroom_light_turn_off()
	sound_electroswitcher()
end

function sound_electroswitcher(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[device\el_switcher]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function agr_under_vodka_premium_on()
	als_on_off_switch.agr_under_vodka_premium_on()
end

function agr_hsm_box_on()
	als_on_off_switch.agr_hsm_box_on()
end

function agru_sensor_numpad_on()
	als_on_off_switch.agru_sensor_numpad_on()
end

function agru_sensor_numpad_off()
	als_on_off_switch.agru_sensor_numpad_off()
end

function agru_sensor_numpad_2_on()
	als_on_off_switch.agru_sensor_numpad_2_on()
end

function agru_sensor_numpad_2_off()
	als_on_off_switch.agru_sensor_numpad_2_off()
end

function val_zmd_1()
	local mine = level_object_by_sid(21021)
	if mine then
	alife():release(alife():object(mine:id()), true)
	end
end

function val_zmd_2()
	local mine = level_object_by_sid(21022)
	if mine then
	alife():release(alife():object(mine:id()), true)
	end
end

function val_zmd_3()
	local mine = level_object_by_sid(21023)
	if mine then
	alife():release(alife():object(mine:id()), true)
	end
end

function agru_teleports_off()
	local agru_teleport_1 = level_object_by_sid(20498)
	if agru_teleport_1 then
	alife():release(alife():object(agru_teleport_1:id()), true)
	end

	local agru_teleport_2 = level_object_by_sid(20499)
	if agru_teleport_2 then
	alife():release(alife():object(agru_teleport_2:id()), true)
	end
end

function panz_numpad_off()
	als_on_off_switch.panz_numpad_off()
end

function agr_light_start()
	als_agr_generator_switch.light_start()
end

function agr_light_on()
	als_agr_generator_switch.light_on()
end

function agr_light_off()
	als_agr_generator_switch.light_off()
end

function agr_light_stop()
	als_agr_generator_switch.light_stop()
end

function teuton_maljawa_taked()
	als_on_off_switch.teuton_maljawa_off()
	alife():create("teuton_malyawa", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function agr_broken_pda_taked()
	als_on_off_switch.agr_broken_pda_off()
	alife():create("broken_pda", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	db.actor:give_info_portion("agr_known_1052")
	db.actor:give_info_portion("search_s_module_1")
	db.actor:give_info_portion("player_complete_search_s_module")
end

function agr_uv_light_torch_taked()
	als_on_off_switch.agr_uv_light_torch_off()
	alife():create("uv_light_torch", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function agr_uv_light_torch_switch()
	agr_uv_light_torch_nax()
	alife():create("als_singulator", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function agr_uv_light_torch_nax()
	local torch = db.actor:object("uv_light_torch")
	if torch then
		alife():release(alife():object(torch:id()), true)
	end
end

function peshera_torch_switch()
	local torch = db.actor:object("device_torch_fake")
	if torch then
		alife():release(alife():object(torch:id()), true)
		alife():create("device_torch", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
end

function agr_grek_outfit_switch()
	agr_grek_outfit_nax()
	alife():create("grek_outfit_glasses", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function red_accumulator_switch_1()
	als_on_off_switch.red_accumulator_1_off()
	alife():create("ammo_blaster_original", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function red_accumulator_switch_2()
	local accum = db.actor:object("ammo_blaster_original")
	if accum then
	alife():release(alife():object(accum:id()), true)

	als_on_off_switch.red_accumulator_2_on()
	end
end

function red_accumulator_switch_3()
	local accum = db.actor:object("ammo_blaster")
	if accum then
	alife():release(alife():object(accum:id()), true)

	als_on_off_switch.red_accumulator_2_on()
	end
end

function lim_blade_radiokey_1_on()
	local radiokey = db.actor:object("blade_radiokey_1")
	if radiokey then
	alife():release(alife():object(radiokey:id()), true)

	als_on_off_switch.lim_blade_radiokey_1_on()
	end
end

function lim_blade_radiokey_2_on()
	local radiokey = db.actor:object("blade_radiokey_2")
	if radiokey then
	alife():release(alife():object(radiokey:id()), true)

	als_on_off_switch.lim_blade_radiokey_2_on()
	end
end

function red_door_to_lim_on()
	als_on_off_switch.red_door_to_lim_on()
end

function red2lim_on()
	als_on_off_switch.red2lim_on()
end

function lim_kasper_switch()
	als_on_off_switch.lim_kasper_switch()
end

function agr_grek_outfit_nax()
	local grek_outfit = db.actor:object("grek_outfit")
	if grek_outfit then
		alife():release(alife():object(grek_outfit:id()), true)
	end
end

function panz_light_start_1()
	als_panz_generator_switch.light_start_1()
end

function panz_light_start_2()
	als_panz_generator_switch.light_start_2()
end

function panz_light_on()
	als_panz_generator_switch.light_on()
	als_on_off_switch.panz_bags_off()
end

function marsh_announcement_1_off()
	als_on_off_switch.marsh_announcement_1_off()
	alife():create("announcement_1", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function sor_announcement_1_on()
	als_on_off_switch.sor_announcement_1_on()
end

function sor_announcement_1_off()
	als_on_off_switch.sor_announcement_1_off()
	alife():create("announcement_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function sor_announcement_2_on()
	als_on_off_switch.sor_announcement_2_on()
end

function sor_announcement_2_off()
	als_on_off_switch.sor_announcement_2_off()
	alife():create("announcement_3", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end
---------------------------------------
function sor_announcement_3_on()
	als_on_off_switch.sor_announcement_3_on()
end

function sor_announcement_3_off()
	als_on_off_switch.sor_announcement_3_off()
	alife():create("announcement_4", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function sor_announcement_4_on()
	als_on_off_switch.sor_announcement_4_on()
end

function sor_announcement_4_off()
	als_on_off_switch.sor_announcement_4_off()
	alife():create("announcement_5", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function marsh_announcement_2_on()
	als_on_off_switch.marsh_announcement_2_on()
end

function marsh_announcement_2_off()
	als_on_off_switch.marsh_announcement_2_off()
	alife():create("announcement_6", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function motor_section_car_switch()
	als_on_off_switch.motor_section_car_switch()
end

function hsm_5_on()
	als_on_off_switch.hsm_5_on()
end

function panzer_hc_stoker_off()
	als_on_off_switch.panzer_hc_stoker_off()
end

function panzerhc2red_on()
	als_on_off_switch.panzerhc2red_on()
end

function yan_beacons_on()
	als_on_off_switch.yan_beacons_on()
end

function yan_beacons_1_off()
	als_on_off_switch.yan_beacons_1_off()
	sound_scotch()
	alife():create("hsm_beacon_1", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function shocker_pda_switch()
	als_on_off_switch.shocker_pda_switch()
	alife():create("shocker_pda", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function yan_beacons_2_off()
	als_on_off_switch.yan_beacons_2_off()
	sound_scotch()
	alife():create("hsm_beacon_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function yan_beacons_3_off()
	als_on_off_switch.yan_beacons_3_off()
	sound_scotch()
	alife():create("hsm_beacon_3", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function yan_beacons_4_off()
	als_on_off_switch.yan_beacons_4_off()
	sound_scotch()
	alife():create("hsm_beacon_4", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function yan_beacons_5_off()
	als_on_off_switch.yan_beacons_5_off()
	sound_scotch()
	alife():create("hsm_beacon_5", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function sound_scotch(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\skotch]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function sound_knife_d_from_wood(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[weapons\knife_d\knife_d_from_wood]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function take_up_weapon(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[interface\inv_slot]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function yan_krisagenerator_switching()
	als_on_off_switch.yan_krisagenerator_switching()
end

function yan_tamed_rat_on()
	als_on_off_switch.yan_tamed_rat_on()
end

function yan_tamed_rat()
	als_on_off_switch.yan_tamed_rat()
end

function yan_desant_1_off()
	als_on_off_switch.yan_desant_1_off()
end

function yan_desant_2_off()
	als_on_off_switch.yan_desant_2_off()
end

function yan_desant_3_off()
	als_on_off_switch.yan_desant_3_off()
end

function yan_desant_4_off()
	als_on_off_switch.yan_desant_4_off()
end

function yan_desant_antigas_1_on()
	als_on_off_switch.yan_desant_antigas_1_on()
end

function yan_desant_antigas_2_on()
	als_on_off_switch.yan_desant_antigas_2_on()
end

function yan_desant_antigas_3_on()
	als_on_off_switch.yan_desant_antigas_3_on()
end

function yan_desant_antigas_4_on()
	als_on_off_switch.yan_desant_antigas_4_on()
end

function agr_desant_1_on()
	als_on_off_switch.agr_desant_1_on()
end

function agr_desant_on()
	als_on_off_switch.agr_desant_on()
end

function agr_desant_off()
	als_on_off_switch.agr_desant_off()
end

function agr_uv_light_torch_on()
	als_on_off_switch.agr_uv_light_torch_on()
end

function agr_sensor_numpad_on()
	als_on_off_switch.agr_sensor_numpad_on()
end

function agr_sensor_numpad_off()
	als_on_off_switch.agr_sensor_numpad_off()
end

function gar_sensor_numpad_on()
	als_on_off_switch.gar_sensor_numpad_on()
end

function gar_sensor_numpad_off()
	als_on_off_switch.gar_sensor_numpad_off()
end

function bun_sensor_numpad_1_on()
	als_on_off_switch.bun_sensor_numpad_1_on()
end

function bun_sensor_numpad_1_off()
	als_on_off_switch.bun_sensor_numpad_1_off()
end

function bun_sensor_numpad_2_on()
	als_on_off_switch.bun_sensor_numpad_2_on()
end

function bun_sensor_numpad_2_off()
	als_on_off_switch.bun_sensor_numpad_2_off()
end

function bun_sensor_numpad_3_on()
	als_on_off_switch.bun_sensor_numpad_3_on()
end

function bun_sensor_numpad_3_off()
	als_on_off_switch.bun_sensor_numpad_3_off()
end

function val_sensor_numpad_on()
	als_on_off_switch.val_sensor_numpad_on()
end

function val_sensor_numpad_off()
	als_on_off_switch.val_sensor_numpad_off()
end

function agru_desant_on()
	als_on_off_switch.agru_desant_on()
end

function agru_desant_1_off()
	als_on_off_switch.agru_desant_1_off()
end

function agru_desant_2_off()
	als_on_off_switch.agru_desant_2_off()
end

function agru_desant_3_off()
	als_on_off_switch.agru_desant_3_off()
end

function agru_desant_4_off()
	als_on_off_switch.agru_desant_4_off()
end

function agrund2agr_01_on()
	als_on_off_switch.agrund2agr_01_on()
end

function agr2agrund_01_on()
	als_on_off_switch.agr2agrund_01_on()
end

function agr_heli_spawn()
	als_on_off_switch.agr_heli_spawn()
	als_on_off_switch.esc_heli_change()
end

function agr_deadman_on()
	als_on_off_switch.agr_deadman_on()
end

function agr_deadman_off()
	als_on_off_switch.agr_deadman_off()
end

function agr_heli_dead_spawn()
	als_on_off_switch.agr_heli_dead_spawn()
	als_on_off_switch.agr_heli_flame_on()
end

function gar2bun_on()
	als_on_off_switch.gar2bun_on()
end

function redforrest_lc_on()
	als_on_off_switch.redforrest_lc_on()
end
function redforrest_lc_off()
	als_on_off_switch.redforrest_lc_off()
end

function bun_latent_arrow_01_on()
	als_on_off_switch.bun_latent_arrow_01_on()
end
function bun_latent_arrow_01_off()
	als_on_off_switch.bun_latent_arrow_01_off()
end

function bun_latent_arrow_02_on()
	als_on_off_switch.bun_latent_arrow_02_on()
end
function bun_latent_arrow_02_off()
	als_on_off_switch.bun_latent_arrow_02_off()
end

function bun_latent_arrow_03_on()
	als_on_off_switch.bun_latent_arrow_03_on()
end
function bun_latent_arrow_03_off()
	als_on_off_switch.bun_latent_arrow_03_off()
end

function bun_latent_arrow_04_on()
	als_on_off_switch.bun_latent_arrow_04_on()
end
function bun_latent_arrow_04_off()
	als_on_off_switch.bun_latent_arrow_04_off()
end

function bun_latent_arrow_05_on()
	als_on_off_switch.bun_latent_arrow_05_on()
end
function bun_latent_arrow_05_off()
	als_on_off_switch.bun_latent_arrow_05_off()
end

function bun_latent_arrow_06_on()
	als_on_off_switch.bun_latent_arrow_06_on()
end
function bun_latent_arrow_06_off()
	als_on_off_switch.bun_latent_arrow_06_off()
end

function bun_latent_arrow_07_on()
	als_on_off_switch.bun_latent_arrow_07_on()
end
function bun_latent_arrow_07_off()
	als_on_off_switch.bun_latent_arrow_07_off()
end

function bun_latent_arrow_08_on()
	als_on_off_switch.bun_latent_arrow_08_on()
end
function bun_latent_arrow_08_off()
	als_on_off_switch.bun_latent_arrow_08_off()
end

function bun_latent_arrow_09_on()
	als_on_off_switch.bun_latent_arrow_09_on()
end
function bun_latent_arrow_09_off()
	als_on_off_switch.bun_latent_arrow_09_off()
end

function bun_latent_arrow_10_on()
	als_on_off_switch.bun_latent_arrow_10_on()
end
function bun_latent_arrow_10_off()
	als_on_off_switch.bun_latent_arrow_10_off()
end

function bun_latent_arrow_11_on()
	als_on_off_switch.bun_latent_arrow_11_on()
end
function bun_latent_arrow_11_off()
	als_on_off_switch.bun_latent_arrow_11_off()
end

function bun_latent_arrow_12_on()
	als_on_off_switch.bun_latent_arrow_12_on()
end
function bun_latent_arrow_12_off()
	als_on_off_switch.bun_latent_arrow_12_off()
end

function bun_latent_arrow_13_on()
	als_on_off_switch.bun_latent_arrow_13_on()
end
function bun_latent_arrow_13_off()
	als_on_off_switch.bun_latent_arrow_13_off()
end

function val2darklab_01_on()
	als_on_off_switch.val2darklab_01_on()
end
function val2darklab_01_off()
	als_on_off_switch.val2darklab_01_off()
end

function val2darklab_02_on()
	als_on_off_switch.val2darklab_02_on()
end
function val2darklab_02_off()
	als_on_off_switch.val2darklab_02_off()
end

function bun_terrible_face_0000_on()
	als_on_off_switch.bun_terrible_face_0000_on()
	als_scream_1()
end

function bun_terrible_face_0000_off()
	als_on_off_switch.bun_terrible_face_0000_off()
end

function darklab_latent_arrow_on()
	als_on_off_switch.darklab_latent_arrow_on()
end
function darklab_latent_arrow_off()
	als_on_off_switch.darklab_latent_arrow_off()
end

function darklab_latent_arrow_0000_on()
	als_on_off_switch.darklab_latent_arrow_0000_on()
end
function darklab_latent_arrow_0000_off()
	als_on_off_switch.darklab_latent_arrow_0000_off()
end

function darklab_latent_arrow_0001_on()
	als_on_off_switch.darklab_latent_arrow_0001_on()
end
function darklab_latent_arrow_0001_off()
	als_on_off_switch.darklab_latent_arrow_0001_off()
end

function darklab_latent_arrow_0002_on()
	als_on_off_switch.darklab_latent_arrow_0002_on()
end
function darklab_latent_arrow_0002_off()
	als_on_off_switch.darklab_latent_arrow_0002_off()
end

function darklab_latent_arrow_0003_on()
	als_on_off_switch.darklab_latent_arrow_0003_on()
end
function darklab_latent_arrow_0003_off()
	als_on_off_switch.darklab_latent_arrow_0003_off()
end

function darklab_latent_arrow_0004_on()
	als_on_off_switch.darklab_latent_arrow_0004_on()
end
function darklab_latent_arrow_0004_off()
	als_on_off_switch.darklab_latent_arrow_0004_off()
end

function darklab_latent_arrow_0005_on()
	als_on_off_switch.darklab_latent_arrow_0005_on()
end
function darklab_latent_arrow_0005_off()
	als_on_off_switch.darklab_latent_arrow_0005_off()
end

function red_sensor_numpad_on()
	als_on_off_switch.red_sensor_numpad_on()
end
function red_sensor_numpad_off()
	als_on_off_switch.red_sensor_numpad_off()
end

function val_timer_bomb_on()
	als_on_off_switch.val_timer_bomb_on()
end
function val_timer_bomb_off()
	als_on_off_switch.val_timer_bomb_off()
end

function darklab_sensor_numpad_on()
	als_on_off_switch.darklab_sensor_numpad_on()
end
function darklab_sensor_numpad_off()
	als_on_off_switch.darklab_sensor_numpad_off()
end

function darklab_erasing_phase_1()
	als_on_off_switch.darklab_erasing_phase_1()
end

function darklab_erasing_phase_2()
	als_on_off_switch.darklab_erasing_phase_2()
end

function mil2bun_on()
	als_on_off_switch.mil2bun_on()
end
function mil2bun_off()
	als_on_off_switch.mil2bun_off()
end

function bun2mil_on()
	als_on_off_switch.bun2mil_on()
end
function bun2mil_off()
	als_on_off_switch.bun2mil_off()
end

function panz_cutscene_grek_on()
	als_on_off_switch.panz_cutscene_grek_on()
end
function panz_cutscene_grek_off()
	als_on_off_switch.panz_cutscene_grek_off()
end

function panz_armed_arestant_4_off()
	als_on_off_switch.panz_armed_arestant_4_off()
end

function esc_gate_switch()
	als_on_off_switch.esc_gate_switch()
end

function panz_pseudo_execution_initiation()
	als_on_off_switch.panz_pseudo_execution_initiation()
end

function gar_deadman_dubl_on()
	als_on_off_switch.gar_deadman_dubl_on()
end
function gar_deadman_dubl_off()
	als_on_off_switch.gar_deadman_dubl_off()
end

function gar_deadman_on()
	als_on_off_switch.gar_deadman_on()
end
function gar_deadman_off()
	als_on_off_switch.gar_deadman_off()
end

function bun_generator_start_1()
	als_bun_generator_switch.bun_generator_start_1()
end

function bun_generator_start_2()
	als_bun_generator_switch.bun_generator_start_2()
end

function bun_generator_start_3()
	als_bun_generator_switch.bun_generator_start_3()
end

function bun_generator_on()
	als_bun_generator_switch.bun_generator_on()
end

function bun_generator_stop()
	als_bun_generator_switch.bun_generator_off_freeplay()
end

function darkvalley_generator_start()
	als_dark_generator_switch.gen_start()
end
function darkvalley_generator_up()
	als_dark_generator_switch.gen_up()
end
function darkvalley_generator_work()
	als_dark_generator_switch.gen_work()
end
function darkvalley_generator_stop()
	als_dark_generator_switch.gen_stop()
end
function darkvalley_generator_down()
	als_dark_generator_switch.gen_down()
end
function darkvalley_generator_standby()
	als_dark_generator_switch.gen_standby()
end

function agr_under_dead_head_on()
	als_on_off_switch.agr_under_dead_head_on()
	als_scream_1()
end
function agr_under_dead_head_off()
	als_on_off_switch.agr_under_dead_head_off()
end

function darklab2val_reserve_on()
	als_on_off_switch.darklab2val_reserve_on()
end
function darklab2val_reserve_off()
	als_on_off_switch.darklab2val_reserve_off()
end

function atp_lamp_on()
	als_on_off_switch.atp_lamp_on()
end
function atp_lamp_off()
	als_on_off_switch.atp_lamp_off()
end

function atp_lamp_0000_on()
	als_on_off_switch.atp_lamp_0000_on()
end
function atp_lamp_0000_off()
	als_on_off_switch.atp_lamp_0000_off()
end

function atp_slender_on()
	als_on_off_switch.atp_slender_on()
end
function atp_slender_off()
	als_on_off_switch.atp_slender_off()
end

function esc2atp_on()
	als_on_off_switch.esc2atp_on()
end
function esc2atp_off()
	als_on_off_switch.esc2atp_off()
end
function esc_pentagramm_on()
	als_on_off_switch.esc_pentagramm_on()
end
function esc_pentagramm_off()
	als_on_off_switch.esc_pentagramm_off()
end

function atp2esc_on()
	als_on_off_switch.atp2esc_on()
end
function atp2esc_off()
	als_on_off_switch.atp2esc_off()
end
function atp_pentagramm_on()
	als_on_off_switch.atp_pentagramm_on()
end
function atp_pentagramm_off()
	als_on_off_switch.atp_pentagramm_off()
end

function dc_pentagramm_on()
	als_on_off_switch.dc_pentagramm_on()
end
function dc_pentagramm_off()
	als_on_off_switch.dc_pentagramm_off()
end

function darklab2val_01_on()
	als_on_off_switch.darklab2val_01_on()
end
function darklab2val_01_off()
	als_on_off_switch.darklab2val_01_off()
end

function bun_sidor_lamp_on()
	als_on_off_switch.bun_sidor_lamp_on()
end
function bun_sidor_lamp_off()
	als_on_off_switch.bun_sidor_lamp_off()
end

function bun_sidor_lamps_on()
	als_on_off_switch.bun_sidor_lamps_on()
end
function bun_sidor_lamps_off()
	als_on_off_switch.bun_sidor_lamps_off()
end

function agr_taras_dictophone_off()
	als_on_off_switch.agr_taras_dictophone_off()
	alife():create("taras_dictophone", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function atto_secondo_switch_1()
	als_on_off_switch.sor_bikes_off()
	als_on_off_switch.sor_autoritet_on()
end

function atto_secondo_switch_2()
	als_on_off_switch.sor_bikes_off()
	als_on_off_switch.sor_panzer_on()
end

function sor_autoritet_off()
	als_on_off_switch.sor_autoritet_off()
end

function sor_grek_for_cutscene_on()
	als_on_off_switch.sor_grek_for_cutscene_on()
end

function sor_panzer_on()
	als_on_off_switch.sor_panzer_on()
end

function sor_panzer_off()
	als_on_off_switch.sor_panzer_off()
end

function sor_grek_for_cutscene_panzer_on()
	als_on_off_switch.sor_grek_for_cutscene_panzer_on()
end

function sor_grek_for_cutscene_off()
	als_on_off_switch.sor_grek_for_cutscene_off()
end

function sor_grek_for_cutscene_panzer_off()
	als_on_off_switch.sor_grek_for_cutscene_panzer_off()
end

function sor_kuchma_off()
	als_on_off_switch.sor_kuchma_off()
end

function pol2sor_on()
	als_on_off_switch.pol2sor_on()
end

function pol2sor_off()
	als_on_off_switch.pol2sor_off()
end

function sor2pol_on()
	als_on_off_switch.sor2pol_on()
end

function sor2pol_off()
	als_on_off_switch.sor2pol_off()
end

function pri_warlocks_switch()
	als_on_off_switch.pri_warlocks_switch()
	wpn_warlock_error_nax()
	alife():create("wpn_warlock", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function pri_warlock_taked()
	als_on_off_switch.pri_warlock_taked()
	alife():create("wpn_warlock", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function pri_warlock_off()
	als_on_off_switch.pri_warlock_taked()
end

function wpn_warlock_error_nax()
	local wwarlock = db.actor:object("wpn_warlock_error")
	if wwarlock then
		alife():release(alife():object(wwarlock:id()), true)
	end
end

function atp_broken_warlock_off()
	als_on_off_switch.atp_broken_warlock_off()
	alife():create("wpn_warlock_error", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function atp_boxes_switching()
	als_on_off_switch.atp_boxes_switching()
end

function atp_mogilshik_switch_1()
	als_on_off_switch.atp_mogilshik_switch_1()
end
function atp_mogilshik_switch_2()
	als_on_off_switch.atp_mogilshik_switch_2()
end
function atp_mogilshik_switch_3()
	als_on_off_switch.atp_mogilshik_switch_3()
end
function atp_mogilshik_switch_4()
	als_on_off_switch.atp_mogilshik_switch_4()
end
function atp_mogilshik_switch_5()
	als_on_off_switch.atp_mogilshik_switch_5()
end
function atp_mogilshik_switch_6()
	als_on_off_switch.atp_mogilshik_switch_6()
end
function atp_mogilshik_switch_7()
	als_on_off_switch.atp_mogilshik_switch_7()
end
function atp_mogilshik_switch_8()
	als_on_off_switch.atp_mogilshik_switch_8()
end
function atp_mogilshik_switch_9()
	als_on_off_switch.atp_mogilshik_switch_9()
end

function marsh_sidor_skhron_1_on()
	als_on_off_switch.marsh_sidor_skhron_1_on()
end

function marsh_sidor_skhron_1_dubl_on()
	als_on_off_switch.marsh_sidor_skhron_1_dubl_on()
end

function sor_mcleens_group_off()
	als_on_off_switch.sor_mcleens_group_off()
end

function sor_marchenko_switching()
	als_on_off_switch.sor_marchenko_switching()
end

function sor_ivanzov_switching()
	als_on_off_switch.sor_ivanzov_switching()
end

function sor_ivanzov_sniper_switching()
	als_on_off_switch.sor_ivanzov_sniper_switching()
	als_on_off_switch.sor_hazar_on()
end

function sor_police_windows_on()
	als_on_off_switch.sor_police_windows_on()
end

function ufo_on()
	als_on_off_switch.ufo_on()
end
function ufo_off()
	als_on_off_switch.ufo_off()
end

function gen_im_off_dead()
	als_on_off_switch.gen_im_off_dead()
end
function gen_im_off_alive()
	als_on_off_switch.gen_im_off_alive()
end

-- function sor_hazar_on()
	-- als_on_off_switch.sor_hazar_on()
-- end

function esc_secret_room_door_switch()
	als_on_off_switch.esc_secret_room_door_switch()
end

function val_klava_switch()
	als_on_off_switch.val_klava_switch()
end

function val_comp_block()
	als_on_off_switch.val_comp_block()
end

function val_safe_door_codelock_off()
	als_on_off_switch.val_safe_door_codelock_off()
end

function val_comp_turrets_off()
	als_on_off_switch.val_comp_turrets_off()
end

function sor_wartown_doors_switch()
	als_on_off_switch.sor_wartown_doors_switch()
end

function sor_jj_safe_switch()
	als_on_off_switch.sor_jj_safe_switch()
end

function dead_military_vehicles_on()
	als_on_off_switch.dead_military_vehicles_on()
end

function sor_military_veh_off()
	als_on_off_switch.sor_military_veh_off()
end

function lim2pri_01_on()
	als_on_off_switch.lim2pri_01_on()
end

function marsh2labdream_on()
	als_on_off_switch.marsh2labdream_on()
end
function marsh2labdream_off()
	als_on_off_switch.marsh2labdream_off()
end

function labdream2marsh_on()
	als_on_off_switch.labdream2marsh_on()
end

function sor_factory_gates_switch_1()
	als_on_off_switch.sor_factory_gates_switch_1()
end

function sor_factory_gates_switch_2()
	als_on_off_switch.sor_factory_gates_switch_2()
end

function esc_hole_blockers_off()
	als_on_off_switch.esc_hole_blockers_off()
end

function dc_br_pentagramm()
	als_on_off_switch.dc_br_pentagramm()
end

function disable_spez_zgl_1()
	als_disable_info.disable_spez_zgl_1()
end

-- function _off()
	-- als_disable_info.()
-- end

-- function _on()
	-- als_on_off_switch._on()
-- end
-- function _off()
	-- als_on_off_switch._off()
-- end

function freeplay_announcements_on()
	als_on_off_switch.freeplay_announcements_on()
end

function list_about_grek_off()
	als_on_off_switch.list_about_grek_off()
	alife():create("list_about_grek", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function list_panz_about_turrets_off()
	als_on_off_switch.list_panz_about_turrets_off()
	alife():create("list_panz_about_turrets", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function list_khazar_off()
	als_on_off_switch.list_khazar_off()
	alife():create("list_khazar", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function list_koptelov_off()
	als_on_off_switch.list_koptelov_off()
	alife():create("list_koptelov", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function list_luz_about_hsm_off()
	als_on_off_switch.list_luz_about_hsm_off()
	alife():create("list_luz_about_hsm", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function list_som_off()
	als_on_off_switch.list_som_off()
	alife():create("list_som", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function val_timer_minefield_on()
	als_on_off_switch.val_timer_minefield_on()
end

function hit_on_zombie_werewolf()
	als_wherewulf.hit_on_zombie()
end

function val_necronomicon_fake_on()
	als_on_off_switch.val_necronomicon_fake_on()
	necronomicon_nax()
end

function val_necronomicon_fake_off()
	als_on_off_switch.val_necronomicon_fake_off()
end

function necronomicon_nax()
	local necro = db.actor:object("necronomicon")
	if necro then
		alife():release(alife():object(necro:id()), true)
	end
end

function access_card_1_nax()
	local access_card = db.actor:object("accesscard_hsm_1")
	if access_card then
		alife():release(alife():object(access_card:id()), true)
	end
end

function access_card_1_vax()
	alife():create("accesscard_hsm_1", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function audiocassette_vax()
	alife():create("audiocassette", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function access_card_2_nax()
	local access_card = db.actor:object("accesscard_hsm_2")
	if access_card then
		alife():release(alife():object(access_card:id()), true)
	end
end

function access_card_2_vax()
	alife():create("accesscard_hsm_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function access_card_3_nax()
	local access_card = db.actor:object("accesscard_sor_monkeyhouse")
	if access_card then
		alife():release(alife():object(access_card:id()), true)
	end
end

function access_card_3_vax()
	alife():create("accesscard_sor_monkeyhouse", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function access_card_4_nax()
	local access_card = db.actor:object("accesscard_hos_security")
	if access_card then
		alife():release(alife():object(access_card:id()), true)
	end
end

function access_card_4_vax()
	alife():create("accesscard_hos_security", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function hos_secury_key_1_on()
	als_on_off_switch.hos_secury_key_1_on()
end

function hos_secury_key_1_switch()
	als_on_off_switch.hos_secury_key_1_off()
	alife():create("hos_security_key", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function hos_secury_key_2_switch()
	local key = db.actor:object("hos_security_key")
	if key then
		alife():release(alife():object(key:id()), true)
	end
	als_on_off_switch.hos_secury_key_2_on()
end

function hsm_box_2_nax()
	local box = db.actor:object("hsm_box_2")
	if box then
		alife():release(alife():object(box:id()), true)
	end
end

function sor_passports_on()
	als_on_off_switch.sor_passports_on()
end

function esc_mobil_physic_off()
	als_on_off_switch.esc_mobil_physic_off()
end

function esc_mobil_destroyable_on()
	als_on_off_switch.esc_mobil_destroyable_on()
	als_on_off_switch.esc_invisible_c4_on()
end

function esc_realmobil_on()
	als_on_off_switch.esc_realmobil_on()
end

function sor_passports_off()
	als_on_off_switch.sor_passports_off()
	alife():create("item_passport_rf", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	alife():create("item_passport_rff", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function esc_grc_operator_pda_switch()
	als_on_off_switch.esc_grc_operator_pda_switch()
	alife():create("esc_operator_pda", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function monolith_keys_nax()
	local mon_key1 = db.actor:object("monolith_kee_1")
	if mon_key1 then
		alife():release(alife():object(mon_key1:id()), true)
	end

	local mon_key2 = db.actor:object("monolith_kee_2")
	if mon_key2 then
		alife():release(alife():object(mon_key2:id()), true)
	end

	local mon_key3 = db.actor:object("monolith_kee_3")
	if mon_key3 then
		alife():release(alife():object(mon_key3:id()), true)
	end
end

function monolith_keys_dushman_1_nax()
	local mon_key1 = db.actor:object("monolith_kee_4")
	if mon_key1 then
		alife():release(alife():object(mon_key1:id()), true)
	end
end

function monolith_keys_dushman_2_nax()
	local mon_key2 = db.actor:object("monolith_kee_5")
	if mon_key2 then
		alife():release(alife():object(mon_key2:id()), true)
	end
end

function monolith_keys_dushman_3_nax()
	local mon_key3 = db.actor:object("monolith_kee_6")
	if mon_key3 then
		alife():release(alife():object(mon_key3:id()), true)
	end
end

function hsm_box_4_nax()
	local box = db.actor:object("hsm_box_4")
	if box then
		alife():release(alife():object(box:id()), true)
	end
end

function hsm_box_3_nax()
	local box = db.actor:object("hsm_box_3")
	if box then
		alife():release(alife():object(box:id()), true)
	end
end

function hsm_box_5_nax()
	local box = db.actor:object("hsm_box_5")
	if box then
		alife():release(alife():object(box:id()), true)
	end
end

function sor_basement_key_nax()
	local key = db.actor:object("sor_basement_key")
	if key then
		alife():release(alife():object(key:id()), true)
	end
end

function sor_jj_key_nax()
	local key = db.actor:object("sor_jj_key")
	if key then
		alife():release(alife():object(key:id()), true)
	end
end

function darklab_art_red_off()
	als_on_off_switch.darklab_art_red_off()
	alife():create("art_red", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function sor_psylockator_switch_1()
	als_on_off_switch.sor_psylockator_switch_1()
	alife():create("blade_radiokey_1", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function sor_psylockator_switch_2()
	als_on_off_switch.sor_psylockator_switch_2()
	alife():create("blade_radiokey_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function val_shocker_flash_fake_off()
	als_on_off_switch.val_shocker_flash_fake_off()
	alife():create("shocker_flash", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function val_helicopter_on()
	als_on_off_switch.val_helicopter_on()
end

function val_killer_scorpio_off()
	als_on_off_switch.val_killer_scorpio_off()
end

function val_comp_on()
	als_on_off_switch.val_comp_on()
end

function val_zindan_mines_on()
	als_on_off_switch.val_zindan_mines_on()
end

function val_zindan_mines_off()
	als_on_off_switch.val_zindan_mines_off()
end

function yalta_group_switch()
	als_on_off_switch.yalta_group_switch()
end

function mcleens_group_swith()
	als_on_off_switch.mcleens_group_swith()
end

function vano_sidor_off()
	als_on_off_switch.vano_sidor_off()
end

function sor_cutscene_blockpost_grek_on()
	als_on_off_switch.sor_cutscene_blockpost_grek_on()
end

function sor_cutscene_blockpost_grek_off()
	als_on_off_switch.sor_cutscene_blockpost_grek_off()
end

function sor_plant_stop()
	als_sor_plant.sor_plant_stop()
end

function esc_malyawa_01_on()
	als_on_off_switch.esc_malyawa_01_on()
end

function sor_hacker_door_switch()
	als_on_off_switch.sor_hacker_door_switch()
end

function sor_bar_visitors_on()
	als_on_off_switch.sor_bar_visitors_on()
end

function esc_grc_agent_off()
	als_on_off_switch.esc_grc_agent_off()
end

function dc_demons_off()
	als_on_off_switch.dc_demons_off()
end

function darklab_light_on()
	als_darklab_light.darklab_light_on()
end

function agr_walther_taras_off()
	als_on_off_switch.agr_walther_taras_off()
	alife():create("wpn_p38_sk1", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function agru_walther_stranger_off()
	als_on_off_switch.agru_walther_stranger_off()
	alife():create("wpn_p38_sk1", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function esc_wpn_luger_off()
	als_on_off_switch.esc_wpn_luger_off()
	alife():create("wpn_luger", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function esc_wpn_walther_p38_off()
	als_on_off_switch.esc_wpn_walther_p38_off()
	alife():create("wpn_p38_sk1", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function esc_wpn_mp40_1_off()
	als_on_off_switch.esc_wpn_mp40_1_off()
	alife():create("wpn_mp40", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function esc_wpn_mp40_2_off()
	als_on_off_switch.esc_wpn_mp40_2_off()
	alife():create("wpn_mp40", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function mil_abakan_off()
	als_on_off_switch.mil_abakan_off()
	alife():create("wpn_abakan", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function mil_ak74_off()
	als_on_off_switch.mil_ak74_off()
	alife():create("wpn_ak74", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function gar_ak47_m1_off()
	als_on_off_switch.gar_ak47_m1_off()
	alife():create("wpn_ak74_m1", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	alife():create("wpn_addon_scope", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	alife():create("wpn_addon_silencer", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	alife():create("wpn_addon_grenade_launcher", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function mil_wpn_knife_d_1_off()
	als_on_off_switch.mil_wpn_knife_d_1_off()
	alife():create("ammo_knife", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_d_1_off()
	als_on_off_switch.marsh_wpn_knife_d_1_off()
	alife():create("ammo_knife", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_d_2_off()
	als_on_off_switch.marsh_wpn_knife_d_2_off()
	alife():create("ammo_knife", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_d_3_off()
	als_on_off_switch.marsh_wpn_knife_d_3_off()
	alife():create("ammo_knife", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_d_4_off()
	als_on_off_switch.marsh_wpn_knife_d_4_off()
	alife():create("ammo_knife", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_d_5_off()
	als_on_off_switch.marsh_wpn_knife_d_5_off()
	alife():create("ammo_knife", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_map_1_off()
	als_on_off_switch.marsh_wpn_knife_map_1_off()
	alife():create("ammo_knife_map", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_map_2_off()
	als_on_off_switch.marsh_wpn_knife_map_2_off()
	alife():create("ammo_knife_map", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_map_3_off()
	als_on_off_switch.marsh_wpn_knife_map_3_off()
	alife():create("ammo_knife_map", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_map_4_off()
	als_on_off_switch.marsh_wpn_knife_map_4_off()
	alife():create("ammo_knife_map", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_tanto_1_off()
	als_on_off_switch.marsh_wpn_knife_tanto_1_off()
	alife():create("ammo_knife_tanto", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_tanto_2_off()
	als_on_off_switch.marsh_wpn_knife_tanto_2_off()
	alife():create("ammo_knife_tanto", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_bak_1_off()
	als_on_off_switch.marsh_wpn_knife_bak_1_off()
	alife():create("ammo_knife_bak", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_bak_2_off()
	als_on_off_switch.marsh_wpn_knife_bak_2_off()
	alife():create("ammo_knife_bak", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_bak_3_off()
	als_on_off_switch.marsh_wpn_knife_bak_3_off()
	alife():create("ammo_knife_bak", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_bak_4_off()
	als_on_off_switch.marsh_wpn_knife_bak_4_off()
	alife():create("ammo_knife_bak", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_bak_5_off()
	als_on_off_switch.marsh_wpn_knife_bak_5_off()
	alife():create("ammo_knife_bak", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_bak_6_off()
	als_on_off_switch.marsh_wpn_knife_bak_6_off()
	alife():create("ammo_knife_bak", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_bak_7_off()
	als_on_off_switch.marsh_wpn_knife_bak_7_off()
	alife():create("ammo_knife_bak", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_bak_8_off()
	als_on_off_switch.marsh_wpn_knife_bak_8_off()
	alife():create("ammo_knife_bak", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_bak_9_off()
	als_on_off_switch.marsh_wpn_knife_bak_9_off()
	alife():create("ammo_knife_bak", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_bak_10_off()
	als_on_off_switch.marsh_wpn_knife_bak_10_off()
	alife():create("ammo_knife_bak", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_bak_11_off()
	als_on_off_switch.marsh_wpn_knife_bak_11_off()
	alife():create("ammo_knife_bak", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_bak_12_off()
	als_on_off_switch.marsh_wpn_knife_bak_12_off()
	alife():create("ammo_knife_bak", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function marsh_wpn_knife_bak_13_off()
	als_on_off_switch.marsh_wpn_knife_bak_13_off()
	alife():create("ammo_knife_bak", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function lim_wpn_knife_d_1_off()
	als_on_off_switch.lim_wpn_knife_d_1_off()
	alife():create("ammo_knife", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function lim_wpn_knife_d_2_off()
	als_on_off_switch.lim_wpn_knife_d_2_off()
	alife():create("ammo_knife", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function lim_wpn_knife_d_3_off()
	als_on_off_switch.lim_wpn_knife_d_3_off()
	alife():create("ammo_knife", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
end

function agr_knife_tanto_off()
	als_on_off_switch.agr_knife_tanto_off()
	alife():create("ammo_knife_tanto", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	sound_knife_d_from_wood()
	db.actor:give_info_portion("agr_knife_tanto")
end

function lim_tankoutfit_switch()
	als_on_off_switch.lim_tankoutfit_switch()
	alife():create("tank_outfit", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function lim_tankoutfit_switch_0()
	als_on_off_switch.lim_tankoutfit_switch_0()
	alife():create("tank_outfit", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function lim_tankoutfit_switch_1()
	als_on_off_switch.lim_tankoutfit_switch_1()
	alife():create("tank_outfit", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function reanimator_malyawa_off()
	als_on_off_switch.reanimator_malyawa_off()
	alife():create("reanimator_malyawa", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function marsh_weapon_up_1()
	als_on_off_switch.marsh_weapon_up_1()
	alife():create("wpn_spas12", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function marsh_weapon_up_2()
	als_on_off_switch.marsh_weapon_up_2()
	alife():create("wpn_spas12", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function marsh_weapon_up_3()
	als_on_off_switch.marsh_weapon_up_3()
	alife():create("wpn_toz34", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function marsh_weapon_up_4()
	als_on_off_switch.marsh_weapon_up_4()
	alife():create("wpn_wincheaster1300", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function red_weapon_up_1()
	als_on_off_switch.red_weapon_up_1()
	alife():create("wpn_rg-6", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function dc_key_1_switch()
	als_on_off_switch.dc_key_1_off()
	alife():create("monolith_kee_1", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function dc_key_2_switch()
	als_on_off_switch.dc_key_2_off()
	alife():create("monolith_kee_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function dc_key_3_switch()
	als_on_off_switch.dc_key_3_off()
	alife():create("monolith_kee_3", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	take_up_weapon()
end

function dc_keys_on()
	als_on_off_switch.dc_keys_on()
end

function gar_necronomicon_fake_on()
	als_on_off_switch.gar_necronomicon_fake_on()
	necronomicon_nax()
end

function gar_necronomicon_fake_off()
	als_on_off_switch.gar_necronomicon_fake_off()
end

function sor_pulevich_off()
	als_on_off_switch.sor_pulevich_off()
end

function marsh_icons_on()
	als_on_off_switch.marsh_icons_on()
end

function slaven_group_off_1()
	als_on_off_switch.slaven_group_off_1()
end

function slaven_group_off_2()
	als_on_off_switch.slaven_group_off_2()
end

function gen_heli_on()
	als_on_off_switch.gen_heli_on()
end

function gen_heli_off()
	als_on_off_switch.gen_heli_off()
end

function pri_golden_pig_on()
	als_on_off_switch.pri_golden_pig_on()
end

function pri_golden_pig_off()
	als_on_off_switch.pri_golden_pig_off()
	alife():create("black_soul", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function esc_timer_c4_1_on()
	als_on_off_switch.esc_timer_c4_1_on()
	this.esc_c4t_nax()
end

function esc_timer_c4_2_on()
	als_on_off_switch.esc_timer_c4_2_on()
	this.esc_c4t_nax()
end

function esc_timer_c4_3_on()
	als_on_off_switch.esc_timer_c4_3_on()
	this.esc_c4t_nax()
end

function esc_timer_c4_4_on()
	als_on_off_switch.esc_timer_c4_4_on()
	this.esc_c4t_nax()
end

function esc_timer_c4_5_on()
	als_on_off_switch.esc_timer_c4_5_on()
	this.esc_c4t_nax()
end

function esc_timer_c4_6_on()
	als_on_off_switch.esc_timer_c4_6_on()
	this.esc_c4t_nax()
end



function esc_c4t_nax()
	local c4t = db.actor:object("explosive_c4_timer")
	if c4t then
		alife():release(alife():object(c4t:id()), true)
	end
end

-- function ()
	-- als_on_off_switch.()
-- end

-- function ()
	-- als_on_off_switch.()
-- end

-- СТАТИКИ
function prolog()
	als_static_part.start_timer_static(5)
end

function open_repair_dialog()
	ogse_repair.open_repair_dialog()
end

function open_repair_free_dialog()
	ogse_repair_free.open_repair_dialog()
end


-- СООБЩЕНИЯ
function message_from_deadman_1()
	als_messages.from_deadman_1()
	marsh_deadman_radio()
end

function message_from_uzbashi_1()
	als_messages.from_uzbashi_1()
	marsh_uzbek_radio()
end

function message_from_grek_1()
	als_messages.from_grek_1()
	marsh_grek_whisper()
end

function message_from_zlatich_1()
	als_messages.from_zlatich_1()
	marsh_zlatich_radio()
end

function message_from_system_1()
	als_messages.from_system_1()
	system_message_1()
end

function message_from_system_2()
	als_messages.from_system_2()
	system_message_2()
end

function message_from_system_3()
	als_messages.from_system_3()
	system_message_3()
end

function message_from_system_5()
	als_messages.from_system_5()
	system_message_5()
end

function message_from_system_6()
	db.actor:enable_trade()
	als_messages.from_system_6()
	system_message_6()
end

--Заглушка для генераторов. Переделать. Есть еще ниже.
function message_from_system_()
	als_messages.from_system_3()
	system_message_3()
end

function message_from_dushman_1()
	als_messages.message_from_dushman_1()
end

function message_from_dushman_2()
	als_messages.message_from_dushman_2()
end

function message_from_aes_tactics_1()
	als_messages.message_from_aes_tactics_1()
end

function message_from_aes_tactics_2()
	als_messages.message_from_aes_tactics_2()
end

function message_from_hacker_1()
	als_messages.message_from_hacker_1()
	radio_from_hacker_1()
end

function message_from_hacker_2()
	als_messages.message_from_hacker_2()
	radio_from_hacker_2()
end

function message_from_hacker_3()
	als_messages.message_from_hacker_3()
	radio_from_hacker_3()
end

function message_from_hacker_4()
	als_messages.message_from_hacker_4()
	radio_from_hacker_4()
end

function message_from_hacker_5()
	als_messages.message_from_hacker_5()
	radio_from_hacker_5()
end

function message_from_hacker_6()
	als_messages.message_from_hacker_6()
	radio_from_hacker_6()
end

function message_from_hacker_7()
	als_messages.message_from_hacker_7()
	radio_from_hacker_7()
end

function message_from_hacker_8()
	als_messages.message_from_hacker_8()
	radio_from_hacker_8()
end

--[[function message_from__()
	als_messages.()
	()
end]]

-- Звуки в голове Актора

function radio_from_hacker_1(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\message_from_hacker_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function radio_from_hacker_2(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\message_from_hacker_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function radio_from_hacker_3(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\message_from_hacker_3]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function radio_from_hacker_4(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\message_from_hacker_4]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function radio_from_hacker_5(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\message_from_hacker_5]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function radio_from_hacker_6(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\message_from_hacker_6]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function radio_from_hacker_7(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\message_from_hacker_7]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function radio_from_hacker_8(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\message_from_hacker_8]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function hell_latin_1(actor, npc)
	-- als_hell_laughting()
	-- local snd_obj = xr_sound.get_safe_sound_object([[doom\030415_latin_fx2_16]])
	-- snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
	local sound_obj_l	= xr_sound.get_safe_sound_object( [[als\hell_laughting_l]] )
	local sound_obj_r	= xr_sound.get_safe_sound_object( [[als\hell_laughting_r]] )

	sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
	sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
end

function help_me_woman_1(npc)
  als_messages.help_me_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[doom\030415_female17_tk4_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function help_me_woman_2(npc)
  als_messages.help_me_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[doom\030415_female_help_me_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function help_me_man_1(npc)
  als_messages.help_me_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[doom\030415_delta5_female_helpme_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function hell_haha(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[doom\030415_laugh_whail_cry_fx4_11]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function hell_haha_1(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[doom\030415_bet_laugh1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function yantar_radio_1(npc)
  als_messages.yantar_radio_1_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\grek_pulevich_radio_01]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function yantar_radio_2(npc)
  als_messages.yantar_radio_2_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\grek_pulevich_radio_02]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function yantar_radio_3(npc)
  als_messages.yantar_radio_3_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\grek_pulevich_radio_03]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function yan_deev_speak_3(npc)
  als_messages.yan_deev_speak_3_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\yan_deev_speak_3]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function agr_grek_deev_1(npc)
  als_messages.agr_grek_deev_1_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\agr_grek_deev_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function agr_grek_deev_2(npc)
  als_messages.agr_grek_deev_2_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\agr_grek_deev_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function agr_grek_deev_3(npc)
  als_messages.agr_grek_deev_3_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\agr_grek_deev_3]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function agr_grek_deev_4(npc)
  als_messages.agr_grek_deev_4_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\agr_grek_deev_4]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function agr_grek_deev_5(npc)
  als_messages.agr_grek_deev_5_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\agr_grek_deev_5]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function agru_grek_deev(npc)
  als_messages.agru_grek_deev_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\agru_grek_deev]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function agru_radio_1(npc)
  als_messages.agru_radio_1_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\grek_pulevich_radio_04]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function agr_radio_1(npc)
  als_messages.agr_radio_1_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\grek_pulevich_radio_05]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function agr_radio_2(npc)
  als_messages.agr_radio_2_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\agr_flame_heli_radio]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function agr_radio_3(npc)
  als_messages.agr_radio_3_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\agr_grek_deadman_radio_01]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function agr_radio_4(npc)
  als_messages.agr_radio_4_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\grek_pulevich_radio_06]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function bun_radio_1()
	als_messages.recieved_massage_1()
	bun_radio_1_sound()
end
function bun_radio_1_sound()
  --als_messages.bunk_radio_dialog_1()
	local snd_obj = xr_sound.get_safe_sound_object([[als\bun\bun_killer_radio_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function bun_radio_2()
	als_messages.recieved_massage_2()
	bun_radio_2_sound()
end
function bun_radio_2_sound()
  --als_messages.bunk_radio_dialog_2()
	local snd_obj = xr_sound.get_safe_sound_object([[als\bun\bun_killer_radio_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function gar_radio_1(npc)
  als_messages.gar_radio_1_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\grek_pulevich_radio_07]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function gar_radio_2(npc)
  als_messages.gar_radio_2_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\grek_pulevich_radio_08]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function gar_radio_3(npc)
  als_messages.gar_radio_3_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\grek_pulevich_radio_09]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

-- function gar_radio_4()
	-- als_messages.recieved_massage_3()
	-- gar_radio_4_sound()
-- end
function gar_radio_4(npc)
  als_messages.gar_radio_4_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\gar_grek_deadman_radio_01]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function gar_grek_last_box()
	als_messages.recieved_massage_4()
	gar_grek_last_box_sound()
end
function gar_grek_last_box_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\gar_grek_last_box]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function val_radio_1(npc)
  als_messages.val_radio_1_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\val_killers_caution_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function val_radio_2(npc)
  als_messages.val_radio_2_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\val_ben_caution]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function varnak_about_chess()
	als_messages.recieved_massage_5()
	varnak_about_chess_sound()
end
function varnak_about_chess_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\varnak_about_chess]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function sor_blockpost_ivanzov_radio()
	als_messages.recieved_massage_6()
	sor_blockpost_ivanzov_radio_sound()
end
function sor_blockpost_ivanzov_radio_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\sor_blockpost_ivanzov_radio]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function als_scream_1(npc)
        local sound_obj	= xr_sound.get_safe_sound_object( [[als\screams\scream1]] )
        --local sound_obj_r	= xr_sound.get_safe_sound_object( [[als\screams\scream1_r]] )

		sound_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		--sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
end

function als_scream_2(actor, npc)
        local sound_obj_l	= xr_sound.get_safe_sound_object( [[als\screams\scream2_l]] )
        local sound_obj_r	= xr_sound.get_safe_sound_object( [[als\screams\scream2_r]] )

		sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
end

function als_scream_3(actor, npc)
        local sound_obj_l	= xr_sound.get_safe_sound_object( [[als\screams\scream3_l]] )
        local sound_obj_r	= xr_sound.get_safe_sound_object( [[als\screams\scream3_r]] )

		sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
end

function val_grek_phrase_1(npc)
  als_messages.val_grek_phrase_1_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\darkvalley\val_grek_phrase_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function val_grek_phrase_2(npc)
  als_messages.val_grek_phrase_2_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\darkvalley\val_grek_phrase_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function val_grek_phrase_3(npc)
  als_messages.val_grek_phrase_3_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\darkvalley\val_grek_phrase_3]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function val_grek_phrase_4(npc)
  als_messages.val_grek_phrase_4_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\darkvalley\val_grek_phrase_4]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function red_gold_phrase()
	als_messages.recieved_massage_7()
	red_gold_phrase_sound()
end
function red_gold_phrase_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\red\red_gold_phrase]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function darklab_chizh_phrase_1()
	als_messages.recieved_massage_8()
	darklab_chizh_phrase_1_sound()
end
function darklab_chizh_phrase_1_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\darklab\darklab_chizh_phrase_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function darklab_grek_luzenko_radio_1(npc)
  als_messages.darklab_grek_luzenko_radio_1_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\darklab\darklab_grek_luzenko_radio_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function darklab_grek_luzenko_radio_2(npc)
  als_messages.darklab_grek_luzenko_radio_2_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\darklab\darklab_grek_luzenko_radio_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function darklab_grek_luzenko_radio_3(npc)
  als_messages.darklab_grek_luzenko_radio_3_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\darklab\darklab_grek_luzenko_radio_3]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function darklab_grek_luzenko_radio_4(npc)
  als_messages.darklab_grek_luzenko_radio_4_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\darklab\darklab_grek_luzenko_radio_4]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_grek_megafon_1_speak(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\esc\esc_grek_megafon_1_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
  als_messages.perymetr_grek_dialog_1()
end

function esc_grek_megafon_2_speak(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\esc\esc_grek_megafon_2_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
  als_messages.perymetr_grek_dialog_2()
end

function red_panzer_grek_radio_1(npc)
  als_messages.red_panzer_grek_radio_1_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\red\red_panzer_grek_radio_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function red_panzer_grek_radio_2()
	als_messages.recieved_massage_9()
	red_panzer_grek_radio_2_sound()
end
function red_panzer_grek_radio_2_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\red\red_panzer_grek_radio_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_grek_kum_phrase_1(npc)
  als_messages.esc_grek_kum_phrase_1_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\esc\esc_grek_kum_phrase_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_grek_kum_phrase_2(npc)
  als_messages.esc_grek_kum_phrase_2_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\esc\esc_grek_kum_phrase_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

-- function darklab_killers_phrase_1()
	-- als_messages.recieved_massage_10()
	-- darklab_killers_phrase_1_sound()
-- end
function darklab_killers_phrase_1()
	local snd_obj = xr_sound.get_safe_sound_object([[als\darklab\darklab_killers_phrase_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function als_staticglitch_1(actor, npc)
        local sound_obj_l	= xr_sound.get_safe_sound_object( [[als\atp\atp_staticglitch_l]] )
        local sound_obj_r	= xr_sound.get_safe_sound_object( [[als\atp\atp_staticglitch_r]] )

		sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
end

function atp_chackie_laught(actor, npc)
        local sound_obj_l	= xr_sound.get_safe_sound_object( [[als\atp\chackie_laught_l]] )
        local sound_obj_r	= xr_sound.get_safe_sound_object( [[als\atp\chackie_laught_r]] )

		sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
end

function atp_oblomm(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\atp\atp_oblomm]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function gar_deadman_about_zombie()
	als_messages.recieved_massage_11()
	gar_deadman_about_zombie_sound()
end
function gar_deadman_about_zombie_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\gar_deadman_talk_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_shamray_frase_1(npc)
  als_messages.esc_shamray_dialog_1()
	local snd_obj = xr_sound.get_safe_sound_object([[als\esc\esc_shamray]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function pol_dushman_radio_1()
	als_messages.recieved_massage_12()
	pol_dushman_radio_1_sound()
end
function pol_dushman_radio_1_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\pol\pol_dushman_radio_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function pol_dushman_radio_2()
	als_messages.recieved_massage_13()
	pol_dushman_radio_2_sound()
end
function pol_dushman_radio_2_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\pol\pol_dushman_radio_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function gar_sinoptic_radio()
	als_messages.recieved_massage_14()
	gar_sinoptic_radio_sound()
end
function gar_sinoptic_radio_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\gar_sinoptic_radio]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function atp_mogilshik_radio_1()
	als_messages.recieved_massage_15()
	atp_mogilshik_radio_1_sound()
end
function atp_mogilshik_radio_1_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\atp\atp_mogilshik_radio_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function atp_mogilshik_radio_2()
	als_messages.recieved_massage_16()
	atp_mogilshik_radio_2_sound()
end
function atp_mogilshik_radio_2_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\atp\atp_mogilshik_radio_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function pol_mcleens_radio_1()
	als_messages.recieved_massage_17()
	pol_mcleens_radio_1_sound()
end
function pol_mcleens_radio_1_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\pol\pol_mcleens_radio_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function pol_mcleens_radio_2()
	als_messages.recieved_massage_18()
	pol_mcleens_radio_2_sound()
end
function pol_mcleens_radio_2_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\pol\pol_mcleens_radio_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function sor_ivancov_sniper_radio()
	als_messages.recieved_massage_19()
	sor_ivancov_sniper_radio_sound()
end
function sor_ivancov_sniper_radio_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\sor_ivanzov_phrase_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function sor_grek_phrase_1(npc)
  als_messages.sor_grek_phrase_1_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sor\sor_grek_phrase_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function sor_grek_phrase_2(npc)
  als_messages.sor_grek_phrase_2_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sor\sor_grek_phrase_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function sor_grek_phrase_3(npc)
  als_messages.sor_grek_phrase_3_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sor\sor_grek_phrase_3]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function sor_grek_phrase_4(npc)
  als_messages.sor_grek_phrase_4_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sor\sor_grek_phrase_4]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_01(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_01]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_02(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_02]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_03(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_03]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_04(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_04]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_05(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_05]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_06(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_06]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_07(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_07]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_08(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_08]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_09(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_09]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_10(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_10]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_11(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_11]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_12(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_12]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_13(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_13]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_14(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_14]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_15(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_15]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_16(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_16]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_17(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_17]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_18(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_18]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_19(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_19]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_20(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_20]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_21(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_21]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_22(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_22]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_23(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_23]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_storm_radio_24(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\perimeter_storm_radio_24]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function aes_grek_phrase_1(npc)
  als_messages.aes_grek_phrase_1_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\aes_grek_phrase_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

-- function (npc)
	-- local snd_obj = xr_sound.get_safe_sound_object([[]])
	-- snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
-- end

function agrunder_hsm_activated()
	system_message_9()
	level.add_cam_effector("camera_effects\\earthquake.anm", 1974, false, "")
end

function play_snd_from_radio_dushman_1(actor, npc)
  als_messages.sor_dushman_radio_1_dialog()
	local snd_obj	= xr_sound.get_safe_sound_object([[als\radio\sor_dushman_radio_1]])
	local obj		= npc:object("hand_radio")
	snd_obj:play_no_feedback(obj, sound_object.s3d, 0, obj:position(), 1.0)
end

function play_snd_from_radio_dushman_2(actor, npc)
  als_messages.sor_dushman_radio_2_dialog()
	local snd_obj	= xr_sound.get_safe_sound_object([[als\radio\sor_dushman_radio_2]])
	local obj		= npc:object("hand_radio")
	snd_obj:play_no_feedback(obj, sound_object.s3d, 0, obj:position(), 1.0)
end

function als_hell_laughting(actor, npc)
	local sound_obj_l	= xr_sound.get_safe_sound_object( [[als\hell_laughting_l]] )
	local sound_obj_r	= xr_sound.get_safe_sound_object( [[als\hell_laughting_r]] )

	sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
	sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
end

function system_message_1(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_about_group_elemination]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_2(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_about_mut_elemination]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_3(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_about_access_card]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_4(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_about_radioscanner]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_5(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_about_door_blocking]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_6(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_about_card_activation]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_7(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_about_20000_money]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_8(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_about_300000_money]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_9(npc)
  als_messages.system_message_9_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_about_process_beginning]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_10(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_health_medkit]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_11(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_health_army_medkit]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_12(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_health_scientic_medkit]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_13(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_xray_antirad]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_14(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_xray_scientic_medkit]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_15(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_bleeding_bandage]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_16(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_power_energetic]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_17(npc)
  als_messages.system_message_17_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_blowout_begin]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_18(npc)
  als_messages.system_message_18_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_blowout_3_m]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_19(npc)
  als_messages.system_message_19_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_blowout_2_m]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_20(npc)
  als_messages.system_message_20_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_blowout_1_m]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_21(npc)
  als_messages.system_message_21_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_blowout_system_fall]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_22(npc)
  als_messages.system_message_22_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_aa_vsplesk]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_23(npc)
  als_messages.system_message_23_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_aa_enemious]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_24(npc)
  als_messages.system_message_24_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_aa_enemious_plus_get_out]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function system_message_25(npc)
  als_messages.system_message_25_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_aa_get_out]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function puma_activated(npc)
  als_messages.puma_activated_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\puma_activated]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function puma_deactivated(npc)
  als_messages.puma_deactivated_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\puma_deactivated]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end


--Заглушка для генераторов. Переделать.
-- function system_message_(npc)
	-- local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\system_about_access_card]])
	-- snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
-- end

-- function system_message_(npc)
	-- local snd_obj = xr_sound.get_safe_sound_object([[als\sysmess\]])
	-- snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
-- end

function marsh_grek_whisper(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\marsh\marsh_grek_whisper]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function marsh_deadman_radio(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\marsh_deadman_radio]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function marsh_grek_radio(npc)
  als_messages.marsh_grek_radio_dialog()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\marsh_grek_radio]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function marsh_uzbek_radio(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\marsh_uzbek_radio]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function marsh_zlatich_radio(npc)
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\marsh_zlatich_radio]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function gar_raider_radio_1()
	als_messages.recieved_massage_20()
	gar_raider_radio_1_sound()
end
function gar_raider_radio_1_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\gar_raider_radio_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function gar_raider_radio_2()
	als_messages.recieved_massage_21()
	gar_raider_radio_2_sound()
end
function gar_raider_radio_2_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\gar_raider_radio_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function lim_kasper_radio()
	als_messages.recieved_massage_22()
	lim_kasper_radio_sound()
end
function lim_kasper_radio_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\lim_kasper_radio]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_phrase_ivancov_0_radio()
	als_messages.recieved_massage_23()
	esc_phrase_ivancov_0_radio_sound()
end
function esc_phrase_ivancov_0_radio_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\esc_phrase_ivancov_0]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_phrase_ivancov_1_radio()
	als_messages.recieved_massage_24()
	esc_phrase_ivancov_1_radio_sound()
end
function esc_phrase_ivancov_1_radio_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\esc_phrase_ivancov_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_phrase_ivancov_2_radio()
	als_messages.recieved_massage_25()
	esc_phrase_ivancov_2_radio_sound()
end
function esc_phrase_ivancov_2_radio_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\esc_phrase_ivancov_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_phrase_ivancov_3_radio()
	als_messages.recieved_massage_26()
	esc_phrase_ivancov_3_radio_sound()
end
function esc_phrase_ivancov_3_radio_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\esc_phrase_ivancov_3]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_phrase_kasper_0_radio()
	als_messages.recieved_massage_27()
	esc_phrase_kasper_0_radio_sound()
end
function esc_phrase_kasper_0_radio_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\esc_phrase_kasper_0]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_search_phrase_0_radio()
	als_messages.recieved_massage_28()
	esc_search_phrase_0_radio_sound()
end
function esc_search_phrase_0_radio_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\esc_search_phrase_0]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_search_phrase_1_radio()
	als_messages.recieved_massage_29()
	esc_search_phrase_1_radio_sound()
end
function esc_search_phrase_1_radio_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\esc_search_phrase_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_search_phrase_2_radio()
	als_messages.recieved_massage_30()
	esc_search_phrase_2_radio_sound()
end
function esc_search_phrase_2_radio_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\esc_search_phrase_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_search_phrase_3_radio()
	als_messages.recieved_massage_31()
	esc_search_phrase_3_radio_sound()
end
function esc_search_phrase_3_radio_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\esc_search_phrase_3]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_search_phrase_4_radio()
	als_messages.recieved_massage_32()
	esc_search_phrase_4_radio_sound()
end
function esc_search_phrase_4_radio_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\esc_search_phrase_4]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function esc_search_phrase_5_radio()
	als_messages.recieved_massage_33()
	esc_search_phrase_5_radio_sound()
end
function esc_search_phrase_5_radio_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\esc_search_phrase_5]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function gen_radio_1()
	als_messages.recieved_massage_34()
	gen_radio_1_sound()
end
function gen_radio_1_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\gen_radio_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function gen_radio_2()
	als_messages.recieved_massage_35()
	gen_radio_2_sound()
end
function gen_radio_2_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\gen_radio_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function gen_ufo_arrival(actor, npc)
        local sound_obj_l	= xr_sound.get_safe_sound_object( [[als\im_antre_l]] )
        local sound_obj_r	= xr_sound.get_safe_sound_object( [[als\im_antre_r]] )

		sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
end

function gen_combat_music(actor, npc)
        local sound_obj_l	= xr_sound.get_safe_sound_object( [[als\gen_combat_music_l]] )
        local sound_obj_r	= xr_sound.get_safe_sound_object( [[als\gen_combat_music_r]] )

		sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
end

function marsh_combat_music(actor, npc)
        local sound_obj_l	= xr_sound.get_safe_sound_object( [[als\marsh_combat_l]] )
        local sound_obj_r	= xr_sound.get_safe_sound_object( [[als\marsh_combat_r]] )

		sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
end

function gen_slaven_radio_1()
	als_messages.recieved_massage_36()
	gen_slaven_radio_1_sound()
end
function gen_slaven_radio_1_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\gen_slaven_radio_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function gen_slaven_radio_2()
	als_messages.recieved_massage_37()
	gen_slaven_radio_2_sound()
end
function gen_slaven_radio_2_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\gen_slaven_radio_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function gen_panzer_radio_1()
	als_messages.recieved_massage_38()
	gen_panzer_radio_1_sound()
end
function gen_panzer_radio_1_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\gen_panzer_radio_1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function agrunder_deev_alarm()
	local snd_obj = xr_sound.get_safe_sound_object([[als\radio\enemy_2]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

-- function ()
	-- local snd_obj = xr_sound.get_safe_sound_object([[als\radio\]])
	-- snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
-- end

function drinking_drink_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[interface\inv_vodka]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function bul_bul_sound()
	local snd_obj = xr_sound.get_safe_sound_object([[interface\bul_bul]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

-- телепортации
function panzhc_combat_jump()
	-- db.actor:disable_info_portion("blabla_init_dialog")
	xr_effects.enable_ui(db.actor, nil)
	level.add_pp_effector ("blink.ppe", 234, false)
local point = patrol("panzhc_combat_jump_walk")
local look = patrol("panzhc_combat_jump_look")
	db.actor:set_actor_position(point:point(0))
local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

function sor_to_polyana_jump()
	-- db.actor:disable_info_portion("blabla_init_dialog")
	xr_effects.enable_ui(db.actor, nil)
	level.add_pp_effector ("blink.ppe", 234, false)
local point = patrol("sor_to_polyana_jump_walk")
local look = patrol("sor_to_polyana_jump_look")
	db.actor:set_actor_position(point:point(0))
local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

function sor_to_gun_point_jump()
	-- db.actor:disable_info_portion("blabla_init_dialog")
	xr_effects.enable_ui(db.actor, nil)
	level.add_pp_effector ("blink.ppe", 234, false)
local point = patrol("sor_to_gun_point_jump_walk")
local look = patrol("sor_to_gun_point_jump_look")
	db.actor:set_actor_position(point:point(0))
local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

function aes_to_aes2kat_jump()
	-- db.actor:disable_info_portion("blabla_init_dialog")
	xr_effects.enable_ui(db.actor, nil)
	level.add_pp_effector ("blink.ppe", 234, false)
local point = patrol("aes_to_aes2kat_jump_walk")
local look = patrol("aes_to_aes2kat_jump_look")
	db.actor:set_actor_position(point:point(0))
local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

function kat_to_kat2aes_jump()
	-- db.actor:disable_info_portion("blabla_init_dialog")
	xr_effects.enable_ui(db.actor, nil)
	level.add_pp_effector ("blink.ppe", 234, false)
local point = patrol("kat_to_kat2aes_jump_walk")
local look = patrol("kat_to_kat2aes_jump_look")
	db.actor:set_actor_position(point:point(0))
local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

function gen_to_lc_jump()
	-- db.actor:disable_info_portion("blabla_init_dialog")
	xr_effects.enable_ui(db.actor, nil)
	level.add_pp_effector ("blink.ppe", 234, false)
local point = patrol("gen_to_lc_jump_walk")
local look = patrol("gen_to_lc_jump_look")
	db.actor:set_actor_position(point:point(0))
local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

function sor_bazar_jump()
	-- db.actor:disable_info_portion("blabla_init_dialog")
	xr_effects.enable_ui(db.actor, nil)
	level.add_pp_effector ("blink.ppe", 234, false)
local point = patrol("sor_bazar_jump_walk")
local look = patrol("sor_bazar_jump_look")
	db.actor:set_actor_position(point:point(0))
local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

function esc_panz_jump()
	-- db.actor:disable_info_portion("blabla_init_dialog")
	xr_effects.enable_ui(db.actor, nil)
	level.add_pp_effector ("blink.ppe", 234, false)
local point = patrol("esc_panz_jump_walk")
local look = patrol("esc_panz_jump_look")
	db.actor:set_actor_position(point:point(0))
local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH())
end

-- function _jump()
	-- -- db.actor:disable_info_portion("blabla_init_dialog")
	-- xr_effects.enable_ui(db.actor, nil)
	-- level.add_pp_effector ("blink.ppe", 234, false)
-- local point = patrol("_jump_walk")
-- local look = patrol("_jump_look")
	-- db.actor:set_actor_position(point:point(0))
-- local dir = look:point(0):sub(point:point(0))
	-- db.actor:set_actor_direction(-dir:getH())
-- end

function kill_gryaznov(obj)
end

function get_grc_money()
	local actor = db.actor
	actor:give_money(300000)
	game_stats.money_quest_update(300000)
	als_messages.transaction_300()
end

function get_grc_money_silent()
	local actor = db.actor
	actor:give_money(300000)
	game_stats.money_quest_update(300000)
	als_messages.transaction_300_silent()
end

function get_hazar_money()
	local actor = db.actor
	actor:give_money(20000)
	game_stats.money_quest_update(20000)
	als_messages.transaction_20()
end

function get_hazar_money_silent()
	local actor = db.actor
	actor:give_money(20000)
	game_stats.money_quest_update(20000)
	als_messages.transaction_20_silent()
end

function sor_transfer_items(actor, npc)
	inv_box = level_object_by_sid (21367)

	out_object = actor
    in_object  = inv_box
		actor:inventory_for_each(transfer_object_item)
end

-- Отношение
function val_scorpio_enemy_actor(actor, npc)
    local scorpio = level_object_by_sid(21236)
    if scorpio ~= nil then
       scorpio:set_relation(game_object.enemy, db.actor)
    end
end

function marsh_catcher_enemy_actor(actor, npc)
    local catcher = level_object_by_sid(20375)
    if catcher ~= nil then
       catcher:set_relation(game_object.enemy, db.actor)
    end
end

function nato_default()
	als_relations.nato_default()
end

function nato_up()
	als_relations.nato_up()
end

function nato_down()
	als_relations.nato_down()
end

function killer_down()
	als_relations.killer_down()
end

function killer_default()
	als_relations.killer_default()
end

function desant_default()
	als_relations.desant_default()
end

function desant_up()
	als_relations.desant_up()
end

function sinoptic_up()
	als_relations.sinoptic_up()
end

function mcleens_up()
	als_relations.mcleens_up()
end

function start_night_fly(actor, npc)
	game.start_tutorial("night_fly")
end

function start_day_fly(actor, npc)
	game.start_tutorial("day_fly")
end

function drinking_drink()
	level.add_pp_effector("alcohol.ppe", 3000, false)
end

function get_million()
	als_money.get_1000000_money()
end

function buffer_off()
-- get_console():execute("sv_setweather clear")
	local snd_obj = xr_sound.get_safe_sound_object([[als\art_hunter_stop]])
		snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
	local particle = "a_ufp_particles\\group_ufp\\atom_glow"
		if particle ~= nil then
			particle = particles_object(particle)
			particle:play_at_pos(db.actor:position())
		end
	level.set_weather("generator")
end

function dc_br_appear()
	local particle = "a_ufp_particles\\group_ufp\\atom_glow"
		if particle ~= nil then
			particle = particles_object(particle)
			particle:play_at_pos(db.actor:position())
		end
end

--=============== Зонтики ===================
function zont_activ()
local particle = "1935\\group_items\\expl_mushroom_glow00"
        if particle ~= nil then
            particle = particles_object(particle)
            particle:play_at_pos(db.actor:position())
        end
end

function zont_zabral()
local radius = 3
local search_art = {
	"lov_af_barhat11",
        "lov_af_chetki11",
        "lov_af_chipsi11",
        "lov_af_diablo11",
        "lov_af_gorgona11",
        "lov_af_jaba11",
        "lov_af_jbk11",
        "lov_af_klever11",
        "lov_af_kliaksa11",
        "lov_af_krest11",
        "lov_af_ojerelie11",
        "lov_af_serpantin11",
        "lov_af_shkatulka11",
        "lov_af_spaika_211",
        "lov_af_kris_zvezda11",
        "lov_af_eye_voron11",
        "lov_af_fallen_angel11",
        "lov_af_pero11",
        "lov_af_vinograd11",
        "lov_af_black_angel11",
        "lov_af_kosi11",
        "lov_af_black_hole11",
        "lov_af_provoloka11",
        "lov_af_kletka11",
        "lov_af_kvazar11",
        "lov_af_propeller11",
        "lov_af_pylesos11",
        "lov_af_shipovnik11",
        "lov_af_fontan11",
        "lov_magneto11"
	}
local pos = db.actor:position()
for i= 1, 65534 do
		local obj = level.object_by_id(i)
	for j=1,#search_art do
		if obj ~= nil and obj:section() == search_art[j] then
			local dist = pos:distance_to(obj:position())
			if dist < radius then
				alife():release(alife():object(obj:id()), true)
				local ccc = string.len(search_art[j])
				local aaa = string.sub(search_art[j],1,ccc-1)
				alife():create(aaa, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(),db.actor:id())
				db.actor:give_game_news("Otrzymano puіapkк z artefaktem.", "ui\\ui_iconsTotal",Frect():set(0,188,83,47) ,0, 5000)
			end
		end
	end
end
end
--=============== Зонтики ===================
